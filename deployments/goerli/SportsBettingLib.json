{
  "address": "0xeac7428A8FBE8339B76505bBA4968e4B9Dc6A43B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakerObligation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "calculateCommission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winningAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateStakerObligation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "getFixtureResultFromAPIResponse",
      "outputs": [
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "",
          "type": "SportsBettingLib.FixtureResult"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "winningOutcome",
          "type": "SportsBettingLib.FixtureResult"
        }
      ],
      "name": "getLosingFixtureOutcomes",
      "outputs": [
        {
          "internalType": "enum SportsBettingLib.FixtureResult[]",
          "name": "",
          "type": "SportsBettingLib.FixtureResult[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d161bcfcc03d024e91fdf8c9d3f2f48e869dc3a8113b0c9088d43a65b162f07",
  "receipt": {
    "to": null,
    "from": "0x07401CC21ccA4Af0f4a50f7dfcCE4c795F671cD7",
    "contractAddress": "0xeac7428A8FBE8339B76505bBA4968e4B9Dc6A43B",
    "transactionIndex": 59,
    "gasUsed": "389501",
    "logsBloom": "0x
    "blockHash": "0x54b40cc15d01a3197247b2c906bb5931b7a0ad38cb004ab41e11bbc237be4548",
    "transactionHash": "0x0d161bcfcc03d024e91fdf8c9d3f2f48e869dc3a8113b0c9088d43a65b162f07",
    "logs": [],
    "blockNumber": 8562230,
    "cumulativeGasUsed": "8172352",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "67a20b0311782a3d2b253498c21d2f1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerObligation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"calculateCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateStakerObligation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"getFixtureResultFromAPIResponse\",\"outputs\":[{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"\",\"type\":\"SportsBettingLib.FixtureResult\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"winningOutcome\",\"type\":\"SportsBettingLib.FixtureResult\"}],\"name\":\"getLosingFixtureOutcomes\",\"outputs\":[{\"internalType\":\"enum SportsBettingLib.FixtureResult[]\",\"name\":\"\",\"type\":\"SportsBettingLib.FixtureResult[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SportsBettingLib.sol\":\"SportsBettingLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SportsBettingLib.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary SportsBettingLib {\\r\\n    // Define DEFAULT FixtureResult = 0. \\r\\n    // DEFAULT FixtureResult is actually invalid and acts a placeholder to catch erroneous\\r\\n    // FixtureResult entries, as Solidity interprets null values as 0.\\r\\n    // CANCELLED FixtureResult allows us to handle cases where sports fixtures are cancelled\\r\\n    // and we should allow all stakers to withdraw their stakes\\r\\n    enum FixtureResult {\\r\\n        DEFAULT,\\r\\n        CANCELLED,\\r\\n        HOME,\\r\\n        DRAW,\\r\\n        AWAY\\r\\n    }\\r\\n\\r\\n    function getFixtureResultFromAPIResponse(\\r\\n        uint256 result\\r\\n    ) external pure returns (FixtureResult) {\\r\\n        if (result == uint256(FixtureResult.HOME)) {\\r\\n            return FixtureResult.HOME;\\r\\n        } else if (result == uint256(FixtureResult.DRAW)) {\\r\\n            return FixtureResult.DRAW;\\r\\n        } else if (result == uint256(FixtureResult.AWAY)) {\\r\\n            return FixtureResult.AWAY;\\r\\n        } else if (result == uint256(FixtureResult.CANCELLED)) {\\r\\n            return FixtureResult.CANCELLED;\\r\\n        }\\r\\n        return FixtureResult.DEFAULT;\\r\\n    }\\r\\n\\r\\n    function getLosingFixtureOutcomes(FixtureResult winningOutcome)\\r\\n        external\\r\\n        pure\\r\\n        returns (FixtureResult[] memory)\\r\\n    {\\r\\n        FixtureResult[] memory losingOutcomes = new FixtureResult[](2);\\r\\n\\r\\n        uint256 losingOutcomesIndex = 0;\\r\\n        for (uint256 i = uint256(FixtureResult.HOME); i <= uint256(FixtureResult.AWAY); i++) {\\r\\n            if (FixtureResult(i) != winningOutcome) {\\r\\n                losingOutcomes[losingOutcomesIndex] = FixtureResult(i);\\r\\n                losingOutcomesIndex += 1;\\r\\n            }\\r\\n        }\\r\\n        return losingOutcomes;\\r\\n    }\\r\\n\\r\\n    function calculateStakerObligation(\\r\\n        uint256 stakerAmount,\\r\\n        uint256 winningAmount,\\r\\n        uint256 totalAmount\\r\\n    ) public pure returns(uint256) {\\r\\n        bool flag;\\r\\n        uint256 stakerShare;\\r\\n        uint256 obligation;\\r\\n        (flag, stakerShare) = SafeMath.tryMul(totalAmount, stakerAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Overflow calculating obligation\\\");\\r\\n        }\\r\\n        (flag, obligation) = SafeMath.tryDiv(stakerShare, winningAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Division by zero\\\");\\r\\n        }\\r\\n        \\r\\n        return obligation;\\r\\n    }\\r\\n\\r\\n    function calculateCommission(\\r\\n        uint256 stakerObligation,\\r\\n        uint256 stakerAmount,\\r\\n        uint256 commissionRate\\r\\n    ) public pure returns(uint256) {\\r\\n        bool flag;\\r\\n        uint256 profit;\\r\\n        uint256 commission;\\r\\n        (flag, profit) = SafeMath.trySub(stakerObligation, stakerAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Underflow calculating profit\\\");\\r\\n        }\\r\\n        (flag, commission) = SafeMath.tryMul(commissionRate, profit);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Overflow calculating commission\\\");\\r\\n        }\\r\\n        // Divide by 100 as COMMISSION_RATE is in percentage terms\\r\\n        return commission / 100;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc4b3cb91f383911078b89c243dc5cdc353d4385c9e9e7b69b1cc0d4ddd25c906\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x61061661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806329a2ea451461005b578063373bdcc8146100815780633af625ae146100a157806370f08956146100c1575b600080fd5b61006e610069366004610445565b6100d4565b6040519081526020015b60405180910390f35b61009461008f366004610471565b6101a1565b60405161007891906104d1565b6100b46100af36600461051c565b610289565b6040516100789190610535565b61006e6100cf366004610445565b6102d7565b6000806000806100e485886103ab565b90935091508261013b5760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f772063616c63756c6174696e67206f626c69676174696f6e0060448201526064015b60405180910390fd5b61014582876103f3565b9093509050826101975760405162461bcd60e51b815260206004820152601060248201527f4469766973696f6e206279207a65726f000000000000000000000000000000006044820152606401610132565b9695505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050600060025b60048111610280578460048111156101e5576101e5610499565b8160048111156101f7576101f7610499565b600481111561020857610208610499565b1461026e5780600481111561021f5761021f610499565b83838151811061023157610231610549565b6020026020010190600481111561024a5761024a610499565b9081600481111561025d5761025d610499565b90525061026b600183610575565b91505b806102788161058d565b9150506101cb565b50909392505050565b6000600282141561029c57506002919050565b60038214156102ad57506003919050565b60048214156102be57506004919050565b60018214156102cf57506001919050565b506000919050565b6000806000806102e78787610423565b9093509150826103395760405162461bcd60e51b815260206004820152601c60248201527f556e646572666c6f772063616c63756c6174696e672070726f666974000000006044820152606401610132565b61034385836103ab565b9093509050826103955760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f772063616c63756c6174696e6720636f6d6d697373696f6e006044820152606401610132565b6103a06064826105be565b979650505050505050565b600080836103bf57506001905060006103ec565b838302838582816103d2576103d26105a8565b04146103e55760008092509250506103ec565b6001925090505b9250929050565b60008082610406575060009050806103ec565b6001838581610417576104176105a8565b04915091509250929050565b60008083831115610439575060009050806103ec565b50600193919092039150565b60008060006060848603121561045a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561048357600080fd5b81356005811061049257600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b600581106104cd57634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015610510576105008385516104af565b92840192918401916001016104ed565b50909695505050505050565b60006020828403121561052e57600080fd5b5035919050565b6020810161054382846104af565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156105885761058861055f565b500190565b60006000198214156105a1576105a161055f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826105db57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c4bc1680807d9223180d31a94610d3227f037887106b37852b45b60ce223cbc464736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806329a2ea451461005b578063373bdcc8146100815780633af625ae146100a157806370f08956146100c1575b600080fd5b61006e610069366004610445565b6100d4565b6040519081526020015b60405180910390f35b61009461008f366004610471565b6101a1565b60405161007891906104d1565b6100b46100af36600461051c565b610289565b6040516100789190610535565b61006e6100cf366004610445565b6102d7565b6000806000806100e485886103ab565b90935091508261013b5760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f772063616c63756c6174696e67206f626c69676174696f6e0060448201526064015b60405180910390fd5b61014582876103f3565b9093509050826101975760405162461bcd60e51b815260206004820152601060248201527f4469766973696f6e206279207a65726f000000000000000000000000000000006044820152606401610132565b9695505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050600060025b60048111610280578460048111156101e5576101e5610499565b8160048111156101f7576101f7610499565b600481111561020857610208610499565b1461026e5780600481111561021f5761021f610499565b83838151811061023157610231610549565b6020026020010190600481111561024a5761024a610499565b9081600481111561025d5761025d610499565b90525061026b600183610575565b91505b806102788161058d565b9150506101cb565b50909392505050565b6000600282141561029c57506002919050565b60038214156102ad57506003919050565b60048214156102be57506004919050565b60018214156102cf57506001919050565b506000919050565b6000806000806102e78787610423565b9093509150826103395760405162461bcd60e51b815260206004820152601c60248201527f556e646572666c6f772063616c63756c6174696e672070726f666974000000006044820152606401610132565b61034385836103ab565b9093509050826103955760405162461bcd60e51b815260206004820152601f60248201527f4f766572666c6f772063616c63756c6174696e6720636f6d6d697373696f6e006044820152606401610132565b6103a06064826105be565b979650505050505050565b600080836103bf57506001905060006103ec565b838302838582816103d2576103d26105a8565b04146103e55760008092509250506103ec565b6001925090505b9250929050565b60008082610406575060009050806103ec565b6001838581610417576104176105a8565b04915091509250929050565b60008083831115610439575060009050806103ec565b50600193919092039150565b60008060006060848603121561045a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561048357600080fd5b81356005811061049257600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b600581106104cd57634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015610510576105008385516104af565b92840192918401916001016104ed565b50909695505050505050565b60006020828403121561052e57600080fd5b5035919050565b6020810161054382846104af565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156105885761058861055f565b500190565b60006000198214156105a1576105a161055f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826105db57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c4bc1680807d9223180d31a94610d3227f037887106b37852b45b60ce223cbc464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}