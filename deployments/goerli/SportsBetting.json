{
  "address": "0x19Ce63bcb1c7f88735c65AFC1920cB31BcceC6B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sportsOracleURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_jobId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetCommissionPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BettingState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "BettingStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoffTime",
          "type": "uint256"
        }
      ],
      "name": "KickoffTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoff",
          "type": "uint256"
        }
      ],
      "name": "RequestFixtureKickoffFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "error",
          "type": "string"
        }
      ],
      "name": "RequestFixtureResultError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "RequestFixtureResultFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "RequestedFixtureKickoff",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "RequestedFixtureResult",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BET_ADVANCE_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BET_CUTOFF_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMISSION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "awaitBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betTypes",
      "outputs": [
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "bettingState",
      "outputs": [
        {
          "internalType": "enum SportsBetting.BettingState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "closeBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "commissionMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "commissionPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "fixtureToKickoffTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getEnrichedFixtureData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SportsBetting.BettingState",
              "name": "fixtureState",
              "type": "uint8"
            },
            {
              "internalType": "uint256[3]",
              "name": "total",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256[3]",
              "name": "user",
              "type": "uint256[3]"
            }
          ],
          "internalType": "struct SportsBetting.FixtureEnrichment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "handleCommissionPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "openBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payouts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "ko",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillFixtureKickoffTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillFixtureResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureKickoffTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureKickoffTimeParameter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureResultParameter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestKickoffToFixture",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestResultToFixture",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "results",
      "outputs": [
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sportsOracleURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.FixtureResult",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToLink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWasPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "withdrawPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x231963c905503f2f87c5317b5c68f84640ee36da7991b210901dceae16c701cc",
  "receipt": {
    "to": null,
    "from": "0x07401CC21ccA4Af0f4a50f7dfcCE4c795F671cD7",
    "contractAddress": "0x19Ce63bcb1c7f88735c65AFC1920cB31BcceC6B5",
    "transactionIndex": 66,
    "gasUsed": "4351197",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd1edc6f126766df35e0d8308affec68e23b597aafffdabab1b011c651a2eabe7",
    "transactionHash": "0x231963c905503f2f87c5317b5c68f84640ee36da7991b210901dceae16c701cc",
    "logs": [],
    "blockNumber": 8562232,
    "cumulativeGasUsed": "14680524",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://1vyuff64d9.execute-api.us-east-1.amazonaws.com/dev/premier-league/fixtures/",
    "0xcc79157eb46f5624204f47ab42b3906caa40eab7",
    "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "ca98366cc7314957b8c012c72f05aeeb",
    "100000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "67a20b0311782a3d2b253498c21d2f1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sportsOracleURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_jobId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetCommissionPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BettingStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoffTime\",\"type\":\"uint256\"}],\"name\":\"KickoffTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoff\",\"type\":\"uint256\"}],\"name\":\"RequestFixtureKickoffFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"RequestFixtureResultError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RequestFixtureResultFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"RequestedFixtureKickoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"RequestedFixtureResult\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BET_ADVANCE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BET_CUTOFF_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"awaitBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betTypes\",\"outputs\":[{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bettingState\",\"outputs\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"closeBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"commissionMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"commissionPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"fixtureToKickoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEnrichedFixtureData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"fixtureState\",\"type\":\"uint8\"},{\"internalType\":\"uint256[3]\",\"name\":\"total\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"user\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct SportsBetting.FixtureEnrichment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"handleCommissionPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"openBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ko\",\"type\":\"uint256\"}],\"name\":\"rawFulfillFixtureKickoffTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"rawFulfillFixtureResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureKickoffTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureKickoffTimeParameter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureResultParameter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestKickoffToFixture\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestResultToFixture\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"results\",\"outputs\":[{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportsOracleURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.FixtureResult\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWasPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"withdrawPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nathan Cinnamond\",\"events\":{\"BetCommissionPayout(string,uint256)\":{\"params\":{\"amount\":\": amount paid out to owner in commission\"}},\"BetPayout(address,string,uint256)\":{\"params\":{\"amount\":\": amount paid out to better (original stake plus profit)\",\"better\":\": address of the unstaker\",\"fixtureID\":\": corresponding fixtureID for fixture on outcome which better claims payout\"}},\"BetStaked(address,string,uint256,uint8)\":{\"params\":{\"amount\":\": amount added to total amount staked by better on fixture outcome\",\"betType\":\": outcome of fixtureID that better has staked on\",\"better\":\": address of the staker\",\"fixtureID\":\": corresponding fixtureID for fixture on which outcome is staked\"}},\"BetUnstaked(address,string,uint256,uint8)\":{\"params\":{\"amount\":\": amount subtracted from total amount staked by better on fixture outcome\",\"betType\":\": outcome of fixtureID that better has unstaked on\",\"better\":\": address of the unstaker\",\"fixtureID\":\": corresponding fixtureID for fixture on which outcome is unstaked\"}},\"BettingStateChanged(string,uint8)\":{\"params\":{\"fixtureID\":\": the corresponding fixtureID for fixture that has state change\",\"state\":\": the BettingState corresponding to the new state of the fixture\"}},\"KickoffTimeUpdated(string,uint256)\":{\"params\":{\"fixtureID\":\": corresponding fixtureID for fixture with kickoff time fulfilled\",\"kickoffTime\":\": unix timestamp of kickoff time for fixture\"}}},\"kind\":\"dev\",\"methods\":{\"awaitBetForFixture(string)\":{\"params\":{\"fixtureID\":\": the corresponding fixtureID for fixture to be set to AWAITING\"}},\"closeBetForFixture(string)\":{\"params\":{\"fixtureID\":\": the corresponding fixtureID for fixture to be closed\"}},\"getEnrichedFixtureData(string,address)\":{\"params\":{\"fixtureID\":\": Corresponding fixtureID for fixture outcomes\",\"user\":\": Address of user corresponding to user fixture stakes\"},\"returns\":{\"_0\":\"FixtureEnrichment struct containing fixture state, user stakes and total stakes\"}},\"handleCommissionPayout(string)\":{\"params\":{\"fixtureID\":\": Corresponding fixtureID for fixture owner withdraws commission for\"}},\"openBetForFixture(string)\":{\"params\":{\"fixtureID\":\": the corresponding fixtureID for fixture to be opened\"}},\"requestFixtureKickoffTime(string)\":{\"params\":{\"fixtureID\":\": Corresponding fixtureID for fixture user requests kickoff time for\"}},\"requestFixtureResult(string)\":{\"params\":{\"fixtureID\":\": Corresponding fixtureID for fixture user requests result for\"}},\"stake(string,uint8,uint256)\":{\"params\":{\"amount\":\": The amount of collateral added to user's total stake on fixture outcome\",\"betType\":\": The fixture outcome the msg sender is staking on\",\"fixtureID\":\": Corresponding fixtureID for fixture user is staking on\"}},\"unstake(string,uint8,uint256)\":{\"params\":{\"amount\":\": The amount of collateral subtracted from user's total stake on fixture outcome\",\"betType\":\": The fixture outcome the msg sender is unstaking on\",\"fixtureID\":\": Corresponding fixtureID for fixture user is unstaking on\"}},\"withdrawPayout(string)\":{\"params\":{\"fixtureID\":\": Corresponding fixtureID for fixture user withdraws winnings for\"}}},\"title\":\"A contract for sports result staking\",\"version\":1},\"userdoc\":{\"events\":{\"BetCommissionPayout(string,uint256)\":{\"notice\":\"Event emitted each time owner claims commission on bet payout profits\"},\"BetPayout(address,string,uint256)\":{\"notice\":\"Event emitted each time a user claims payout on fixture result\"},\"BetStaked(address,string,uint256,uint8)\":{\"notice\":\"Event emitted each time a user stakes on a fixture outcome\"},\"BetUnstaked(address,string,uint256,uint8)\":{\"notice\":\"Event emitted each time a user unstakes on a fixture outcome\"},\"BettingStateChanged(string,uint8)\":{\"notice\":\"Event emitted each time the betting state for a fixture changes\"},\"KickoffTimeUpdated(string,uint256)\":{\"notice\":\"Event emitted each time a fixture kickoff time is fulfilled by oracle\"}},\"kind\":\"user\",\"methods\":{\"awaitBetForFixture(string)\":{\"notice\":\"Changes fixture betting state to AWAITING if eligible\"},\"closeBetForFixture(string)\":{\"notice\":\"Closes fixture if it is 1. Not currently closed AND 2. eligible to be closed\"},\"getEnrichedFixtureData(string,address)\":{\"notice\":\"Gets total and user stakes on all outcomes for fixture\"},\"handleCommissionPayout(string)\":{\"notice\":\"Transfers owner commission on fixture if applicable\"},\"openBetForFixture(string)\":{\"notice\":\"Makes oracle request to get fixture kickoff time and set fixture state to OPENINGOn fulfillment handle, ctx will open fixture is eligible\"},\"requestFixtureKickoffTime(string)\":{\"notice\":\"Calls consumer contract to request fixture kickoff time from oracle\"},\"requestFixtureKickoffTimeParameter(string)\":{\"notice\":\"Request fixture kickoff time from the oracle in a single transaction\"},\"requestFixtureResult(string)\":{\"notice\":\"Calls consumer contract to request fixture result from oracle\"},\"requestFixtureResultParameter(string)\":{\"notice\":\"Request fixture result from the oracle in a single transaction\"},\"stake(string,uint8,uint256)\":{\"notice\":\"Allows user to stake on fixture with ID fixtureID for outcome 'betType' with 'amount'\"},\"unstake(string,uint8,uint256)\":{\"notice\":\"Allows user to unstake on fixture with ID fixtureID for outcome 'betType' with 'amount'\"},\"withdrawLink(uint256)\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"},\"withdrawPayout(string)\":{\"notice\":\"Transfers user winnings on fixture if applicable\"}},\"notice\":\"Handles user stakes and allows winning stakers to claim payouts \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SportsBetting.sol\":\"SportsBetting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SportsBetting.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n//import \\\"./mock/IERC20.sol\\\";\\r\\nimport \\\"./SportsOracleConsumer.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SportsBettingLib.sol\\\";\\r\\n\\r\\n/// @title A contract for sports result staking\\r\\n/// @author Nathan Cinnamond\\r\\n/// @notice Handles user stakes and allows winning stakers to claim payouts \\r\\ncontract SportsBetting is SportsOracleConsumer {\\r\\n\\r\\n    enum BettingState {\\r\\n        CLOSED,\\r\\n        OPENING,\\r\\n        OPEN,\\r\\n        AWAITING,\\r\\n        PAYABLE,\\r\\n        CANCELLED\\r\\n    }\\r\\n\\r\\n    struct FixtureEnrichment {\\r\\n        BettingState fixtureState;\\r\\n        uint256[3] total;\\r\\n        uint256[3] user;\\r\\n    }\\r\\n\\r\\n    /// @notice Event emitted each time the betting state for a fixture changes\\r\\n    /// @param fixtureID: the corresponding fixtureID for fixture that has state change\\r\\n    /// @param state: the BettingState corresponding to the new state of the fixture\\r\\n    event BettingStateChanged(string fixtureID, BettingState state);\\r\\n\\r\\n    /// @notice Event emitted each time a user stakes on a fixture outcome\\r\\n    /// @param better: address of the staker\\r\\n    /// @param fixtureID: corresponding fixtureID for fixture on which outcome is staked\\r\\n    /// @param amount: amount added to total amount staked by better on fixture outcome\\r\\n    /// @param betType: outcome of fixtureID that better has staked on\\r\\n    event BetStaked(\\r\\n        address indexed better,\\r\\n        string fixtureID,\\r\\n        uint256 amount,\\r\\n        SportsBettingLib.FixtureResult betType\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted each time a user unstakes on a fixture outcome\\r\\n    /// @param better: address of the unstaker\\r\\n    /// @param fixtureID: corresponding fixtureID for fixture on which outcome is unstaked\\r\\n    /// @param amount: amount subtracted from total amount staked by better on fixture outcome\\r\\n    /// @param betType: outcome of fixtureID that better has unstaked on\\r\\n    event BetUnstaked(\\r\\n        address indexed better,\\r\\n        string fixtureID,\\r\\n        uint256 amount,\\r\\n        SportsBettingLib.FixtureResult betType\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted each time a user claims payout on fixture result\\r\\n    /// @param better: address of the unstaker\\r\\n    /// @param fixtureID: corresponding fixtureID for fixture on outcome which better claims payout\\r\\n    /// @param amount: amount paid out to better (original stake plus profit)\\r\\n    event BetPayout(address indexed better, string fixtureID, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted each time owner claims commission on bet payout profits\\r\\n    /// @param amount: amount paid out to owner in commission\\r\\n    event BetCommissionPayout(string indexed fixtureID, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted each time a fixture kickoff time is fulfilled by oracle\\r\\n    /// @param fixtureID: corresponding fixtureID for fixture with kickoff time fulfilled\\r\\n    /// @param kickoffTime: unix timestamp of kickoff time for fixture\\r\\n    event KickoffTimeUpdated(string fixtureID, uint256 kickoffTime);\\r\\n\\r\\n    SportsBettingLib.FixtureResult[5] public betTypes;\\r\\n\\r\\n    // Contract owner\\r\\n    address public immutable owner;\\r\\n\\r\\n    // DAI Stablecoin address\\r\\n    address public immutable daiAddress;\\r\\n\\r\\n    // Entrance fee of 0.0001 DAI (10^14 Wei)\\r\\n    uint256 public constant ENTRANCE_FEE = 10e14;\\r\\n\\r\\n    // Commission rate percentage taken by contract owner for each payout as a percentage\\r\\n    uint256 public constant COMMISSION_RATE = 1;\\r\\n\\r\\n    // Max time before a fixture kick-off that a bet can be placed in seconds\\r\\n    // A fixture bet state will not move to OPEN before a time to the left of the\\r\\n    // ko time equal to BET_ADVANCE_TIME\\r\\n    uint256 public constant BET_ADVANCE_TIME = 7 days; // 7 days\\r\\n\\r\\n    // Cut off time for bets before KO time in seconds\\r\\n    // i.e. all bets must be placed at time t where t < koTime - BET_CUTOFF_TIME\\r\\n    uint256 public constant BET_CUTOFF_TIME = 90 minutes; // 90 minutes\\r\\n\\r\\n    // Map each fixture ID to whether betting is open for this fixture\\r\\n    mapping(string => BettingState) public bettingState;\\r\\n\\r\\n    // Map each fixture ID to a map of FixtureResult to a map of address to uint representing the amount of wei bet on that result\\r\\n    mapping(string => mapping(SportsBettingLib.FixtureResult => mapping(address => uint256)))\\r\\n        public amounts;\\r\\n\\r\\n    // Map each fixture ID to a map of FixtureResult to a uint representing the total amount of wei bet on that result\\r\\n    mapping(string => mapping(SportsBettingLib.FixtureResult => uint256))\\r\\n        public totalAmounts;\\r\\n\\r\\n    // Map each fixture ID to a map of address to amount the ctx paid the address owner for that fixture\\r\\n    mapping(string => mapping(address => uint256)) public payouts;\\r\\n\\r\\n    // Map each user address to fixture ID to boolean representing whether they were paid for a fixture\\r\\n    mapping(string => mapping(address => bool)) public userWasPaid;\\r\\n\\r\\n    // Map oracle request ID for fixture kickoff time request to corresponding fixture ID\\r\\n    mapping(bytes32 => string) public requestKickoffToFixture;\\r\\n\\r\\n    // Map each fixture ID to unix timestamp for its kickoff time\\r\\n    mapping(string => uint256) public fixtureToKickoffTime;\\r\\n\\r\\n    // Map oracle request ID for fixture result request to corresponding fixture ID\\r\\n    mapping(bytes32 => string) public requestResultToFixture;\\r\\n\\r\\n    // Map fixture ID to fixture result\\r\\n    mapping(string => SportsBettingLib.FixtureResult) public results;\\r\\n\\r\\n    // Commission total taken by contract owner indexed by fixture\\r\\n    mapping(string => uint256) public commissionMap;\\r\\n\\r\\n    // Map of fixture ID to whether commission was paid to owner for this fixture\\r\\n    mapping(string => bool) public commissionPaid;\\r\\n\\r\\n    constructor(\\r\\n        string memory _sportsOracleURI,\\r\\n        address _oracle,\\r\\n        address _dai,\\r\\n        address _link,\\r\\n        string memory _jobId,\\r\\n        uint256 _fee\\r\\n    ) SportsOracleConsumer(_sportsOracleURI, _oracle, _link, _jobId, _fee) {\\r\\n        betTypes[0] = SportsBettingLib.FixtureResult.DEFAULT;\\r\\n        betTypes[1] = SportsBettingLib.FixtureResult.CANCELLED;\\r\\n        betTypes[2] = SportsBettingLib.FixtureResult.HOME;\\r\\n        betTypes[3] = SportsBettingLib.FixtureResult.DRAW;\\r\\n        betTypes[4] = SportsBettingLib.FixtureResult.AWAY;\\r\\n\\r\\n        owner = msg.sender;\\r\\n        daiAddress = _dai;\\r\\n    }\\r\\n\\r\\n    // Wrapper for setting fixture betting state and emitting event\\r\\n    function setFixtureBettingState(string memory fixtureID, BettingState state)\\r\\n        internal\\r\\n    {\\r\\n        bettingState[fixtureID] = state;\\r\\n        emit BettingStateChanged(fixtureID, state);\\r\\n    }\\r\\n\\r\\n    /// @notice Closes fixture if it is 1. Not currently closed AND 2. eligible to be closed\\r\\n    /// @param fixtureID: the corresponding fixtureID for fixture to be closed\\r\\n    function closeBetForFixture(string memory fixtureID) public {\\r\\n        require(\\r\\n            bettingState[fixtureID] != BettingState.CLOSED,\\r\\n            \\\"Bet state is already CLOSED.\\\"\\r\\n        );\\r\\n        require(\\r\\n            fixtureShouldBecomeClosed(fixtureID),\\r\\n            \\\"Fixture ineligible to be closed.\\\"\\r\\n        );\\r\\n        setFixtureBettingState(fixtureID, BettingState.CLOSED);\\r\\n    }\\r\\n\\r\\n    /// @notice Makes oracle request to get fixture kickoff time and set fixture state to OPENING\\r\\n    /// @notice On fulfillment handle, ctx will open fixture is eligible\\r\\n    /// @param fixtureID: the corresponding fixtureID for fixture to be opened\\r\\n    function openBetForFixture(string memory fixtureID) public {\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.CLOSED || bettingState[fixtureID] == BettingState.OPENING,\\r\\n            \\\"State must be CLOSED or OPENING.\\\"\\r\\n        );\\r\\n        setFixtureBettingState(fixtureID, BettingState.OPENING);\\r\\n        requestFixtureKickoffTime(fixtureID);\\r\\n    }\\r\\n    \\r\\n    /// @notice Changes fixture betting state to AWAITING if eligible\\r\\n    /// @param fixtureID: the corresponding fixtureID for fixture to be set to AWAITING\\r\\n    function awaitBetForFixture(string memory fixtureID) public {\\r\\n        // Ideally the betting state will change from OPEN -> AWAITING\\r\\n        // by virtue of a bet being placed too close to KO time, however\\r\\n        // in the event this doesn't happen, this function can be called to\\r\\n        // attempt to change state to AWAITING\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.OPEN,\\r\\n            \\\"Bet state must be OPEN.\\\"\\r\\n        );\\r\\n        require(\\r\\n            fixtureShouldBecomeAwaiting(fixtureID),\\r\\n            \\\"Fixture ineligible for AWAITING.\\\"\\r\\n        );\\r\\n        setFixtureBettingState(fixtureID, BettingState.AWAITING);\\r\\n    }\\r\\n\\r\\n    function fixtureShouldBecomeAwaiting(string memory fixtureID) internal view returns(bool) {\\r\\n        uint256 ko = fixtureToKickoffTime[fixtureID];\\r\\n        // OPEN -> AWAITING\\r\\n        // If a bet is OPEN, it becomes AWAITING if\\r\\n        // current time is more than BET_CUTOFF_TIME to the right of kickoff time\\r\\n        return (\\r\\n            ko > BET_CUTOFF_TIME &&\\r\\n            bettingState[fixtureID] == BettingState.OPEN &&\\r\\n            block.timestamp > ko - BET_CUTOFF_TIME\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fixtureShouldBecomeOpen(string memory fixtureID) internal view returns(bool) {\\r\\n        uint256 ko = fixtureToKickoffTime[fixtureID];\\r\\n        // OPENING -> OPEN\\r\\n        // If a bet is OPENING, it can be OPENed if\\r\\n        // current time is more than BET_CUTOFF_TIME before kickoff time AND\\r\\n        // current time is less than BET_ADVANCE_TIME before kickoff time\\r\\n        return (\\r\\n            ko != 0 &&\\r\\n            ko >= BET_CUTOFF_TIME &&\\r\\n            ko >= BET_ADVANCE_TIME &&\\r\\n            (\\r\\n                bettingState[fixtureID] == BettingState.OPENING &&\\r\\n                block.timestamp <= ko - BET_CUTOFF_TIME &&\\r\\n                block.timestamp >= ko - BET_ADVANCE_TIME\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fixtureShouldBecomeClosed(string memory fixtureID) internal view returns(bool) {\\r\\n        uint256 ko = fixtureToKickoffTime[fixtureID];\\r\\n        return (\\r\\n            // OPENING -> CLOSED\\r\\n            // If fixture is OPENING, it will become CLOSED if\\r\\n            // current time is to the right of kickoff time - BET_CUTOFF_TIME\\r\\n            // OR\\r\\n            // current time is to the left of kickoff time - BET_ADVANCE_TIME\\r\\n            bettingState[fixtureID] == BettingState.OPENING &&\\r\\n            ko != 0 &&\\r\\n            ko >= BET_CUTOFF_TIME &&\\r\\n            ko >= BET_ADVANCE_TIME &&\\r\\n            (block.timestamp > ko - BET_CUTOFF_TIME ||\\r\\n                block.timestamp < ko - BET_ADVANCE_TIME)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Allows user to stake on fixture with ID fixtureID for outcome 'betType' with 'amount'\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture user is staking on\\r\\n    /// @param betType: The fixture outcome the msg sender is staking on\\r\\n    /// @param amount: The amount of collateral added to user's total stake on fixture outcome\\r\\n    function stake(\\r\\n        string memory fixtureID, \\r\\n        SportsBettingLib.FixtureResult betType, \\r\\n        uint256 amount) \\r\\n    public {\\r\\n        // Don't allow stakes if we should be in AWAITING state\\r\\n        if (fixtureShouldBecomeAwaiting(fixtureID)) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.AWAITING);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Impose requirements\\r\\n        require(\\r\\n            betType != SportsBettingLib.FixtureResult.DEFAULT && \\r\\n            betType != SportsBettingLib.FixtureResult.CANCELLED, \\r\\n            \\\"This BetType is not permitted.\\\");\\r\\n        require(bettingState[fixtureID] == BettingState.OPEN, \\\"Bet activity is not open.\\\");\\r\\n        require(amount >= ENTRANCE_FEE, \\\"Amount is below entrance fee.\\\");\\r\\n\\r\\n        bool flag;\\r\\n        uint256 newStakerAmount;\\r\\n        uint256 newTotalAmount;\\r\\n\\r\\n        // Handle possible overflow on staker amount\\r\\n        (flag, newStakerAmount) = SafeMath.tryAdd(amounts[fixtureID][betType][msg.sender], amount);\\r\\n        require(flag, \\\"User stake overflow.\\\");\\r\\n\\r\\n        // Handle possible overflow on total amounts\\r\\n        (flag, newTotalAmount) = SafeMath.tryAdd(totalAmounts[fixtureID][betType], amount);\\r\\n        require(flag, \\\"Total stake overflow.\\\");\\r\\n\\r\\n        // Update state\\r\\n        amounts[fixtureID][betType][msg.sender] = newStakerAmount;\\r\\n        totalAmounts[fixtureID][betType] = newTotalAmount;\\r\\n\\r\\n        // Transfer DAI tokens\\r\\n        emit BetStaked(msg.sender, fixtureID, amount, betType);\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n        require(\\r\\n            dai.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Unable to transfer.\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Allows user to unstake on fixture with ID fixtureID for outcome 'betType' with 'amount'\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture user is unstaking on\\r\\n    /// @param betType: The fixture outcome the msg sender is unstaking on\\r\\n    /// @param amount: The amount of collateral subtracted from user's total stake on fixture outcome\\r\\n    function unstake(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.FixtureResult betType,\\r\\n        uint256 amount\\r\\n    ) public {\\r\\n        // Don't allow stakes if we should be in AWAITING state\\r\\n        if (fixtureShouldBecomeAwaiting(fixtureID)) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.AWAITING);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Betting must be in OPEN state for this fixture\\r\\n        require(bettingState[fixtureID] == BettingState.OPEN, \\\"Bet activity is not open.\\\");\\r\\n\\r\\n        // Impose requirements on unstake value\\r\\n        require(amount > 0, \\\"Amount should exceed zero.\\\");\\r\\n\\r\\n        // Impose requirements on user's stake if this unstake occurs\\r\\n        uint256 amountStaked = amounts[fixtureID][betType][msg.sender];\\r\\n        require(amountStaked > 0, \\\"No stake on this address-result.\\\");\\r\\n        require(amount <= amountStaked, \\\"Current stake too low.\\\");\\r\\n\\r\\n        // New value for user stake on this fixture-betType combo\\r\\n        uint256 newStakerAmount = amountStaked - amount;\\r\\n\\r\\n        // If this is a partial unstake, ensure ENTRANCE_FEE is maintained\\r\\n        if (newStakerAmount > 0) {\\r\\n            require(newStakerAmount >= ENTRANCE_FEE, \\\"Cannot go below entrance fee.\\\");\\r\\n        }\\r\\n\\r\\n        // Update state\\r\\n        amounts[fixtureID][betType][msg.sender] = newStakerAmount;\\r\\n        totalAmounts[fixtureID][betType] -= amount;\\r\\n\\r\\n        // Transfer DAI to msg sender\\r\\n        emit BetUnstaked(msg.sender, fixtureID, amount, betType);\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n        require(dai.transfer(msg.sender, amount), \\\"Unable to transfer DAI.\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Calls consumer contract to request fixture kickoff time from oracle\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture user requests kickoff time for\\r\\n    function requestFixtureKickoffTime(string memory fixtureID) public {\\r\\n        bytes32 requestID = requestFixtureKickoffTimeParameter(fixtureID);\\r\\n        requestKickoffToFixture[requestID] = fixtureID;\\r\\n        emit RequestedFixtureKickoff(requestID, fixtureID);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureKickoffTime(bytes32 requestId, uint256 ko)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        string memory fixtureID = requestKickoffToFixture[requestId];\\r\\n        if (bytes(fixtureID).length == 0) {\\r\\n            revert(\\\"No fixture matches request ID.\\\");\\r\\n        }\\r\\n        emit RequestFixtureKickoffFulfilled(requestId, fixtureID, ko);\\r\\n\\r\\n        updateKickoffTime(fixtureID, ko);\\r\\n        if (fixtureShouldBecomeOpen(fixtureID)) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.OPEN);\\r\\n        } else if (fixtureShouldBecomeClosed(fixtureID)) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.CLOSED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateKickoffTime(string memory fixtureID, uint256 ko) internal {\\r\\n        if (ko != fixtureToKickoffTime[fixtureID]) {\\r\\n            fixtureToKickoffTime[fixtureID] = ko;\\r\\n            emit KickoffTimeUpdated(fixtureID, ko);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calls consumer contract to request fixture result from oracle\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture user requests result for\\r\\n    function requestFixtureResult(string memory fixtureID) public {\\r\\n        bytes32 requestID = requestFixtureResultParameter(fixtureID);\\r\\n        requestResultToFixture[requestID] = fixtureID;\\r\\n        emit RequestedFixtureResult(requestID, fixtureID);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureResult(bytes32 requestId, uint256 result)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        string memory fixtureID = requestResultToFixture[requestId];\\r\\n        // Can't proceed with empty fixture ID\\r\\n        if (bytes(fixtureID).length == 0) {\\r\\n            revert(\\\"Cannot find fixture ID\\\");\\r\\n        }\\r\\n\\r\\n        emit RequestFixtureResultFulfilled(requestId, fixtureID, result);\\r\\n\\r\\n        SportsBettingLib.FixtureResult parsedResult = SportsBettingLib.getFixtureResultFromAPIResponse(result);\\r\\n        if (parsedResult == SportsBettingLib.FixtureResult.DEFAULT) {\\r\\n            string memory errorString = string.concat(\\r\\n                \\\"Error on fixture \\\",\\r\\n                fixtureID,\\r\\n                \\\": Unknown fixture result from API\\\"\\r\\n            );\\r\\n            revert(errorString);\\r\\n        }\\r\\n\\r\\n        results[fixtureID] = parsedResult;\\r\\n\\r\\n        // Only action on fixture result if we are in AWAITING\\r\\n        if (bettingState[fixtureID] == BettingState.AWAITING) {\\r\\n            if (parsedResult == SportsBettingLib.FixtureResult.CANCELLED) {\\r\\n                setFixtureBettingState(fixtureID, BettingState.CANCELLED);\\r\\n            } else {\\r\\n                setFixtureBettingState(fixtureID, BettingState.PAYABLE);\\r\\n            } \\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers user winnings on fixture if applicable\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture user withdraws winnings for\\r\\n    function withdrawPayout(string memory fixtureID)\\r\\n        public\\r\\n    {\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.PAYABLE || bettingState[fixtureID] == BettingState.CANCELLED,\\r\\n            \\\"State not PAYABLE or CANCELLED.\\\"\\r\\n        );\\r\\n\\r\\n        // Require user has not received payout for this fixture\\r\\n        require(!userWasPaid[fixtureID][msg.sender], \\\"Already paid.\\\");\\r\\n\\r\\n        if (bettingState[fixtureID] == BettingState.PAYABLE) {\\r\\n            handleWithdrawPayout(fixtureID);\\r\\n        } else if (bettingState[fixtureID] == BettingState.CANCELLED) {\\r\\n            handleFixtureCancelledPayout(fixtureID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function handleWithdrawPayout(string memory fixtureID)\\r\\n        internal\\r\\n    {\\r\\n        SportsBettingLib.FixtureResult result = results[fixtureID];\\r\\n        if (result == SportsBettingLib.FixtureResult.DEFAULT || result == SportsBettingLib.FixtureResult.CANCELLED) {\\r\\n            revert(\\\"Invalid fixture result.\\\");\\r\\n        }\\r\\n\\r\\n        // Require user had staked on winning result\\r\\n        uint256 stakerAmount = amounts[fixtureID][result][msg.sender];\\r\\n        require(stakerAmount > 0, \\\"You did not stake on the winning outcome\\\");\\r\\n\\r\\n        SportsBettingLib.FixtureResult[] memory winningOutcomes = new SportsBettingLib.FixtureResult[](1);\\r\\n        winningOutcomes[0] = result;\\r\\n        SportsBettingLib.FixtureResult[] memory losingOutcomes = SportsBettingLib.getLosingFixtureOutcomes(result);\\r\\n        // Get total amounts bet on each fixture result\\r\\n        uint256 winningAmount = getTotalAmountBetOnFixtureOutcomes(fixtureID, winningOutcomes);\\r\\n        uint256 losingAmount = getTotalAmountBetOnFixtureOutcomes(fixtureID, losingOutcomes);\\r\\n        (bool flag, uint256 totalAmount) = SafeMath.tryAdd(winningAmount, losingAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Overflow on total amount bet\\\");\\r\\n        }\\r\\n\\r\\n        // Calculate staker's share of winnings\\r\\n        uint256 obligation = SportsBettingLib.calculateStakerObligation(stakerAmount, winningAmount, totalAmount);\\r\\n        // Deduct owner commission\\r\\n        // Commission of COMMISSION_RATE % is taken from staker profits\\r\\n        uint256 commission = SportsBettingLib.calculateCommission(obligation, stakerAmount, COMMISSION_RATE);\\r\\n        obligation -= commission;\\r\\n\\r\\n        // Set bet payout states\\r\\n        payouts[fixtureID][msg.sender] = obligation;\\r\\n        userWasPaid[fixtureID][msg.sender] = true;\\r\\n\\r\\n        // Pay staker\\r\\n        emit BetPayout(msg.sender, fixtureID, obligation);\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n        require(\\r\\n            dai.transfer(msg.sender, obligation),\\r\\n            \\\"Unable to payout staker\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function handleFixtureCancelledPayout(string memory fixtureID)\\r\\n        internal\\r\\n    {\\r\\n        require(bettingState[fixtureID] == BettingState.CANCELLED, \\\"Fixture not cancelled\\\");\\r\\n        uint256 obligation = 0;\\r\\n        for (uint256 i = 0; i < betTypes.length; i++) {\\r\\n            obligation += amounts[fixtureID][betTypes[i]][msg.sender];\\r\\n        }\\r\\n        require(obligation > 0, \\\"No stakes found on this fixture\\\");\\r\\n\\r\\n        // Set bet payout states\\r\\n        payouts[fixtureID][msg.sender] = obligation;\\r\\n        userWasPaid[fixtureID][msg.sender] = true;\\r\\n\\r\\n        // Pay staker\\r\\n        emit BetPayout(msg.sender, fixtureID, obligation);\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n        require(\\r\\n            dai.transfer(msg.sender, obligation),\\r\\n            \\\"Unable to payout staker\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers owner commission on fixture if applicable\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture owner withdraws commission for\\r\\n    function handleCommissionPayout(string memory fixtureID) public {\\r\\n        require(bettingState[fixtureID] == BettingState.PAYABLE, \\\"Fixture not payable\\\");\\r\\n        require(!commissionPaid[fixtureID], \\\"Commission already paid.\\\");\\r\\n\\r\\n        SportsBettingLib.FixtureResult result = results[fixtureID];\\r\\n        if (result == SportsBettingLib.FixtureResult.DEFAULT || result == SportsBettingLib.FixtureResult.CANCELLED) {\\r\\n            revert(\\\"Invalid fixture result.\\\");\\r\\n        }\\r\\n\\r\\n        // Commission of COMMISSION RATE % is taken from total staker profits\\r\\n        SportsBettingLib.FixtureResult[] memory winningOutcomes = new SportsBettingLib.FixtureResult[](1);\\r\\n        winningOutcomes[0] = result;\\r\\n        uint256 winningAmount = getTotalAmountBetOnFixtureOutcomes(fixtureID, winningOutcomes);\\r\\n\\r\\n        SportsBettingLib.FixtureResult[] memory losingOutcomes = SportsBettingLib.getLosingFixtureOutcomes(result);\\r\\n        uint256 losingAmount = getTotalAmountBetOnFixtureOutcomes(fixtureID, losingOutcomes);\\r\\n        \\r\\n        uint256 totalAmount = winningAmount + losingAmount;\\r\\n\\r\\n        // Calculate commission\\r\\n        uint256 commission = SportsBettingLib.calculateCommission(totalAmount, winningAmount, COMMISSION_RATE);\\r\\n\\r\\n        // Set commissionPaid to prevent re-entrancy\\r\\n        commissionMap[fixtureID] = commission;\\r\\n        commissionPaid[fixtureID] = true;\\r\\n\\r\\n        emit BetCommissionPayout(fixtureID, commissionMap[fixtureID]);\\r\\n        if (commissionMap[fixtureID] > 0) {\\r\\n            IERC20 dai = IERC20(daiAddress);\\r\\n            require(\\r\\n                dai.transfer(owner, commissionMap[fixtureID]),\\r\\n                \\\"Unable to payout owner\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalAmountBetOnFixtureOutcomes(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.FixtureResult[] memory outcomes\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\r\\n            amount += totalAmounts[fixtureID][outcomes[i]];\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets total and user stakes on all outcomes for fixture\\r\\n    /// @param fixtureID: Corresponding fixtureID for fixture outcomes\\r\\n    /// @param user: Address of user corresponding to user fixture stakes\\r\\n    /// @return FixtureEnrichment struct containing fixture state, user stakes and total stakes\\r\\n    function getEnrichedFixtureData(string memory fixtureID, address user)\\r\\n        public\\r\\n        view\\r\\n        returns (FixtureEnrichment memory)\\r\\n    {\\r\\n        return\\r\\n            FixtureEnrichment({\\r\\n                fixtureState: bettingState[fixtureID],\\r\\n                user: getStakeSummaryForUser(fixtureID, user),\\r\\n                total: [\\r\\n                    totalAmounts[fixtureID][SportsBettingLib.FixtureResult.HOME],\\r\\n                    totalAmounts[fixtureID][SportsBettingLib.FixtureResult.DRAW],\\r\\n                    totalAmounts[fixtureID][SportsBettingLib.FixtureResult.AWAY]\\r\\n                ]\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function getStakeSummaryForUser(string memory fixtureID, address user)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[3] memory)\\r\\n    {\\r\\n        return [\\r\\n            amounts[fixtureID][SportsBettingLib.FixtureResult.HOME][user],\\r\\n            amounts[fixtureID][SportsBettingLib.FixtureResult.DRAW][user],\\r\\n            amounts[fixtureID][SportsBettingLib.FixtureResult.AWAY][user]\\r\\n        ];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73129922c8da9d9a46ec9561688d8b00a49c20a3aa6c07a42d4488eeec62e1cd\",\"license\":\"Unlicense\"},\"contracts/SportsBettingLib.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary SportsBettingLib {\\r\\n    // Define DEFAULT FixtureResult = 0. \\r\\n    // DEFAULT FixtureResult is actually invalid and acts a placeholder to catch erroneous\\r\\n    // FixtureResult entries, as Solidity interprets null values as 0.\\r\\n    // CANCELLED FixtureResult allows us to handle cases where sports fixtures are cancelled\\r\\n    // and we should allow all stakers to withdraw their stakes\\r\\n    enum FixtureResult {\\r\\n        DEFAULT,\\r\\n        CANCELLED,\\r\\n        HOME,\\r\\n        DRAW,\\r\\n        AWAY\\r\\n    }\\r\\n\\r\\n    function getFixtureResultFromAPIResponse(\\r\\n        uint256 result\\r\\n    ) external pure returns (FixtureResult) {\\r\\n        if (result == uint256(FixtureResult.HOME)) {\\r\\n            return FixtureResult.HOME;\\r\\n        } else if (result == uint256(FixtureResult.DRAW)) {\\r\\n            return FixtureResult.DRAW;\\r\\n        } else if (result == uint256(FixtureResult.AWAY)) {\\r\\n            return FixtureResult.AWAY;\\r\\n        } else if (result == uint256(FixtureResult.CANCELLED)) {\\r\\n            return FixtureResult.CANCELLED;\\r\\n        }\\r\\n        return FixtureResult.DEFAULT;\\r\\n    }\\r\\n\\r\\n    function getLosingFixtureOutcomes(FixtureResult winningOutcome)\\r\\n        external\\r\\n        pure\\r\\n        returns (FixtureResult[] memory)\\r\\n    {\\r\\n        FixtureResult[] memory losingOutcomes = new FixtureResult[](2);\\r\\n\\r\\n        uint256 losingOutcomesIndex = 0;\\r\\n        for (uint256 i = uint256(FixtureResult.HOME); i <= uint256(FixtureResult.AWAY); i++) {\\r\\n            if (FixtureResult(i) != winningOutcome) {\\r\\n                losingOutcomes[losingOutcomesIndex] = FixtureResult(i);\\r\\n                losingOutcomesIndex += 1;\\r\\n            }\\r\\n        }\\r\\n        return losingOutcomes;\\r\\n    }\\r\\n\\r\\n    function calculateStakerObligation(\\r\\n        uint256 stakerAmount,\\r\\n        uint256 winningAmount,\\r\\n        uint256 totalAmount\\r\\n    ) public pure returns(uint256) {\\r\\n        bool flag;\\r\\n        uint256 stakerShare;\\r\\n        uint256 obligation;\\r\\n        (flag, stakerShare) = SafeMath.tryMul(totalAmount, stakerAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Overflow calculating obligation\\\");\\r\\n        }\\r\\n        (flag, obligation) = SafeMath.tryDiv(stakerShare, winningAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Division by zero\\\");\\r\\n        }\\r\\n        \\r\\n        return obligation;\\r\\n    }\\r\\n\\r\\n    function calculateCommission(\\r\\n        uint256 stakerObligation,\\r\\n        uint256 stakerAmount,\\r\\n        uint256 commissionRate\\r\\n    ) public pure returns(uint256) {\\r\\n        bool flag;\\r\\n        uint256 profit;\\r\\n        uint256 commission;\\r\\n        (flag, profit) = SafeMath.trySub(stakerObligation, stakerAmount);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Underflow calculating profit\\\");\\r\\n        }\\r\\n        (flag, commission) = SafeMath.tryMul(commissionRate, profit);\\r\\n        if (!flag) {\\r\\n            revert(\\\"Overflow calculating commission\\\");\\r\\n        }\\r\\n        // Divide by 100 as COMMISSION_RATE is in percentage terms\\r\\n        return commission / 100;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc4b3cb91f383911078b89c243dc5cdc353d4385c9e9e7b69b1cc0d4ddd25c906\",\"license\":\"Unlicense\"},\"contracts/SportsOracleConsumer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\n//import \\\"./mock/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\r\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\\r\\n */\\r\\n\\r\\nabstract contract SportsOracleConsumer is ChainlinkClient {\\r\\n    using Chainlink for Chainlink.Request;\\r\\n\\r\\n    address public immutable chainlink;\\r\\n    string public sportsOracleURI;\\r\\n\\r\\n    bytes32 private jobId;\\r\\n    uint256 private fee;\\r\\n\\r\\n    mapping(address => uint256) public userToLink;\\r\\n\\r\\n    event RequestedFixtureKickoff(bytes32 indexed requestId, string fixtureID);\\r\\n\\r\\n    event RequestedFixtureResult(bytes32 indexed requestId, string fixtureID);\\r\\n\\r\\n    event RequestFixtureKickoffFulfilled(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID,\\r\\n        uint256 kickoff\\r\\n    );\\r\\n\\r\\n    event RequestFixtureResultFulfilled(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID,\\r\\n        uint256 result\\r\\n    );\\r\\n\\r\\n    event RequestFixtureResultError(\\r\\n        bytes32 indexed requestId,\\r\\n        string error\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        string memory _sportsOracleURI,\\r\\n        address _oracle,\\r\\n        address _link,\\r\\n        string memory _jobId,\\r\\n        uint256 _fee\\r\\n    ) {\\r\\n        sportsOracleURI = _sportsOracleURI;\\r\\n        setChainlinkToken(_link);\\r\\n        setChainlinkOracle(_oracle);\\r\\n        chainlink = _oracle;\\r\\n        jobId = stringToBytes32(_jobId);\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    modifier hasLinkFee() {\\r\\n        require(userToLink[msg.sender] >= fee, \\\"You haven't sent enough LINK.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source)\\r\\n        private\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // solhint-disable-line no-inline-assembly\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request fixture kickoff time from the oracle in a single transaction\\r\\n     */\\r\\n    function requestFixtureKickoffTimeParameter(string memory fixtureID)\\r\\n        public\\r\\n        hasLinkFee\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // User spends LINK value = fee on this request\\r\\n        userToLink[msg.sender] -= fee;\\r\\n\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.rawFulfillFixtureKickoffTime.selector\\r\\n        );\\r\\n        req.add(\\\"get\\\", string.concat(sportsOracleURI, fixtureID));\\r\\n        req.add(\\\"path\\\", \\\"0,ko\\\");\\r\\n        req.addInt(\\\"times\\\", 1);\\r\\n        return sendChainlinkRequest(req, fee); // MWR API.\\r\\n    }\\r\\n\\r\\n    function rawFulfillFixtureKickoffTime(bytes32 requestId, uint256 ko)\\r\\n        public\\r\\n        recordChainlinkFulfillment(requestId)\\r\\n    {\\r\\n        require(msg.sender == chainlink, \\\"Only ChainlinkClient can fulfill\\\");\\r\\n        fulfillFixtureKickoffTime(requestId, ko);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureKickoffTime(bytes32 requestId, uint256 ko)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Request fixture result from the oracle in a single transaction\\r\\n     */\\r\\n    function requestFixtureResultParameter(string memory fixtureID)\\r\\n        public\\r\\n        hasLinkFee\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // User spends LINK value = fee on this request\\r\\n        userToLink[msg.sender] -= fee;\\r\\n\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.rawFulfillFixtureResult.selector\\r\\n        );\\r\\n        req.add(\\\"get\\\", string.concat(sportsOracleURI, fixtureID));\\r\\n        req.add(\\\"path\\\", \\\"0,result\\\");\\r\\n        req.addInt(\\\"times\\\", 1);\\r\\n        return sendChainlinkRequest(req, fee); // MWR API.\\r\\n    }\\r\\n\\r\\n    function rawFulfillFixtureResult(bytes32 requestId, uint256 result)\\r\\n        public\\r\\n        recordChainlinkFulfillment(requestId)\\r\\n    {\\r\\n        require(msg.sender == chainlink, \\\"Only ChainlinkClient can fulfill\\\");\\r\\n        fulfillFixtureResult(requestId, result);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureResult(bytes32 requestId, uint256 result)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    // Anybody can transfer LINK to ctx\\r\\n    function transferLink(uint256 amount) public {\\r\\n        IERC20 link = IERC20(chainlinkTokenAddress());\\r\\n        require(\\r\\n            link.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n\\r\\n        userToLink[msg.sender] += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allow withdraw of Link tokens from the contract\\r\\n     */\\r\\n    function withdrawLink(uint256 amount) public {\\r\\n        require(amount <= userToLink[msg.sender], \\\"You don't have enough link\\\");\\r\\n        userToLink[msg.sender] -= amount;\\r\\n\\r\\n        IERC20 link = IERC20(chainlinkTokenAddress());\\r\\n        require(link.transfer(msg.sender, amount), \\\"Unable to transfer\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd846384b9693606e118912b4075f045a2e33ae274f727764aea4f4c8687caae3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102765760003560e01c8063870c58a611610160578063c1e9aa45116100d8578063edb160701161008c578063f46dccf011610071578063f46dccf014610677578063f6573b4f1461068a578063fbe91393146106b557600080fd5b8063edb1607014610639578063ef40efde1461066457600080fd5b8063d8654c08116100bd578063d8654c0814610609578063e1f4324a1461061c578063e37685ec1461062657600080fd5b8063c1e9aa45146105e8578063c40bc66b146105f657600080fd5b80639959a30f1161012f578063aa06609011610114578063aa06609014610572578063abf949f8146105b3578063b148cdf1146105d357600080fd5b80639959a30f146105385780639c3feeb71461054b57600080fd5b8063870c58a6146104bd5780638a71bfa8146104eb5780638da5cb5b146104fe5780638e4821c51461052557600080fd5b80635e1349a6116101f3578063793970e1116101c25780637a8042bd116101a75780637a8042bd1461045c5780637c5e94051461046f5780637cc2c2f8146104aa57600080fd5b8063793970e11461040e57806379664e651461042157600080fd5b80635e1349a6146103915780635e5243191461039a57806362098ff7146103ad57806375a30228146103c057600080fd5b80631d686ae41161024a5780632c3872751161022f5780632c387275146102f757806339ea0791146103365780634b13d17d1461035657600080fd5b80631d686ae4146102d15780632079624e146102e457600080fd5b8062e1a75b1461027b57806301ec29c9146102905780631857edf2146102a35780631a454ea6146102b6575b600080fd5b61028e61028936600461406a565b6106f0565b005b61028e61029e36600461406a565b6107cd565b61028e6102b136600461406a565b6108b0565b6102be600181565b6040519081526020015b60405180910390f35b6102be6102df36600461406a565b610dfe565b61028e6102f236600461406a565b610fc2565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c8565b6102be6103443660046140b6565b60096020526000908152604090205481565b61038461036436600461406a565b805160208183018101805160138252928201919093012091525460ff1681565b6040516102c891906140fb565b6102be61151881565b61028e6103a8366004614116565b611189565b6103846103bb366004614170565b6115eb565b6103fe6103ce366004614189565b8151602081840181018051600f825292820194820194909420919093529091526000908152604090205460ff1681565b60405190151581526020016102c8565b61028e61041c36600461406a565b611615565b6102be61042f3660046141d7565b8151602081840181018051600d825292820194820194909420919093529091526000908152604090205481565b61028e61046a366004614170565b611681565b6102be61047d366004614189565b8151602081840181018051600e825292820194820194909420919093529091526000908152604090205481565b61028e6104b8366004614170565b6117d7565b6103fe6104cb36600461406a565b805160208183018101805160158252928201919093012091525460ff1681565b61028e6104f9366004614229565b6118d9565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b61028e610533366004614116565b611a24565b61028e61054636600461406a565b611f07565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b6102be61058036600461424b565b8251602081850181018051600c825292820195820195909520919094528352600091825260408083209093528152205481565b6105c66105c1366004614189565b611f67565b6040516102c891906142de565b6105db612075565b6040516102c89190614375565b6102be66038d7ea4c6800081565b6105db610604366004614170565b612103565b6102be61061736600461406a565b61211c565b6102be62093a8081565b61028e610634366004614229565b612272565b6102be61064736600461406a565b805160208183018101805160118252928201919093012091525481565b61028e61067236600461406a565b6123bd565b6105db610685366004614170565b6124a1565b6102be61069836600461406a565b805160208183018101805160148252928201919093012091525481565b6106e36106c336600461406a565b8051602081830181018051600b8252928201919093012091525460ff1681565b6040516102c89190614388565b6000600b8260405161070291906143b2565b9081526040519081900360200190205460ff166005811115610726576107266140d1565b148061076557506001600b8260405161073f91906143b2565b9081526040519081900360200190205460ff166005811115610763576107636140d1565b145b6107b65760405162461bcd60e51b815260206004820181905260248201527f5374617465206d75737420626520434c4f534544206f72204f50454e494e472e60448201526064015b60405180910390fd5b6107c18160016124ba565b6107ca81611f07565b50565b6002600b826040516107df91906143b2565b9081526040519081900360200190205460ff166005811115610803576108036140d1565b146108505760405162461bcd60e51b815260206004820152601760248201527f426574207374617465206d757374206265204f50454e2e00000000000000000060448201526064016107ad565b61085981612536565b6108a55760405162461bcd60e51b815260206004820181905260248201527f4669787475726520696e656c696769626c6520666f72204157414954494e472e60448201526064016107ad565b6107ca8160036124ba565b6004600b826040516108c291906143b2565b9081526040519081900360200190205460ff1660058111156108e6576108e66140d1565b146109335760405162461bcd60e51b815260206004820152601360248201527f46697874757265206e6f742070617961626c650000000000000000000000000060448201526064016107ad565b60158160405161094391906143b2565b9081526040519081900360200190205460ff16156109a35760405162461bcd60e51b815260206004820152601860248201527f436f6d6d697373696f6e20616c726561647920706169642e000000000000000060448201526064016107ad565b60006013826040516109b591906143b2565b9081526040519081900360200190205460ff16905060008160048111156109de576109de6140d1565b14806109fb575060018160048111156109f9576109f96140d1565b145b15610a485760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206669787475726520726573756c742e00000000000000000060448201526064016107ad565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110610a7e57610a7e6143ce565b60200260200101906004811115610a9757610a976140d1565b90816004811115610aaa57610aaa6140d1565b9052506000610ab984836125ba565b9050600073__$4f22de673e7000c1f1d3934c762f2412ba$__63373bdcc8856040518263ffffffff1660e01b8152600401610af491906140fb565b600060405180830381865af4158015610b11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3991908101906143e4565b90506000610b4786836125ba565b90506000610b5582856144ac565b60405163387844ab60e11b815260048101829052602481018690526001604482015290915060009073__$4f22de673e7000c1f1d3934c762f2412ba$$4f22de673e7000c1f1d3934c762f2412ba$__9063373bdcc8906129799087906004016140fb565b600060405180830381865af4158015612996573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129be91908101906143e4565b905060006129cc86846125ba565b905060006129da87846125ba565b90506000806129e984846132d7565b9150915081612a3a5760405162461bcd60e51b815260206004820152601c60248201527f4f766572666c6f77206f6e20746f74616c20616d6f756e74206265740000000060448201526064016107ad565b6040517f29a2ea4500000000000000000000000000000000000000000000000000000000815260048101889052602481018590526044810182905260009073__$4f22de673e7000c1f1d3934c762f2412ba$__906329a2ea4590606401602060405180830381865af4158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad891906144c4565b60405163387844ab60e11b815260048101829052602481018a90526001604482015290915060009073__$4f22de673e7000c1f1d3934c762f2412ba$__906370f0895690606401602060405180830381865af4158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6091906144c4565b9050612b6c81836144ff565b915081600e8c604051612b7f91906143b2565b90815260408051918290036020908101832033600090815291522091909155600190600f90612baf908e906143b2565b90815260408051602092819003830181203360008181529190945291909120805460ff191693151593909317909255907fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd90612c0e908e90869061464e565b60405180910390a260405163a9059cbb60e01b8152336004820152602481018390527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015612c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca991906144dd565b612cf55760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f207061796f7574207374616b657200000000000000000060448201526064016107ad565b505050505050505050505050565b6005600b82604051612d1591906143b2565b9081526040519081900360200190205460ff166005811115612d3957612d396140d1565b14612d865760405162461bcd60e51b815260206004820152601560248201527f46697874757265206e6f742063616e63656c6c6564000000000000000000000060448201526064016107ad565b6000805b6005811015612e3a57600c83604051612da391906143b2565b90815260200160405180910390206000600a8360058110612dc657612dc66143ce565b602081049091015460ff601f9092166101000a9004166004811115612ded57612ded6140d1565b6004811115612dfe57612dfe6140d1565b815260208082019290925260409081016000908120338252909252902054612e2690836144ac565b915080612e3281614633565b915050612d8a565b5060008111612e8b5760405162461bcd60e51b815260206004820152601f60248201527f4e6f207374616b657320666f756e64206f6e207468697320666978747572650060448201526064016107ad565b80600e83604051612e9c91906143b2565b90815260408051918290036020908101832033600090815291522091909155600190600f90612ecc9085906143b2565b90815260408051602092819003830181203360008181529190945291909120805460ff191693151593909317909255907fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd90612f2b908590859061464e565b60405180910390a260405163a9059cbb60e01b8152336004820152602481018290527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015612fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc691906144dd565b6111a25760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f207061796f7574207374616b657200000000000000000060448201526064016107ad565b6000828152601260205260408120805461302b90614516565b80601f016020809104026020016040519081016040528092919081815260200182805461305790614516565b80156130a45780601f10613079576101008083540402835291602001916130a4565b820191906000526020600020905b81548152906001019060200180831161308757829003601f168201915b505050505090508051600014156130fd5760405162461bcd60e51b815260206004820152601660248201527f43616e6e6f742066696e6420666978747572652049440000000000000000000060448201526064016107ad565b827f991c3e65c24cac8eb9898540ce857bbd06f702f19ac9ee6562bd97b96b0d898c828460405161312f92919061464e565b60405180910390a26040517f3af625ae0000000000000000000000000000000000000000000000000000000081526004810183905260009073__$4f22de673e7000c1f1d3934c762f2412ba$__90633af625ae90602401602060405180830381865af41580156131a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c79190614670565b905060008160048111156131dd576131dd6140d1565b1415613221576000826040516020016131f6919061468d565b60405160208183030381529060405290508060405162461bcd60e51b81526004016107ad9190614375565b8060138360405161323291906143b2565b908152604051908190036020019020805460ff1916600183600481111561325b5761325b6140d1565b02179055506003600b8360405161327291906143b2565b9081526040519081900360200190205460ff166005811115613296576132966140d1565b14156132d15760018160048111156132b0576132b06140d1565b14156132c6576132c18260056124ba565b6132d1565b6132d18260046124ba565b50505050565b600080838301848110156132f25760008092509250506132f9565b6001925090505b9250929050565b613308613f80565b6040518060600160405280600c8560405161332391906143b2565b9081526040805160209281900383019020600260009081529083528181206001600160a01b0388168252835281902054835251910190600c906133679087906143b2565b9081526040805160209281900383019020600360009081529083528181206001600160a01b0388168252835281902054835251910190600c906133ab9087906143b2565b9081526040805160209281900383019020600460009081529083528181206001600160a01b03979097168152959091529093205490925250919050565b6000828152601060205260408120805461340190614516565b80601f016020809104026020016040519081016040528092919081815260200182805461342d90614516565b801561347a5780601f1061344f5761010080835404028352916020019161347a565b820191906000526020600020905b81548152906001019060200180831161345d57829003601f168201915b505050505090508051600014156134d35760405162461bcd60e51b815260206004820152601e60248201527f4e6f2066697874757265206d61746368657320726571756573742049442e000060448201526064016107ad565b827f0a19aa077773e15e05c85beefc64244b7b27068fccb13becb7bf450ff41fa89c828460405161350592919061464e565b60405180910390a261351781836137b2565b6135208161382b565b15613530576111a28160026124ba565b61353981613549565b156111a2576111a28160006124ba565b60008060118360405161355c91906143b2565b9081526040519081900360200190205490506001600b8460405161358091906143b2565b9081526040519081900360200190205460ff1660058111156135a4576135a46140d1565b1480156135b057508015155b80156135be57506115188110155b80156135cd575062093a808110155b8015610fb957506135e0611518826144ff565b421180610fb957506135f562093a80826144ff565b42109392505050565b61363c6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61364c85608001516101006138e4565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b6136878260038351613949565b6111a28282613a58565b67ffffffffffffffff198112156136ac576117d38282613a7f565b67ffffffffffffffff8113156136c6576117d38282613ac1565b600081126136da576117d382600083613949565b6117d38260016136ec8460001961471f565b613949565b6004546000906137028160016144ac565b600455835160408086015160808701515191516000937f4042994600000000000000000000000000000000000000000000000000000000936137539386938493923092918a91600191602401614793565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915290506137a886838684613ae4565b9695505050505050565b6011826040516137c291906143b2565b90815260200160405180910390205481146117d357806011836040516137e891906143b2565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a3828260405161252a92919061464e565b60008060118360405161383e91906143b2565b90815260200160405180910390205490508060001415801561386257506115188110155b8015613871575062093a808110155b8015610fb957506001600b8460405161388a91906143b2565b9081526040519081900360200190205460ff1660058111156138ae576138ae6140d1565b1480156138c657506138c2611518826144ff565b4211155b8015610fb957506138da62093a80826144ff565b4210159392505050565b6040805180820190915260608152600060208201526139046020836147f7565b1561392c576139146020836147f7565b61391f9060206144ff565b61392990836144ac565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff161161396e576132d18360e0600585901b168317613c82565b60ff8167ffffffffffffffff16116139ac57613995836018611fe0600586901b1617613c82565b506132d18367ffffffffffffffff83166001613ca7565b61ffff8167ffffffffffffffff16116139eb576139d4836019611fe0600586901b1617613c82565b506132d18367ffffffffffffffff83166002613ca7565b63ffffffff8167ffffffffffffffff1611613a2c57613a1583601a611fe0600586901b1617613c82565b506132d18367ffffffffffffffff83166004613ca7565b613a4183601b611fe0600586901b1617613c82565b506132d18367ffffffffffffffff83166008613ca7565b6040805180820190915260608152600060208201526126e783846000015151848551613ccd565b613a8a8260c3613c82565b506117d382613a9b8360001961471f565b604051602001613aad91815260200190565b604051602081830303815290604052613db7565b613acc8260c2613c82565b506117d38282604051602001613aad91815260200190565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f19018152828252805160209182012060008181526005909252918120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26002546040517f4000aea00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634000aea090613bcd90889087908790600401614819565b6020604051808303816000875af1158015613bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1091906144dd565b6136725760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c65000000000000000000000000000000000000000000000000000000000060648201526084016107ad565b6040805180820190915260608152600060208201526126e78384600001515184613dc4565b604080518082019091526060815260006020820152613672848560000151518585613e20565b6040805180820190915260608152600060208201528251821115613cf057600080fd5b6020850151613cff83866144ac565b1115613d3257613d3285613d2287602001518786613d1d91906144ac565b613ea1565b613d2d90600261484a565b613eb8565b600080865180518760208301019350808887011115613d515787860182525b505050602084015b60208410613d915780518252613d706020836144ac565b9150613d7d6020826144ac565b9050613d8a6020856144ff565b9350613d59565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6136878260028351613949565b60408051808201909152606081526000602082015283602001518310613df957613df98485602001516002613d2d919061484a565b835180516020858301018481535080851415613e16576001810182525b5093949350505050565b6040805180820190915260608152600060208201526020850151613e4485846144ac565b1115613e5857613e5885613d2286856144ac565b60006001613e688461010061494d565b613e7291906144ff565b9050855183868201018583198251161781525080518487011115613e965783860181525b509495945050505050565b600081831115613eb257508161206f565b50919050565b8151613ec483836138e4565b506132d18382613a58565b828054613edb90614516565b90600052602060002090601f016020900481019282613efd5760008555613f43565b82601f10613f1657805160ff1916838001178555613f43565b82800160010185558215613f43579182015b82811115613f43578251825591602001919060010190613f28565b50613f4f929150613f9e565b5090565b60408051606081019091528060008152602001613f6e613f80565b8152602001613f7b613f80565b905290565b60405180606001604052806003906020820280368337509192915050565b5b80821115613f4f5760008155600101613f9f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613ff257613ff2613fb3565b604052919050565b600082601f83011261400b57600080fd5b813567ffffffffffffffff81111561402557614025613fb3565b614038601f8201601f1916602001613fc9565b81815284602083860101111561404d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561407c57600080fd5b813567ffffffffffffffff81111561409357600080fd5b61367284828501613ffa565b80356001600160a01b0381168114610fbd57600080fd5b6000602082840312156140c857600080fd5b6126e78261409f565b634e487b7160e01b600052602160045260246000fd5b600581106140f7576140f76140d1565b9052565b6020810161206f82846140e7565b600581106107ca57600080fd5b60008060006060848603121561412b57600080fd5b833567ffffffffffffffff81111561414257600080fd5b61414e86828701613ffa565b935050602084013561415f81614109565b929592945050506040919091013590565b60006020828403121561418257600080fd5b5035919050565b6000806040838503121561419c57600080fd5b823567ffffffffffffffff8111156141b357600080fd5b6141bf85828601613ffa565b9250506141ce6020840161409f565b90509250929050565b600080604083850312156141ea57600080fd5b823567ffffffffffffffff81111561420157600080fd5b61420d85828601613ffa565b925050602083013561421e81614109565b809150509250929050565b6000806040838503121561423c57600080fd5b50508035926020909101359150565b60008060006060848603121561426057600080fd5b833567ffffffffffffffff81111561427757600080fd5b61428386828701613ffa565b935050602084013561429481614109565b91506142a26040850161409f565b90509250925092565b600681106140f7576140f76140d1565b8060005b60038110156132d15781518452602093840193909101906001016142bf565b600060e0820190506142f18284516142ab565b602083015161430360208401826142bb565b50604083015161431660808401826142bb565b5092915050565b60005b83811015614338578181015183820152602001614320565b838111156132d15750506000910152565b6000815180845261436181602086016020860161431d565b601f01601f19169290920160200192915050565b6020815260006126e76020830184614349565b6020810161206f82846142ab565b600081516143a881856020860161431d565b9290920192915050565b600082516143c481846020870161431d565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600060208083850312156143f757600080fd5b825167ffffffffffffffff8082111561440f57600080fd5b818501915085601f83011261442357600080fd5b81518181111561443557614435613fb3565b8060051b9150614446848301613fc9565b818152918301840191848101908884111561446057600080fd5b938501935b8385101561448a578451925061447a83614109565b8282529385019390850190614465565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156144bf576144bf614496565b500190565b6000602082840312156144d657600080fd5b5051919050565b6000602082840312156144ef57600080fd5b815180151581146126e757600080fd5b60008282101561451157614511614496565b500390565b600181811c9082168061452a57607f821691505b60208210811415613eb257634e487b7160e01b600052602260045260246000fd5b600080845481600182811c91508083168061456757607f831692505b602080841082141561458757634e487b7160e01b86526022600452602486fd5b81801561459b57600181146145ac576145d9565b60ff198616895284890196506145d9565b60008b81526020902060005b868110156145d15781548b8201529085019083016145b8565b505084890196505b5050505050506126e38185614396565b6060815260006145fc6060830186614349565b905083602083015261367260408301846140e7565b6040815260006146246040830185614349565b90506126e760208301846142ab565b600060001982141561464757614647614496565b5060010190565b6040815260006146616040830185614349565b90508260208301529392505050565b60006020828403121561468257600080fd5b81516126e781614109565b7f4572726f72206f6e2066697874757265200000000000000000000000000000008152600082516146c581601185016020870161431d565b7f3a20556e6b6e6f776e206669787475726520726573756c742066726f6d20415060119390910192830152507f49000000000000000000000000000000000000000000000000000000000000006031820152603201919050565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561475957614759614496565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561478d5761478d614496565b50500390565b60006101006001600160a01b03808c1684528a60208501528960408501528089166060850152506001600160e01b0319871660808401528560a08401528460c08401528060e08401526147e881840185614349565b9b9a5050505050505050505050565b60008261481457634e487b7160e01b600052601260045260246000fd5b500690565b6001600160a01b03841681528260208201526060604082015260006148416060830184614349565b95945050505050565b600081600019048311821515161561486457614864614496565b500290565b600181815b808511156148a457816000190482111561488a5761488a614496565b8085161561489757918102915b93841c939080029061486e565b509250929050565b6000826148bb5750600161206f565b816148c85750600061206f565b81600181146148de57600281146148e857614904565b600191505061206f565b60ff8411156148f9576148f9614496565b50506001821b61206f565b5060208310610133831016604e8410600b8410161715614927575081810a61206f565b6149318383614869565b806000190482111561494557614945614496565b029392505050565b60006126e783836148ac56fea26469706673582212208638b9530cc50926b3bf667d9c9cf226ece80d078be555ff37dce1b85094436564736f6c634300080c0033",
  "libraries": {
    "SportsBettingLib": "0xeac7428A8FBE8339B76505bBA4968e4B9Dc6A43B"
  },
  "devdoc": {
    "author": "Nathan Cinnamond",
    "events": {
      "BetCommissionPayout(string,uint256)": {
        "params": {
          "amount": ": amount paid out to owner in commission"
        }
      },
      "BetPayout(address,string,uint256)": {
        "params": {
          "amount": ": amount paid out to better (original stake plus profit)",
          "better": ": address of the unstaker",
          "fixtureID": ": corresponding fixtureID for fixture on outcome which better claims payout"
        }
      },
      "BetStaked(address,string,uint256,uint8)": {
        "params": {
          "amount": ": amount added to total amount staked by better on fixture outcome",
          "betType": ": outcome of fixtureID that better has staked on",
          "better": ": address of the staker",
          "fixtureID": ": corresponding fixtureID for fixture on which outcome is staked"
        }
      },
      "BetUnstaked(address,string,uint256,uint8)": {
        "params": {
          "amount": ": amount subtracted from total amount staked by better on fixture outcome",
          "betType": ": outcome of fixtureID that better has unstaked on",
          "better": ": address of the unstaker",
          "fixtureID": ": corresponding fixtureID for fixture on which outcome is unstaked"
        }
      },
      "BettingStateChanged(string,uint8)": {
        "params": {
          "fixtureID": ": the corresponding fixtureID for fixture that has state change",
          "state": ": the BettingState corresponding to the new state of the fixture"
        }
      },
      "KickoffTimeUpdated(string,uint256)": {
        "params": {
          "fixtureID": ": corresponding fixtureID for fixture with kickoff time fulfilled",
          "kickoffTime": ": unix timestamp of kickoff time for fixture"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "awaitBetForFixture(string)": {
        "params": {
          "fixtureID": ": the corresponding fixtureID for fixture to be set to AWAITING"
        }
      },
      "closeBetForFixture(string)": {
        "params": {
          "fixtureID": ": the corresponding fixtureID for fixture to be closed"
        }
      },
      "getEnrichedFixtureData(string,address)": {
        "params": {
          "fixtureID": ": Corresponding fixtureID for fixture outcomes",
          "user": ": Address of user corresponding to user fixture stakes"
        },
        "returns": {
          "_0": "FixtureEnrichment struct containing fixture state, user stakes and total stakes"
        }
      },
      "handleCommissionPayout(string)": {
        "params": {
          "fixtureID": ": Corresponding fixtureID for fixture owner withdraws commission for"
        }
      },
      "openBetForFixture(string)": {
        "params": {
          "fixtureID": ": the corresponding fixtureID for fixture to be opened"
        }
      },
      "requestFixtureKickoffTime(string)": {
        "params": {
          "fixtureID": ": Corresponding fixtureID for fixture user requests kickoff time for"
        }
      },
      "requestFixtureResult(string)": {
        "params": {
          "fixtureID": ": Corresponding fixtureID for fixture user requests result for"
        }
      },
      "stake(string,uint8,uint256)": {
        "params": {
          "amount": ": The amount of collateral added to user's total stake on fixture outcome",
          "betType": ": The fixture outcome the msg sender is staking on",
          "fixtureID": ": Corresponding fixtureID for fixture user is staking on"
        }
      },
      "unstake(string,uint8,uint256)": {
        "params": {
          "amount": ": The amount of collateral subtracted from user's total stake on fixture outcome",
          "betType": ": The fixture outcome the msg sender is unstaking on",
          "fixtureID": ": Corresponding fixtureID for fixture user is unstaking on"
        }
      },
      "withdrawPayout(string)": {
        "params": {
          "fixtureID": ": Corresponding fixtureID for fixture user withdraws winnings for"
        }
      }
    },
    "title": "A contract for sports result staking",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BetCommissionPayout(string,uint256)": {
        "notice": "Event emitted each time owner claims commission on bet payout profits"
      },
      "BetPayout(address,string,uint256)": {
        "notice": "Event emitted each time a user claims payout on fixture result"
      },
      "BetStaked(address,string,uint256,uint8)": {
        "notice": "Event emitted each time a user stakes on a fixture outcome"
      },
      "BetUnstaked(address,string,uint256,uint8)": {
        "notice": "Event emitted each time a user unstakes on a fixture outcome"
      },
      "BettingStateChanged(string,uint8)": {
        "notice": "Event emitted each time the betting state for a fixture changes"
      },
      "KickoffTimeUpdated(string,uint256)": {
        "notice": "Event emitted each time a fixture kickoff time is fulfilled by oracle"
      }
    },
    "kind": "user",
    "methods": {
      "awaitBetForFixture(string)": {
        "notice": "Changes fixture betting state to AWAITING if eligible"
      },
      "closeBetForFixture(string)": {
        "notice": "Closes fixture if it is 1. Not currently closed AND 2. eligible to be closed"
      },
      "getEnrichedFixtureData(string,address)": {
        "notice": "Gets total and user stakes on all outcomes for fixture"
      },
      "handleCommissionPayout(string)": {
        "notice": "Transfers owner commission on fixture if applicable"
      },
      "openBetForFixture(string)": {
        "notice": "Makes oracle request to get fixture kickoff time and set fixture state to OPENINGOn fulfillment handle, ctx will open fixture is eligible"
      },
      "requestFixtureKickoffTime(string)": {
        "notice": "Calls consumer contract to request fixture kickoff time from oracle"
      },
      "requestFixtureKickoffTimeParameter(string)": {
        "notice": "Request fixture kickoff time from the oracle in a single transaction"
      },
      "requestFixtureResult(string)": {
        "notice": "Calls consumer contract to request fixture result from oracle"
      },
      "requestFixtureResultParameter(string)": {
        "notice": "Request fixture result from the oracle in a single transaction"
      },
      "stake(string,uint8,uint256)": {
        "notice": "Allows user to stake on fixture with ID fixtureID for outcome 'betType' with 'amount'"
      },
      "unstake(string,uint8,uint256)": {
        "notice": "Allows user to unstake on fixture with ID fixtureID for outcome 'betType' with 'amount'"
      },
      "withdrawLink(uint256)": {
        "notice": "Allow withdraw of Link tokens from the contract"
      },
      "withdrawPayout(string)": {
        "notice": "Transfers user winnings on fixture if applicable"
      }
    },
    "notice": "Handles user stakes and allows winning stakers to claim payouts ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4443,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "sportsOracleURI",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4445,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "jobId",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 4447,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4451,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "userToLink",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2653,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betTypes",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_enum(FixtureResult)4179)5_storage"
      },
      {
        "astId": 2674,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "bettingState",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_enum(BettingState)2581)"
      },
      {
        "astId": 2683,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "amounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(FixtureResult)4179,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2690,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "totalAmounts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(FixtureResult)4179,t_uint256))"
      },
      {
        "astId": 2696,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "payouts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2702,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "userWasPaid",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2706,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "requestKickoffToFixture",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 2710,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureToKickoffTime",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2714,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "requestResultToFixture",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 2719,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "results",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_enum(FixtureResult)4179)"
      },
      {
        "astId": 2723,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "commissionMap",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2727,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "commissionPaid",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(FixtureResult)4179)5_storage": {
        "base": "t_enum(FixtureResult)4179",
        "encoding": "inplace",
        "label": "enum SportsBettingLib.FixtureResult[5]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BettingState)2581": {
        "encoding": "inplace",
        "label": "enum SportsBetting.BettingState",
        "numberOfBytes": "1"
      },
      "t_enum(FixtureResult)4179": {
        "encoding": "inplace",
        "label": "enum SportsBettingLib.FixtureResult",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_enum(FixtureResult)4179,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(FixtureResult)4179",
        "label": "mapping(enum SportsBettingLib.FixtureResult => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_enum(FixtureResult)4179,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(FixtureResult)4179",
        "label": "mapping(enum SportsBettingLib.FixtureResult => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(BettingState)2581)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum SportsBetting.BettingState)",
        "numberOfBytes": "32",
        "value": "t_enum(BettingState)2581"
      },
      "t_mapping(t_string_memory_ptr,t_enum(FixtureResult)4179)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum SportsBettingLib.FixtureResult)",
        "numberOfBytes": "32",
        "value": "t_enum(FixtureResult)4179"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(FixtureResult)4179,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBettingLib.FixtureResult => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(FixtureResult)4179,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(FixtureResult)4179,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBettingLib.FixtureResult => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(FixtureResult)4179,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}