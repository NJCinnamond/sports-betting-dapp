{
  "address": "0xe06c0515CbB439d86fC7244F6a53368957119c33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sportsOracleURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "BetPayoutFulfillmentError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BettingState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "BettingStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoffTime",
          "type": "uint256"
        }
      ],
      "name": "KickoffTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureResult",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoff",
          "type": "uint256"
        }
      ],
      "name": "RequestFixtureParametersFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "RequestedFixtureParameters",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeBetters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "awaitBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betTypes",
      "outputs": [
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "bettingState",
      "outputs": [
        {
          "internalType": "enum SportsBetting.BettingState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "closeBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fixtureResult",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "fixtureToKickoffTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "fulfillBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "getEnrichedFixtureData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SportsBetting.BettingState",
              "name": "fixtureState",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "home",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "draw",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "away",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SportsBetting.StakeSummary",
              "name": "total",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "home",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "draw",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "away",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SportsBetting.StakeSummary",
              "name": "user",
              "type": "tuple"
            }
          ],
          "internalType": "struct SportsBetting.FixtureEnrichment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "historicalBetters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "openBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_resultResponse",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_kickoffResponse",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillMultipleParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestMultipleParameters",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToFixture",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sportsOracleURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc65da59b249ec13cc131ef42dde67b5bb965098521f4495e3d4dbc4ae3bb21aa",
  "receipt": {
    "to": null,
    "from": "0xe58B52d74fA00F94d61C6DCb73d79A8EA704a36a",
    "contractAddress": "0xe06c0515CbB439d86fC7244F6a53368957119c33",
    "transactionIndex": 42,
    "gasUsed": "4965178",
    "logsBloom": "0x
    "blockHash": "0x55f14345c0129e8ebe639f3653f70b8290015a1025076cb7ade55fe6e4f30996",
    "transactionHash": "0xc65da59b249ec13cc131ef42dde67b5bb965098521f4495e3d4dbc4ae3bb21aa",
    "logs": [],
    "blockNumber": 7659953,
    "cumulativeGasUsed": "10329353",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "localhost:5000/",
    "0xcc79157eb46f5624204f47ab42b3906caa40eab7",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x3764383061363338366566353433613361626235323831376636373037653362",
    "100000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "a3e771261a95f43f584d0a7ca182f203",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sportsOracleURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BetPayoutFulfillmentError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BettingStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoffTime\",\"type\":\"uint256\"}],\"name\":\"KickoffTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureResult\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoff\",\"type\":\"uint256\"}],\"name\":\"RequestFixtureParametersFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"RequestedFixtureParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeBetters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"awaitBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betTypes\",\"outputs\":[{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bettingState\",\"outputs\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"closeBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixtureResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"fixtureToKickoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"fulfillBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"getEnrichedFixtureData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"fixtureState\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"away\",\"type\":\"uint256\"}],\"internalType\":\"struct SportsBetting.StakeSummary\",\"name\":\"total\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"away\",\"type\":\"uint256\"}],\"internalType\":\"struct SportsBetting.StakeSummary\",\"name\":\"user\",\"type\":\"tuple\"}],\"internalType\":\"struct SportsBetting.FixtureEnrichment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalBetters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"openBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_resultResponse\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_kickoffResponse\",\"type\":\"uint256\"}],\"name\":\"rawFulfillMultipleParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestMultipleParameters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToFixture\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportsOracleURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestMultipleParameters(string)\":{\"notice\":\"Request mutiple parameters from the oracle in a single transaction\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"withdrawLink()\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SportsBetting.sol\":\"SportsBetting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SportsBetting.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./SportsOracleConsumer.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract SportsBetting is SportsOracleConsumer {\\n    enum BetType {\\n        HOME,\\n        DRAW,\\n        AWAY\\n    }\\n\\n    enum BettingState {\\n        CLOSED,\\n        OPEN,\\n        AWAITING,\\n        FULFILLING,\\n        FULFILLED\\n    }\\n\\n    struct StakeSummary {\\n        uint256 home;\\n        uint256 draw;\\n        uint256 away;\\n    }\\n\\n    struct FixtureEnrichment {\\n        BettingState fixtureState;\\n        StakeSummary total;\\n        StakeSummary user;\\n    }\\n\\n    event BettingStateChanged(string fixtureID, BettingState state);\\n\\n    event BetStaked(\\n        address indexed better,\\n        string fixtureID,\\n        uint256 amount,\\n        BetType betType\\n    );\\n\\n    event BetUnstaked(\\n        address indexed better,\\n        string fixtureID,\\n        uint256 amount,\\n        BetType betType\\n    );\\n\\n    event BetPayoutFulfillmentError(string fixtureID, string reason);\\n\\n    event BetPayout(address indexed better, string fixtureID, uint256 amount);\\n\\n    event KickoffTimeUpdated(string fixtureID, uint256 kickoffTime);\\n\\n    BetType[3] public betTypes;\\n\\n    // Entrance fee of 0.0001 Eth (10^14 Wei)\\n    uint256 public entranceFee = 10**14;\\n\\n    // Max time before a fixture kick-off that a bet can be placed in seconds\\n    // A fixture bet state will not move to OPEN before a time to the left of the\\n    // ko time equal to betAdvanceTime\\n    uint256 betAdvanceTime = 7 * 24 * 60 * 60;\\n\\n    // Cut off time for bets before KO time in seconds\\n    // i.e. all bets must be placed at time t where t < koTime - betCutOffTime\\n    uint256 betCutOffTime = 60 * 60;\\n\\n    // Map each fixture ID to a map of BetType to an array of all addresses that have ever placed\\n    // bets for that fixture-result pair\\n    mapping(string => mapping(BetType => address[])) public historicalBetters;\\n\\n    // activeBetters represents all addresses who currently have an amount staked on a fixture-result\\n    // The mapping(address => bool) pattern allows us to set address to true or false if an address\\n    // stakes/unstakes for that bet, and allows safer 'contains' methods on the betters\\n    mapping(string => mapping(BetType => mapping(address => bool)))\\n        public activeBetters;\\n\\n    // Map each fixture ID to a map of BetType to a map of address to uint representing the amount of wei bet on that result\\n    mapping(string => mapping(BetType => mapping(address => uint256)))\\n        public amounts;\\n\\n    // Map each fixture ID to a map of address to amount we owe the address owner\\n    mapping(string => mapping(address => uint256)) obligations;\\n\\n    // Map each fixture ID to whether betting is open for this fixture\\n    mapping(string => BettingState) public bettingState;\\n\\n    // Map each fixture ID to unix timestamp for its kickoff time\\n    mapping(string => uint256) public fixtureToKickoffTime;\\n\\n    // Map oracle request ID to corresponding fixture ID\\n    mapping(bytes32 => string) public requestToFixture;\\n\\n    constructor(\\n        string memory _sportsOracleURI,\\n        address _oracle,\\n        address _link,\\n        bytes32 _jobId,\\n        uint256 _fee\\n    ) SportsOracleConsumer(_sportsOracleURI, _oracle, _link, _jobId, _fee) {\\n        console.log(\\n            \\\"Deploying a SportsBetting with sports oracle URI:\\\",\\n            _sportsOracleURI\\n        );\\n        betTypes[0] = BetType.HOME;\\n        betTypes[1] = BetType.DRAW;\\n        betTypes[2] = BetType.AWAY;\\n    }\\n\\n    function getEnrichedFixtureData(string memory fixtureID)\\n        public\\n        returns (FixtureEnrichment memory)\\n    {\\n        return\\n            FixtureEnrichment({\\n                fixtureState: bettingState[fixtureID],\\n                user: getStakeSummaryForUser(fixtureID, msg.sender),\\n                total: StakeSummary({\\n                    home: getTotalAmountBetOnFixtureOutcome(\\n                        fixtureID,\\n                        BetType.HOME\\n                    ),\\n                    draw: getTotalAmountBetOnFixtureOutcome(\\n                        fixtureID,\\n                        BetType.DRAW\\n                    ),\\n                    away: getTotalAmountBetOnFixtureOutcome(\\n                        fixtureID,\\n                        BetType.AWAY\\n                    )\\n                })\\n            });\\n    }\\n\\n    function getStakeSummaryForUser(string memory fixtureID, address user)\\n        internal\\n        returns (StakeSummary memory)\\n    {\\n        return\\n            StakeSummary({\\n                home: amounts[fixtureID][BetType.HOME][user],\\n                draw: amounts[fixtureID][BetType.DRAW][user],\\n                away: amounts[fixtureID][BetType.AWAY][user]\\n            });\\n    }\\n\\n    // Wrapper for setting fixture betting state and emitting event\\n    function setFixtureBettingState(string memory fixtureID, BettingState state)\\n        internal\\n    {\\n        bettingState[fixtureID] = state;\\n        emit BettingStateChanged(fixtureID, state);\\n    }\\n\\n    // openBetForFixture makes an API call to oracle. It is expected that this\\n    // call will return the kickoff_time and the fulfillMultipleParameters func\\n    // will handle the state change to open\\n    // This is to ensure we don't open a bet until we have its KO time and\\n    // know that it advanced enough in the future\\n    function openBetForFixture(string memory fixtureID) public {\\n        require(\\n            bettingState[fixtureID] != BettingState.OPEN,\\n            \\\"Bet state is already OPEN for this fixture.\\\"\\n        );\\n        requestFixtureParameters(fixtureID);\\n    }\\n\\n    function closeBetForFixture(string memory fixtureID) public onlyOwner {\\n        require(\\n            bettingState[fixtureID] != BettingState.CLOSED,\\n            \\\"Bet state is already CLOSED for this fixture.\\\"\\n        );\\n        setFixtureBettingState(fixtureID, BettingState.CLOSED);\\n    }\\n\\n    // Because the betting state transition OPEN -> AWAITING depends on\\n    // real-world time, we cannot simply rely on ctx state variables to\\n    // deduce if a fixture-bet remains open\\n    // In this function we deduce whether betting is open based on current\\n    // block timestamp, update the state accordingly, and return the result\\n    function shouldHaveCorrectBettingState(string memory fixtureID) internal {\\n        uint256 ko = fixtureToKickoffTime[fixtureID];\\n\\n        if (ko == 0) return;\\n\\n        // If a bet is CLOSED, it can be OPENed if the kickoff time is\\n        // present and current timestamp is more than betCutOffTime before it\\n        // less than the betAdvanceTime after it\\n        if (\\n            bettingState[fixtureID] == BettingState.CLOSED &&\\n            block.timestamp <= ko - betCutOffTime &&\\n            block.timestamp >= ko - betAdvanceTime &&\\n            betCutOffTime != 0\\n        ) {\\n            setFixtureBettingState(fixtureID, BettingState.OPEN);\\n        }\\n\\n        // If a bet is OPEN, it becomes AWAITING if the kickoff time is\\n        // present and current timestamp is more than betCutOffTime to\\n        // the right of it\\n        if (\\n            bettingState[fixtureID] == BettingState.OPEN &&\\n            block.timestamp > ko - betCutOffTime &&\\n            betCutOffTime != 0\\n        ) {\\n            setFixtureBettingState(fixtureID, BettingState.AWAITING);\\n        }\\n    }\\n\\n    // Ideally the betting state will change from OPEN -> AWAITING\\n    // by virtue of a bet being placed too close to KO time, however\\n    // in the event this doesn't happen we allow a method for ctx owner\\n    // to force AWAITING\\n    // This also helps resolve bugs whereby the bet is marked as fulfilled\\n    // when it is not\\n    function awaitBetForFixture(string memory fixtureID) public onlyOwner {\\n        require(\\n            bettingState[fixtureID] != BettingState.AWAITING,\\n            \\\"Bet state is already AWAITING for this fixture.\\\"\\n        );\\n        setFixtureBettingState(fixtureID, BettingState.AWAITING);\\n    }\\n\\n    function fulfillBetForFixture(string memory fixtureID) public {\\n        require(\\n            bettingState[fixtureID] != BettingState.AWAITING,\\n            \\\"Bet state must be AWAITING to request fulfillment.\\\"\\n        );\\n        requestFixtureParameters(fixtureID);\\n    }\\n\\n    function stake(string memory fixtureID, BetType betType) public payable {\\n        shouldHaveCorrectBettingState(fixtureID);\\n        require(\\n            bettingState[fixtureID] == BettingState.OPEN,\\n            \\\"Bet activity is not open for this fixture.\\\"\\n        );\\n        require(msg.value >= entranceFee, \\\"Amount is below entrance fee.\\\");\\n        amounts[fixtureID][betType][msg.sender] += msg.value;\\n        historicalBetters[fixtureID][betType].push(msg.sender);\\n        activeBetters[fixtureID][betType][msg.sender] = true;\\n        emit BetStaked(msg.sender, fixtureID, msg.value, betType);\\n    }\\n\\n    // Removes all stake in fixtureID-BetType combo\\n    function unstake(\\n        string memory fixtureID,\\n        BetType betType,\\n        uint256 amount\\n    ) public {\\n        require(amount > 0, \\\"Amount should exceed zero.\\\");\\n        shouldHaveCorrectBettingState(fixtureID);\\n        require(\\n            bettingState[fixtureID] == BettingState.OPEN,\\n            \\\"Fixture is not in Open state.\\\"\\n        );\\n        uint256 amountStaked = amounts[fixtureID][betType][msg.sender];\\n        require(amountStaked > 0, \\\"No stake on this address-result.\\\");\\n        require(amount <= amountStaked, \\\"Current stake too low.\\\");\\n\\n        // Update stake amount\\n        amounts[fixtureID][betType][msg.sender] = amountStaked - amount;\\n\\n        // If non-partial unstake, caller is no longer an active staker\\n        if (amounts[fixtureID][betType][msg.sender] <= 0) {\\n            activeBetters[fixtureID][betType][msg.sender] = false;\\n        }\\n\\n        payable(msg.sender).transfer(amount);\\n        emit BetUnstaked(msg.sender, fixtureID, amount, betType);\\n    }\\n\\n    function requestFixtureParameters(string memory fixtureID) internal {\\n        bytes32 requestID = requestMultipleParameters(fixtureID);\\n        requestToFixture[requestID] = fixtureID;\\n        emit RequestedFixtureParameters(requestID, fixtureID);\\n    }\\n\\n    function fulfillMultipleParameters(\\n        bytes32 _requestId,\\n        string memory _resultResponse,\\n        uint256 _kickoffResponse\\n    ) internal override recordChainlinkFulfillment(_requestId) {\\n        string memory fixtureID = requestToFixture[_requestId];\\n\\n        emit RequestFixtureParametersFulfilled(\\n            _requestId,\\n            fixtureID,\\n            _resultResponse,\\n            _kickoffResponse\\n        );\\n\\n        // This oracle result serves two purposes\\n        // 1. Receive fixture KO time to deduce correct betting state\\n        fulfillKickoffTime(fixtureID, _kickoffResponse);\\n        shouldHaveCorrectBettingState(fixtureID);\\n\\n        // 2. Receive fixture result to perform payout logic if state\\n        // is AWAITING\\n        if (\\n            bettingState[fixtureID] == BettingState.AWAITING &&\\n            bytes(_resultResponse).length > 0\\n        ) {\\n            setFixtureBettingState(fixtureID, BettingState.FULFILLING);\\n            fulfillFixtureResult(fixtureID, _resultResponse);\\n            setFixtureBettingState(fixtureID, BettingState.FULFILLED);\\n        }\\n    }\\n\\n    function fulfillKickoffTime(\\n        string memory fixtureID,\\n        uint256 _kickoffResponse\\n    ) internal {\\n        if (_kickoffResponse != fixtureToKickoffTime[fixtureID]) {\\n            fixtureToKickoffTime[fixtureID] = _kickoffResponse;\\n            emit KickoffTimeUpdated(fixtureID, _kickoffResponse);\\n        }\\n    }\\n\\n    function fulfillFixtureResult(\\n        string memory fixtureID,\\n        string memory _resultResponse\\n    ) internal {\\n        BetType result = getFixtureResultFromAPIResponse(\\n            fixtureID,\\n            _resultResponse\\n        );\\n\\n        BetType[] memory winningOutcomes;\\n        winningOutcomes[0] = result;\\n\\n        BetType[] memory losingOutcomes = getLosingFixtureOutcomes(result);\\n\\n        uint256 winningAmount = getTotalAmountBetOnFixtureOutcomes(\\n            fixtureID,\\n            winningOutcomes\\n        );\\n        uint256 losingAmount = getTotalAmountBetOnFixtureOutcomes(\\n            fixtureID,\\n            losingOutcomes\\n        );\\n        uint256 totalAmount = winningAmount + losingAmount;\\n\\n        // Now we set the obligations map entry for this fixture based on above calcs and\\n        // perform the payout\\n        fulfillFixturePayoutObligations(\\n            fixtureID,\\n            result,\\n            winningAmount,\\n            totalAmount\\n        );\\n    }\\n\\n    function getFixtureResultFromAPIResponse(\\n        string memory fixtureID,\\n        string memory _resultResponse\\n    ) internal returns (BetType) {\\n        if (strEqual(_resultResponse, \\\"HOME\\\")) {\\n            return BetType.HOME;\\n        } else if (strEqual(_resultResponse, \\\"DRAW\\\")) {\\n            return BetType.DRAW;\\n        } else if (strEqual(_resultResponse, \\\"AWAY\\\")) {\\n            return BetType.AWAY;\\n        }\\n\\n        string memory errorString = string.concat(\\n            \\\"Error on fixture \\\",\\n            fixtureID,\\n            \\\": Unknown result from API: \\\",\\n            _resultResponse\\n        );\\n        emit BetPayoutFulfillmentError(fixtureID, errorString);\\n        revert(errorString);\\n    }\\n\\n    function strEqual(string memory a, string memory b)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function getLosingFixtureOutcomes(BetType outcome)\\n        internal\\n        view\\n        returns (BetType[] memory)\\n    {\\n        BetType[] memory losingOutcomes = new BetType[](2);\\n\\n        uint256 losingOutcomesIndex = 0;\\n        for (uint256 i = 0; i < betTypes.length; i++) {\\n            if (betTypes[i] != outcome) {\\n                losingOutcomes[losingOutcomesIndex] = betTypes[i];\\n                losingOutcomesIndex += 1;\\n            }\\n        }\\n        return losingOutcomes;\\n    }\\n\\n    function getTotalAmountBetOnFixtureOutcomes(\\n        string memory fixtureID,\\n        BetType[] memory outcomes\\n    ) internal view returns (uint256) {\\n        uint256 amount;\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\n            amount += getTotalAmountBetOnFixtureOutcome(fixtureID, outcomes[i]);\\n        }\\n        return amount;\\n    }\\n\\n    function getTotalAmountBetOnFixtureOutcome(\\n        string memory fixtureID,\\n        BetType outcome\\n    ) internal view returns (uint256) {\\n        uint256 amount;\\n        for (\\n            uint256 i = 0;\\n            i < historicalBetters[fixtureID][outcome].length;\\n            i++\\n        ) {\\n            address better = historicalBetters[fixtureID][outcome][i];\\n            if (activeBetters[fixtureID][outcome][better]) {\\n                amount += amounts[fixtureID][outcome][better];\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    // fulfillFixturePayoutObligations calculates the obligations (amount we owe to each\\n    // winning staker for this fixture)\\n    function fulfillFixturePayoutObligations(\\n        string memory fixtureID,\\n        BetType result,\\n        uint256 winningAmount,\\n        uint256 totalAmount\\n    ) internal {\\n        if (bettingState[fixtureID] != BettingState.FULFILLING) {\\n            revert(\\\"Fixture bet state is not FULFILLING.\\\");\\n        }\\n\\n        for (\\n            uint256 i = 0;\\n            i < historicalBetters[fixtureID][result].length;\\n            i++\\n        ) {\\n            address better = historicalBetters[fixtureID][result][i];\\n            if (activeBetters[fixtureID][result][better]) {\\n                uint256 betterAmount = amounts[fixtureID][result][better];\\n                uint256 betterObligation = betterAmount *\\n                    (totalAmount / winningAmount);\\n                obligations[fixtureID][better] = betterObligation;\\n\\n                amounts[fixtureID][result][better] = 0;\\n                activeBetters[fixtureID][result][better] = false;\\n                payable(better).transfer(betterObligation);\\n                emit BetPayout(better, fixtureID, betterObligation);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9b55a0443e8da34c55ee6b4830d046b89085a7bebb3e1f6f45ed2ad619cd5ae\",\"license\":\"Unlicense\"},\"contracts/SportsOracleConsumer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\n\\r\\n/**\\r\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\r\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\\r\\n */\\r\\n\\r\\nabstract contract SportsOracleConsumer is ChainlinkClient, ConfirmedOwner {\\r\\n    using Chainlink for Chainlink.Request;\\r\\n\\r\\n    address public chainlink;\\r\\n    string public sportsOracleURI;\\r\\n\\r\\n    bytes32 private jobId;\\r\\n    uint256 private fee;\\r\\n\\r\\n    // multiple params returned in a single oracle response\\r\\n    string public fixtureResult;\\r\\n\\r\\n    event RequestedFixtureParameters(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID\\r\\n    );\\r\\n\\r\\n    event RequestFixtureParametersFulfilled(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID,\\r\\n        string fixtureResult,\\r\\n        uint256 kickoff\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the link token and target oracle\\r\\n     * @dev The oracle address must be an Operator contract for multiword response\\r\\n     *\\r\\n     *\\r\\n     * Kovan Testnet details:\\r\\n     * Link Token: 0xa36085F69e2889c224210F603D836748e7dC0088\\r\\n     * Oracle: 0x74EcC8Bdeb76F2C6760eD2dc8A46ca5e581fA656 (Chainlink DevRel)\\r\\n     * jobId: 53f9755920cd451a8fe46f5087468395\\r\\n     *\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _sportsOracleURI,\\r\\n        address _oracle,\\r\\n        address _link,\\r\\n        bytes32 _jobId,\\r\\n        uint256 _fee\\r\\n    ) ConfirmedOwner(msg.sender) {\\r\\n        sportsOracleURI = _sportsOracleURI;\\r\\n        setChainlinkToken(_link);\\r\\n        setChainlinkOracle(_oracle);\\r\\n        chainlink = _oracle;\\r\\n        jobId = _jobId;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request mutiple parameters from the oracle in a single transaction\\r\\n     */\\r\\n    function requestMultipleParameters(string memory fixtureID)\\r\\n        public\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.rawFulfillMultipleParameters.selector\\r\\n        );\\r\\n        req.add(\\\"urlResult\\\", string.concat(sportsOracleURI, fixtureID));\\r\\n        req.add(\\\"pathResult\\\", \\\"Result\\\");\\r\\n        req.add(\\\"pathKickoff\\\", \\\"Kickoff\\\");\\r\\n        return sendChainlinkRequest(req, fee); // MWR API.\\r\\n    }\\r\\n\\r\\n    function rawFulfillMultipleParameters(\\r\\n        bytes32 _requestId,\\r\\n        string memory _resultResponse,\\r\\n        uint256 _kickoffResponse\\r\\n    ) external {\\r\\n        require(msg.sender == chainlink, \\\"Only ChainlinkClient can fulfill\\\");\\r\\n        fulfillMultipleParameters(\\r\\n            _requestId,\\r\\n            _resultResponse,\\r\\n            _kickoffResponse\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillMultipleParameters(\\r\\n        bytes32 _requestId,\\r\\n        string memory _resultResponse,\\r\\n        uint256 _kickoffResponse\\r\\n    ) internal virtual;\\r\\n\\r\\n    /**\\r\\n     * Allow withdraw of Link tokens from the contract\\r\\n     */\\r\\n    function withdrawLink() public onlyOwner {\\r\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n        require(\\r\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4994bb49b4c140c554ad7d8a1a81c1e81346c795c9a8f82fc3ce29c5461496d1\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600455655af3107a4000600e5562093a80600f55610e106010553480156200002d57600080fd5b5060405162005f4038038062005f408339818101604052810190620000539190620008b8565b8484848484338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c590620009c0565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001565762000155816200030760201b60201c565b5b50505084600990805190602001906200017192919062000590565b5062000183836200043960201b60201c565b62000194846200047d60201b60201c565b83600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600a8190555080600b8190555050505050506200021860405180606001604052806031815260200162005f0f6031913986620004c160201b6200197a1760201c565b6000600d600060038110620002325762000231620009e2565b5b602091828204019190066101000a81548160ff021916908360028111156200025f576200025e62000a11565b5b02179055506001600d6001600381106200027e576200027d620009e2565b5b602091828204019190066101000a81548160ff02191690836002811115620002ab57620002aa62000a11565b5b02179055506002600d600260038110620002ca57620002c9620009e2565b5b602091828204019190066101000a81548160ff02191690836002811115620002f757620002f662000a11565b5b0217905550505050505062000b9e565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000379576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003709062000a90565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620005638282604051602401620004da92919062000afe565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200056760201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546200059e9062000b68565b90600052602060002090601f016020900481019282620005c257600085556200060e565b82601f10620005dd57805160ff19168380011785556200060e565b828001600101855582156200060e579182015b828111156200060d578251825591602001919060010190620005f0565b5b5090506200061d919062000621565b5090565b5b808211156200063c57600081600090555060010162000622565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620006a9826200065e565b810181811067ffffffffffffffff82111715620006cb57620006ca6200066f565b5b80604052505050565b6000620006e062000640565b9050620006ee82826200069e565b919050565b600067ffffffffffffffff8211156200071157620007106200066f565b5b6200071c826200065e565b9050602081019050919050565b60005b83811015620007495780820151818401526020810190506200072c565b8381111562000759576000848401525b50505050565b6000620007766200077084620006f3565b620006d4565b90508281526020810184848401111562000795576200079462000659565b5b620007a284828562000729565b509392505050565b600082601f830112620007c257620007c162000654565b5b8151620007d48482602086016200075f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200080a82620007dd565b9050919050565b6200081c81620007fd565b81146200082857600080fd5b50565b6000815190506200083c8162000811565b92915050565b6000819050919050565b620008578162000842565b81146200086357600080fd5b50565b60008151905062000877816200084c565b92915050565b6000819050919050565b62000892816200087d565b81146200089e57600080fd5b50565b600081519050620008b28162000887565b92915050565b600080600080600060a08688031215620008d757620008d66200064a565b5b600086015167ffffffffffffffff811115620008f857620008f76200064f565b5b6200090688828901620007aa565b955050602062000919888289016200082b565b94505060406200092c888289016200082b565b93505060606200093f8882890162000866565b92505060806200095288828901620008a1565b9150509295509295909350565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620009a86018836200095f565b9150620009b58262000970565b602082019050919050565b60006020820190508181036000830152620009db8162000999565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600062000a786017836200095f565b915062000a858262000a40565b602082019050919050565b6000602082019050818103600083015262000aab8162000a69565b9050919050565b600081519050919050565b600062000aca8262000ab2565b62000ad681856200095f565b935062000ae881856020860162000729565b62000af3816200065e565b840191505092915050565b6000604082019050818103600083015262000b1a818562000abd565b9050818103602083015262000b30818462000abd565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b8157607f821691505b6020821081141562000b985762000b9762000b39565b5b50919050565b6153618062000bae6000396000f3fe60806040526004361061014a5760003560e01c80638dc654a2116100b6578063edb160701161006f578063edb1607014610480578063ef40efde146104bd578063f2fde38b146104e6578063f7c60c0c1461050f578063fbe913931461053a578063ffebd172146105775761014a565b80638dc654a21461035c5780639c3feeb714610373578063aa0660901461039e578063b148cdf1146103db578063c8fe739c14610406578063cbef85c2146104435761014a565b8063649677e111610108578063649677e1146102605780636e2a3a841461028b57806379ba5097146102b457806380b71dca146102cb57806384f4614e146102f45780638da5cb5b146103315761014a565b8062e1a75b1461014f57806301ec29c914610178578063401bf083146101a157806340364d11146101de5780635e524319146101fa57806362098ff714610223575b600080fd5b34801561015b57600080fd5b5061017660048036038101906101719190613a41565b6105b4565b005b34801561018457600080fd5b5061019f600480360381019061019a9190613a41565b610653565b005b3480156101ad57600080fd5b506101c860048036038101906101c39190613ac0565b6106fc565b6040516101d59190613b75565b60405180910390f35b6101f860048036038101906101f39190613bbc565b61079c565b005b34801561020657600080fd5b50610221600480360381019061021c9190613c4e565b610ad6565b005b34801561022f57600080fd5b5061024a60048036038101906102459190613cbd565b610f50565b6040516102579190613d61565b60405180910390f35b34801561026c57600080fd5b50610275610f7a565b6040516102829190613d8b565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190613a41565b610f80565b005b3480156102c057600080fd5b506102c961101f565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190613da6565b6111b6565b005b34801561030057600080fd5b5061031b60048036038101906103169190613a41565b611256565b6040516103289190613ef0565b60405180910390f35b34801561033d57600080fd5b506103466112fe565b6040516103539190613f4c565b60405180910390f35b34801561036857600080fd5b50610371611328565b005b34801561037f57600080fd5b50610388611475565b6040516103959190613f4c565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c09190613f93565b61149b565b6040516103d29190613d8b565b60405180910390f35b3480156103e757600080fd5b506103f06114e3565b6040516103fd9190613b75565b60405180910390f35b34801561041257600080fd5b5061042d60048036038101906104289190613c4e565b611571565b60405161043a9190613f4c565b60405180910390f35b34801561044f57600080fd5b5061046a60048036038101906104659190613f93565b6115e2565b604051610477919061401d565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a29190613a41565b611634565b6040516104b49190613d8b565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190613a41565b611662565b005b3480156104f257600080fd5b5061050d60048036038101906105089190614038565b61170b565b005b34801561051b57600080fd5b5061052461171f565b6040516105319190613b75565b60405180910390f35b34801561054657600080fd5b50610561600480360381019061055c9190613a41565b6117ad565b60405161056e9190614074565b60405180910390f35b34801561058357600080fd5b5061059e60048036038101906105999190613a41565b6117e3565b6040516105ab919061409e565b60405180910390f35b600160048111156105c8576105c7613cea565b5b6015826040516105d891906140f5565b908152602001604051809103902060009054906101000a900460ff16600481111561060657610605613cea565b5b1415610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e9061417e565b60405180910390fd5b61065081611a16565b50565b61065b611a87565b6002600481111561066f5761066e613cea565b5b60158260405161067f91906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156106ad576106ac613cea565b5b14156106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590614210565b60405180910390fd5b6106f9816002611b19565b50565b6017602052806000526040600020600091509050805461071b9061425f565b80601f01602080910402602001604051908101604052809291908181526020018280546107479061425f565b80156107945780601f1061076957610100808354040283529160200191610794565b820191906000526020600020905b81548152906001019060200180831161077757829003601f168201915b505050505081565b6107a582611b9c565b600160048111156107b9576107b8613cea565b5b6015836040516107c991906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156107f7576107f6613cea565b5b14610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90614303565b60405180910390fd5b600e5434101561087c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108739061436f565b60405180910390fd5b3460138360405161088d91906140f5565b908152602001604051809103902060008360028111156108b0576108af613cea565b5b60028111156108c2576108c1613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461091c91906143be565b9250508190555060118260405161093391906140f5565b9081526020016040518091039020600082600281111561095657610955613cea565b5b600281111561096857610967613cea565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016012836040516109e991906140f5565b90815260200160405180910390206000836002811115610a0c57610a0b613cea565b5b6002811115610a1e57610a1d613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1a48cf6315f5f44cf8ac3a5105296caf8a73f64b40f9a6b7cbf8ba65ca930fd4833484604051610aca93929190614414565b60405180910390a25050565b60008111610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b109061449e565b60405180910390fd5b610b2283611b9c565b60016004811115610b3657610b35613cea565b5b601584604051610b4691906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115610b7457610b73613cea565b5b14610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab9061450a565b60405180910390fd5b6000601384604051610bc691906140f5565b90815260200160405180910390206000846002811115610be957610be8613cea565b5b6002811115610bfb57610bfa613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8390614576565b60405180910390fd5b80821115610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc6906145e2565b60405180910390fd5b8181610cdb9190614602565b601385604051610ceb91906140f5565b90815260200160405180910390206000856002811115610d0e57610d0d613cea565b5b6002811115610d2057610d1f613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601385604051610d8191906140f5565b90815260200160405180910390206000856002811115610da457610da3613cea565b5b6002811115610db657610db5613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610eb1576000601285604051610e1991906140f5565b90815260200160405180910390206000856002811115610e3c57610e3b613cea565b5b6002811115610e4e57610e4d613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610ef7573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f3b118062ef97715cdb7fc34e6b3bc6bf1c6ddbbbbc4e8d6f13eff984080d08858486604051610f4293929190614414565b60405180910390a250505050565b600d8160038110610f6057600080fd5b60209182820401919006915054906101000a900460ff1681565b600e5481565b60026004811115610f9457610f93613cea565b5b601582604051610fa491906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115610fd257610fd1613cea565b5b1415611013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100a906146a8565b60405180910390fd5b61101c81611a16565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690614714565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123d90614780565b60405180910390fd5b611251838383611d03565b505050565b61125e61375d565b604051806060016040528060158460405161127991906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156112a7576112a6613cea565b5b815260200160405180606001604052806112c2866000611f84565b81526020016112d2866001611f84565b81526020016112e2866002611f84565b81525081526020016112f484336121dd565b8152509050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611330611a87565b600061133a6123b9565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113929190613f4c565b602060405180830381865afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d391906147b5565b6040518363ffffffff1660e01b81526004016113f09291906147e2565b6020604051808303816000875af115801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190614837565b611472576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611469906148b0565b60405180910390fd5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60138380516020810182018051848252602083016020850120818352809550505050505060205281600052604060002060205280600052604060002060009250925050505481565b600980546114f09061425f565b80601f016020809104026020016040519081016040528092919081815260200182805461151c9061425f565b80156115695780601f1061153e57610100808354040283529160200191611569565b820191906000526020600020905b81548152906001019060200180831161154c57829003601f168201915b505050505081565b60118380516020810182018051848252602083016020850120818352809550505050505060205281600052604060002081815481106115af57600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601283805160208101820180518482526020830160208501208183528095505050505050602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b6016818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b61166a611a87565b6000600481111561167e5761167d613cea565b5b60158260405161168e91906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156116bc576116bb613cea565b5b14156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f490614942565b60405180910390fd5b611708816000611b19565b50565b611713611a87565b61171c816123e3565b50565b600c805461172c9061425f565b80601f01602080910402602001604051908101604052809291908181526020018280546117589061425f565b80156117a55780601f1061177a576101008083540402835291602001916117a5565b820191906000526020600020905b81548152906001019060200180831161178857829003601f168201915b505050505081565b6015818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6000806117fa600a54306380b71dca60e01b612512565b90506118686040518060400160405280600981526020017f75726c526573756c7400000000000000000000000000000000000000000000008152506009856040516020016118499291906149f6565b604051602081830303815290604052836125439092919063ffffffff16565b6118e76040518060400160405280600a81526020017f70617468526573756c74000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f526573756c740000000000000000000000000000000000000000000000000000815250836125439092919063ffffffff16565b6119666040518060400160405280600b81526020017f706174684b69636b6f66660000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4b69636b6f666600000000000000000000000000000000000000000000000000815250836125439092919063ffffffff16565b61197281600b54612576565b915050919050565b611a128282604051602401611990929190614a1a565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125ad565b5050565b6000611a21826117e3565b905081601760008381526020019081526020016000209080519060200190611a4a92919061379c565b50807fc36e98a50a4fd27efe75de15a0e1c01e0ccba2218c7871d3c836905bfe1bc3e183604051611a7b9190613b75565b60405180910390a25050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0e90614a9d565b60405180910390fd5b565b80601583604051611b2a91906140f5565b908152602001604051809103902060006101000a81548160ff02191690836004811115611b5a57611b59613cea565b5b02179055507fe10ba6722d7a7a91bf343a0f8e5b026910dbc4a2ebca276930dff31703c59a708282604051611b90929190614abd565b60405180910390a15050565b6000601682604051611bae91906140f5565b90815260200160405180910390205490506000811415611bce5750611d00565b60006004811115611be257611be1613cea565b5b601583604051611bf291906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115611c2057611c1f613cea565b5b148015611c3a575060105481611c369190614602565b4211155b8015611c535750600f5481611c4f9190614602565b4210155b8015611c625750600060105414155b15611c7357611c72826001611b19565b5b60016004811115611c8757611c86613cea565b5b601583604051611c9791906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115611cc557611cc4613cea565b5b148015611cde575060105481611cdb9190614602565b42115b8015611ced5750600060105414155b15611cfe57611cfd826002611b19565b5b505b50565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9c90614b5f565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a26000601760008681526020019081526020016000208054611e289061425f565b80601f0160208091040260200160405190810160405280929190818152602001828054611e549061425f565b8015611ea15780601f10611e7657610100808354040283529160200191611ea1565b820191906000526020600020905b815481529060010190602001808311611e8457829003601f168201915b50505050509050847f6125286ff7c688816bd3feb69d5aa9e9720624656a8478a8f351fa81a0d66004828686604051611edc93929190614b7f565b60405180910390a2611eee81846125d6565b611ef781611b9c565b60026004811115611f0b57611f0a613cea565b5b601582604051611f1b91906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115611f4957611f48613cea565b5b148015611f57575060008451115b15611f7d57611f67816003611b19565b611f71818561265c565b611f7c816004611b19565b5b5050505050565b60008060005b601185604051611f9a91906140f5565b90815260200160405180910390206000856002811115611fbd57611fbc613cea565b5b6002811115611fcf57611fce613cea565b5b8152602001908152602001600020805490508110156121d2576000601186604051611ffa91906140f5565b9081526020016040518091039020600086600281111561201d5761201c613cea565b5b600281111561202f5761202e613cea565b5b8152602001908152602001600020828154811061204f5761204e614bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060128660405161208c91906140f5565b908152602001604051809103902060008660028111156120af576120ae613cea565b5b60028111156120c1576120c0613cea565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156121be5760138660405161212f91906140f5565b9081526020016040518091039020600086600281111561215257612151613cea565b5b600281111561216457612163613cea565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836121bb91906143be565b92505b5080806121ca90614bf3565b915050611f8a565b508091505092915050565b6121e5613822565b604051806060016040528060138560405161220091906140f5565b9081526020016040518091039020600080600281111561222357612222613cea565b5b600281111561223557612234613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200160138560405161229691906140f5565b90815260200160405180910390206000600160028111156122ba576122b9613cea565b5b60028111156122cc576122cb613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200160138560405161232d91906140f5565b908152602001604051809103902060006002808111156123505761234f613cea565b5b600281111561236257612361613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815250905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244990614c88565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b61251a613843565b612522613843565b61253985858584612702909392919063ffffffff16565b9150509392505050565b61255a8284608001516127b290919063ffffffff16565b6125718184608001516127b290919063ffffffff16565b505050565b60006125a5600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846127d7565b905092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6016826040516125e691906140f5565b9081526020016040518091039020548114612658578060168360405161260c91906140f5565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a3828260405161264f929190614ca8565b60405180910390a15b5050565b600061266883836128a3565b90506060818160008151811061268157612680614bc4565b5b6020026020010190600281111561269b5761269a613cea565b5b908160028111156126af576126ae613cea565b5b8152505060006126be83612a2e565b905060006126cc8684612b7c565b905060006126da8784612b7c565b9050600081836126ea91906143be565b90506126f888878584612bda565b5050505050505050565b61270a613843565b61271a8560800151610100613108565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6127bf8260038351613172565b6127d281836132f790919063ffffffff16565b505050565b60008060045490506001816127ec91906143be565b6004819055506000634042994660e01b60008087600001513089604001518760018c608001516000015160405160240161282d989796959493929190614d68565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061289886838684613319565b925050509392505050565b60006128e4826040518060400160405280600481526020017f484f4d45000000000000000000000000000000000000000000000000000000008152506134ae565b156128f25760009050612a28565b612931826040518060400160405280600481526020017f44524157000000000000000000000000000000000000000000000000000000008152506134ae565b1561293f5760019050612a28565b61297e826040518060400160405280600481526020017f41574159000000000000000000000000000000000000000000000000000000008152506134ae565b1561298c5760029050612a28565b600083836040516020016129a1929190614e39565b60405160208183030381529060405290507f2a2c16a3ce1dea0db612b14a8fdc9a8d316acc87914b4d66440d119b41e8615f84826040516129e3929190614a1a565b60405180910390a1806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1f9190613b75565b60405180910390fd5b92915050565b60606000600267ffffffffffffffff811115612a4d57612a4c613916565b5b604051908082528060200260200182016040528015612a7b5781602001602082028036833780820191505090505b5090506000805b6003811015612b7157846002811115612a9e57612a9d613cea565b5b600d8260038110612ab257612ab1614bc4565b5b602091828204019190069054906101000a900460ff166002811115612ada57612ad9613cea565b5b14612b5e57600d8160038110612af357612af2614bc4565b5b602091828204019190069054906101000a900460ff16838381518110612b1c57612b1b614bc4565b5b60200260200101906002811115612b3657612b35613cea565b5b90816002811115612b4a57612b49613cea565b5b81525050600182612b5b91906143be565b91505b8080612b6990614bf3565b915050612a82565b508192505050919050565b60008060005b8351811015612bcf57612baf85858381518110612ba257612ba1614bc4565b5b6020026020010151611f84565b82612bba91906143be565b91508080612bc790614bf3565b915050612b82565b508091505092915050565b60036004811115612bee57612bed613cea565b5b601585604051612bfe91906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115612c2c57612c2b613cea565b5b14612c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6390614eed565b60405180910390fd5b60005b601185604051612c7f91906140f5565b90815260200160405180910390206000856002811115612ca257612ca1613cea565b5b6002811115612cb457612cb3613cea565b5b815260200190815260200160002080549050811015613101576000601186604051612cdf91906140f5565b90815260200160405180910390206000866002811115612d0257612d01613cea565b5b6002811115612d1457612d13613cea565b5b81526020019081526020016000208281548110612d3457612d33614bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601286604051612d7191906140f5565b90815260200160405180910390206000866002811115612d9457612d93613cea565b5b6002811115612da657612da5613cea565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156130ed576000601387604051612e1691906140f5565b90815260200160405180910390206000876002811115612e3957612e38613cea565b5b6002811115612e4b57612e4a613cea565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008585612ea79190614f3c565b82612eb29190614f6d565b905080601489604051612ec591906140f5565b908152602001604051809103902060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601389604051612f2691906140f5565b90815260200160405180910390206000896002811115612f4957612f48613cea565b5b6002811115612f5b57612f5a613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601289604051612fbc91906140f5565b90815260200160405180910390206000896002811115612fdf57612fde613cea565b5b6002811115612ff157612ff0613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613099573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd89836040516130e2929190614ca8565b60405180910390a250505b5080806130f990614bf3565b915050612c6f565b5050505050565b6131106138b0565b600060208361311f9190614fc7565b1461314b576020826131319190614fc7565b602061313d9190614602565b8261314891906143be565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff16116131a9576131a38160058460ff16901b60ff16178461350790919063ffffffff16565b506132f2565b60ff8167ffffffffffffffff16116131ff576131d8601860058460ff16901b178461350790919063ffffffff16565b506131f98167ffffffffffffffff166001856135279092919063ffffffff16565b506132f1565b61ffff8167ffffffffffffffff16116132565761322f601960058460ff16901b178461350790919063ffffffff16565b506132508167ffffffffffffffff166002856135279092919063ffffffff16565b506132f0565b63ffffffff8167ffffffffffffffff16116132af57613288601a60058460ff16901b178461350790919063ffffffff16565b506132a98167ffffffffffffffff166004856135279092919063ffffffff16565b506132ef565b6132cc601b60058460ff16901b178461350790919063ffffffff16565b506132ed8167ffffffffffffffff166008856135279092919063ffffffff16565b505b5b5b5b505050565b6132ff6138b0565b61331183846000015151848551613549565b905092915050565b6000308460405160200161332e9291906150b1565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401613424939291906150dd565b6020604051808303816000875af1158015613443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134679190614837565b6134a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349d9061518d565b60405180910390fd5b949350505050565b6000816040516020016134c191906140f5565b60405160208183030381529060405280519060200120836040516020016134e891906140f5565b6040516020818303038152906040528051906020012014905092915050565b61350f6138b0565b61351f8384600001515184613638565b905092915050565b61352f6138b0565b61354084856000015151858561368f565b90509392505050565b6135516138b0565b825182111561355f57600080fd5b8460200151828561357091906143be565b11156135a5576135a48560026135958860200151888761359091906143be565b61371d565b61359f9190614f6d565b613739565b5b6000808651805187602083010193508088870111156135c45787860182525b60208701925050505b6020841061360b57805182526020826135e691906143be565b91506020816135f591906143be565b90506020846136049190614602565b93506135cd565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6136406138b0565b836020015183106136665761366584600286602001516136609190614f6d565b613739565b5b8351805160208583010184815381861415613682576001820183525b5050508390509392505050565b6136976138b0565b846020015184836136a891906143be565b11156136d0576136cf85600286856136c091906143be565b6136ca9190614f6d565b613739565b5b60006001836101006136e291906152e0565b6136ec9190614602565b9050855183868201018583198251161781528151858801111561370f5784870182525b505085915050949350505050565b60008183111561372f57829050613733565b8190505b92915050565b60008260000151905061374c8383613108565b5061375783826132f7565b50505050565b60405180606001604052806000600481111561377c5761377b613cea565b5b8152602001613789613822565b8152602001613796613822565b81525090565b8280546137a89061425f565b90600052602060002090601f0160209004810192826137ca5760008555613811565b82601f106137e357805160ff1916838001178555613811565b82800160010185558215613811579182015b828111156138105782518255916020019190600101906137f5565b5b50905061381e91906138ca565b5090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081526020016138aa6138b0565b81525090565b604051806040016040528060608152602001600081525090565b5b808211156138e35760008160009055506001016138cb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61394e82613905565b810181811067ffffffffffffffff8211171561396d5761396c613916565b5b80604052505050565b60006139806138e7565b905061398c8282613945565b919050565b600067ffffffffffffffff8211156139ac576139ab613916565b5b6139b582613905565b9050602081019050919050565b82818337600083830152505050565b60006139e46139df84613991565b613976565b905082815260208101848484011115613a00576139ff613900565b5b613a0b8482856139c2565b509392505050565b600082601f830112613a2857613a276138fb565b5b8135613a388482602086016139d1565b91505092915050565b600060208284031215613a5757613a566138f1565b5b600082013567ffffffffffffffff811115613a7557613a746138f6565b5b613a8184828501613a13565b91505092915050565b6000819050919050565b613a9d81613a8a565b8114613aa857600080fd5b50565b600081359050613aba81613a94565b92915050565b600060208284031215613ad657613ad56138f1565b5b6000613ae484828501613aab565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b27578082015181840152602081019050613b0c565b83811115613b36576000848401525b50505050565b6000613b4782613aed565b613b518185613af8565b9350613b61818560208601613b09565b613b6a81613905565b840191505092915050565b60006020820190508181036000830152613b8f8184613b3c565b905092915050565b60038110613ba457600080fd5b50565b600081359050613bb681613b97565b92915050565b60008060408385031215613bd357613bd26138f1565b5b600083013567ffffffffffffffff811115613bf157613bf06138f6565b5b613bfd85828601613a13565b9250506020613c0e85828601613ba7565b9150509250929050565b6000819050919050565b613c2b81613c18565b8114613c3657600080fd5b50565b600081359050613c4881613c22565b92915050565b600080600060608486031215613c6757613c666138f1565b5b600084013567ffffffffffffffff811115613c8557613c846138f6565b5b613c9186828701613a13565b9350506020613ca286828701613ba7565b9250506040613cb386828701613c39565b9150509250925092565b600060208284031215613cd357613cd26138f1565b5b6000613ce184828501613c39565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613d2a57613d29613cea565b5b50565b6000819050613d3b82613d19565b919050565b6000613d4b82613d2d565b9050919050565b613d5b81613d40565b82525050565b6000602082019050613d766000830184613d52565b92915050565b613d8581613c18565b82525050565b6000602082019050613da06000830184613d7c565b92915050565b600080600060608486031215613dbf57613dbe6138f1565b5b6000613dcd86828701613aab565b935050602084013567ffffffffffffffff811115613dee57613ded6138f6565b5b613dfa86828701613a13565b9250506040613e0b86828701613c39565b9150509250925092565b60058110613e2657613e25613cea565b5b50565b6000819050613e3782613e15565b919050565b6000613e4782613e29565b9050919050565b613e5781613e3c565b82525050565b613e6681613c18565b82525050565b606082016000820151613e826000850182613e5d565b506020820151613e956020850182613e5d565b506040820151613ea86040850182613e5d565b50505050565b60e082016000820151613ec46000850182613e4e565b506020820151613ed76020850182613e6c565b506040820151613eea6080850182613e6c565b50505050565b600060e082019050613f056000830184613eae565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f3682613f0b565b9050919050565b613f4681613f2b565b82525050565b6000602082019050613f616000830184613f3d565b92915050565b613f7081613f2b565b8114613f7b57600080fd5b50565b600081359050613f8d81613f67565b92915050565b600080600060608486031215613fac57613fab6138f1565b5b600084013567ffffffffffffffff811115613fca57613fc96138f6565b5b613fd686828701613a13565b9350506020613fe786828701613ba7565b9250506040613ff886828701613f7e565b9150509250925092565b60008115159050919050565b61401781614002565b82525050565b6000602082019050614032600083018461400e565b92915050565b60006020828403121561404e5761404d6138f1565b5b600061405c84828501613f7e565b91505092915050565b61406e81613e3c565b82525050565b60006020820190506140896000830184614065565b92915050565b61409881613a8a565b82525050565b60006020820190506140b3600083018461408f565b92915050565b600081905092915050565b60006140cf82613aed565b6140d981856140b9565b93506140e9818560208601613b09565b80840191505092915050565b600061410182846140c4565b915081905092915050565b7f42657420737461746520697320616c7265616479204f50454e20666f7220746860008201527f697320666978747572652e000000000000000000000000000000000000000000602082015250565b6000614168602b83613af8565b91506141738261410c565b604082019050919050565b600060208201905081810360008301526141978161415b565b9050919050565b7f42657420737461746520697320616c7265616479204157414954494e4720666f60008201527f72207468697320666978747572652e0000000000000000000000000000000000602082015250565b60006141fa602f83613af8565b91506142058261419e565b604082019050919050565b60006020820190508181036000830152614229816141ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061427757607f821691505b6020821081141561428b5761428a614230565b5b50919050565b7f426574206163746976697479206973206e6f74206f70656e20666f722074686960008201527f7320666978747572652e00000000000000000000000000000000000000000000602082015250565b60006142ed602a83613af8565b91506142f882614291565b604082019050919050565b6000602082019050818103600083015261431c816142e0565b9050919050565b7f416d6f756e742069732062656c6f7720656e7472616e6365206665652e000000600082015250565b6000614359601d83613af8565b915061436482614323565b602082019050919050565b600060208201905081810360008301526143888161434c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143c982613c18565b91506143d483613c18565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144095761440861438f565b5b828201905092915050565b6000606082019050818103600083015261442e8186613b3c565b905061443d6020830185613d7c565b61444a6040830184613d52565b949350505050565b7f416d6f756e742073686f756c6420657863656564207a65726f2e000000000000600082015250565b6000614488601a83613af8565b915061449382614452565b602082019050919050565b600060208201905081810360008301526144b78161447b565b9050919050565b7f46697874757265206973206e6f7420696e204f70656e2073746174652e000000600082015250565b60006144f4601d83613af8565b91506144ff826144be565b602082019050919050565b60006020820190508181036000830152614523816144e7565b9050919050565b7f4e6f207374616b65206f6e207468697320616464726573732d726573756c742e600082015250565b6000614560602083613af8565b915061456b8261452a565b602082019050919050565b6000602082019050818103600083015261458f81614553565b9050919050565b7f43757272656e74207374616b6520746f6f206c6f772e00000000000000000000600082015250565b60006145cc601683613af8565b91506145d782614596565b602082019050919050565b600060208201905081810360008301526145fb816145bf565b9050919050565b600061460d82613c18565b915061461883613c18565b92508282101561462b5761462a61438f565b5b828203905092915050565b7f426574207374617465206d757374206265204157414954494e4720746f20726560008201527f71756573742066756c66696c6c6d656e742e0000000000000000000000000000602082015250565b6000614692603283613af8565b915061469d82614636565b604082019050919050565b600060208201905081810360008301526146c181614685565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006146fe601683613af8565b9150614709826146c8565b602082019050919050565b6000602082019050818103600083015261472d816146f1565b9050919050565b7f4f6e6c7920436861696e6c696e6b436c69656e742063616e2066756c66696c6c600082015250565b600061476a602083613af8565b915061477582614734565b602082019050919050565b600060208201905081810360008301526147998161475d565b9050919050565b6000815190506147af81613c22565b92915050565b6000602082840312156147cb576147ca6138f1565b5b60006147d9848285016147a0565b91505092915050565b60006040820190506147f76000830185613f3d565b6148046020830184613d7c565b9392505050565b61481481614002565b811461481f57600080fd5b50565b6000815190506148318161480b565b92915050565b60006020828403121561484d5761484c6138f1565b5b600061485b84828501614822565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b600061489a601283613af8565b91506148a582614864565b602082019050919050565b600060208201905081810360008301526148c98161488d565b9050919050565b7f42657420737461746520697320616c726561647920434c4f53454420666f722060008201527f7468697320666978747572652e00000000000000000000000000000000000000602082015250565b600061492c602d83613af8565b9150614937826148d0565b604082019050919050565b6000602082019050818103600083015261495b8161491f565b9050919050565b60008190508160005260206000209050919050565b600081546149848161425f565b61498e81866140b9565b945060018216600081146149a957600181146149ba576149ed565b60ff198316865281860193506149ed565b6149c385614962565b60005b838110156149e5578154818901526001820191506020810190506149c6565b838801955050505b50505092915050565b6000614a028285614977565b9150614a0e82846140c4565b91508190509392505050565b60006040820190508181036000830152614a348185613b3c565b90508181036020830152614a488184613b3c565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000614a87601683613af8565b9150614a9282614a51565b602082019050919050565b60006020820190508181036000830152614ab681614a7a565b9050919050565b60006040820190508181036000830152614ad78185613b3c565b9050614ae66020830184614065565b9392505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000614b49602883613af8565b9150614b5482614aed565b604082019050919050565b60006020820190508181036000830152614b7881614b3c565b9050919050565b60006060820190508181036000830152614b998186613b3c565b90508181036020830152614bad8185613b3c565b9050614bbc6040830184613d7c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614bfe82613c18565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c3157614c3061438f565b5b600182019050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000614c72601783613af8565b9150614c7d82614c3c565b602082019050919050565b60006020820190508181036000830152614ca181614c65565b9050919050565b60006040820190508181036000830152614cc28185613b3c565b9050614cd16020830184613d7c565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614d0d81614cd8565b82525050565b600081519050919050565b600082825260208201905092915050565b6000614d3a82614d13565b614d448185614d1e565b9350614d54818560208601613b09565b614d5d81613905565b840191505092915050565b600061010082019050614d7e600083018b613f3d565b614d8b602083018a613d7c565b614d98604083018961408f565b614da56060830188613f3d565b614db26080830187614d04565b614dbf60a0830186613d7c565b614dcc60c0830185613d7c565b81810360e0830152614dde8184614d2f565b90509998505050505050505050565b7f4572726f72206f6e206669787475726520000000000000000000000000000000815250565b7f3a20556e6b6e6f776e20726573756c742066726f6d204150493a200000000000815250565b6000614e4482614ded565b601182019150614e5482856140c4565b9150614e5f82614e13565b601b82019150614e6f82846140c4565b91508190509392505050565b7f4669787475726520626574207374617465206973206e6f742046554c46494c4c60008201527f494e472e00000000000000000000000000000000000000000000000000000000602082015250565b6000614ed7602483613af8565b9150614ee282614e7b565b604082019050919050565b60006020820190508181036000830152614f0681614eca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f4782613c18565b9150614f5283613c18565b925082614f6257614f61614f0d565b5b828204905092915050565b6000614f7882613c18565b9150614f8383613c18565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614fbc57614fbb61438f565b5b828202905092915050565b6000614fd282613c18565b9150614fdd83613c18565b925082614fed57614fec614f0d565b5b828206905092915050565b6000819050919050565b600061501d61501861501384613f0b565b614ff8565b613f0b565b9050919050565b600061502f82615002565b9050919050565b600061504182615024565b9050919050565b60008160601b9050919050565b600061506082615048565b9050919050565b600061507282615055565b9050919050565b61508a61508582615036565b615067565b82525050565b6000819050919050565b6150ab6150a682613c18565b615090565b82525050565b60006150bd8285615079565b6014820191506150cd828461509a565b6020820191508190509392505050565b60006060820190506150f26000830186613f3d565b6150ff6020830185613d7c565b81810360408301526151118184614d2f565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000615177602383613af8565b91506151828261511b565b604082019050919050565b600060208201905081810360008301526151a68161516a565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115615204578086048111156151e0576151df61438f565b5b60018516156151ef5780820291505b80810290506151fd856151ad565b94506151c4565b94509492505050565b60008261521d57600190506152d9565b8161522b57600090506152d9565b8160018114615241576002811461524b5761527a565b60019150506152d9565b60ff84111561525d5761525c61438f565b5b8360020a9150848211156152745761527361438f565b5b506152d9565b5060208310610133831016604e8410600b84101617156152af5782820a9050838111156152aa576152a961438f565b5b6152d9565b6152bc84848460016151ba565b925090508184048111156152d3576152d261438f565b5b81810290505b9392505050565b60006152eb82613c18565b91506152f683613c18565b92506153237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461520d565b90509291505056fea26469706673582212200abe2198281c31393548d1e9e4f934df4e24bbe00ebfd7d67a8b855876b58cc464736f6c634300080c00334465706c6f79696e6720612053706f72747342657474696e6720776974682073706f727473206f7261636c65205552493a",
  "deployedBytecode": "0x60806040526004361061014a5760003560e01c80638dc654a2116100b6578063edb160701161006f578063edb1607014610480578063ef40efde146104bd578063f2fde38b146104e6578063f7c60c0c1461050f578063fbe913931461053a578063ffebd172146105775761014a565b80638dc654a21461035c5780639c3feeb714610373578063aa0660901461039e578063b148cdf1146103db578063c8fe739c14610406578063cbef85c2146104435761014a565b8063649677e111610108578063649677e1146102605780636e2a3a841461028b57806379ba5097146102b457806380b71dca146102cb57806384f4614e146102f45780638da5cb5b146103315761014a565b8062e1a75b1461014f57806301ec29c914610178578063401bf083146101a157806340364d11146101de5780635e524319146101fa57806362098ff714610223575b600080fd5b34801561015b57600080fd5b5061017660048036038101906101719190613a41565b6105b4565b005b34801561018457600080fd5b5061019f600480360381019061019a9190613a41565b610653565b005b3480156101ad57600080fd5b506101c860048036038101906101c39190613ac0565b6106fc565b6040516101d59190613b75565b60405180910390f35b6101f860048036038101906101f39190613bbc565b61079c565b005b34801561020657600080fd5b50610221600480360381019061021c9190613c4e565b610ad6565b005b34801561022f57600080fd5b5061024a60048036038101906102459190613cbd565b610f50565b6040516102579190613d61565b60405180910390f35b34801561026c57600080fd5b50610275610f7a565b6040516102829190613d8b565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190613a41565b610f80565b005b3480156102c057600080fd5b506102c961101f565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190613da6565b6111b6565b005b34801561030057600080fd5b5061031b60048036038101906103169190613a41565b611256565b6040516103289190613ef0565b60405180910390f35b34801561033d57600080fd5b506103466112fe565b6040516103539190613f4c565b60405180910390f35b34801561036857600080fd5b50610371611328565b005b34801561037f57600080fd5b50610388611475565b6040516103959190613f4c565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c09190613f93565b61149b565b6040516103d29190613d8b565b60405180910390f35b3480156103e757600080fd5b506103f06114e3565b6040516103fd9190613b75565b60405180910390f35b34801561041257600080fd5b5061042d60048036038101906104289190613c4e565b611571565b60405161043a9190613f4c565b60405180910390f35b34801561044f57600080fd5b5061046a60048036038101906104659190613f93565b6115e2565b604051610477919061401d565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a29190613a41565b611634565b6040516104b49190613d8b565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190613a41565b611662565b005b3480156104f257600080fd5b5061050d60048036038101906105089190614038565b61170b565b005b34801561051b57600080fd5b5061052461171f565b6040516105319190613b75565b60405180910390f35b34801561054657600080fd5b50610561600480360381019061055c9190613a41565b6117ad565b60405161056e9190614074565b60405180910390f35b34801561058357600080fd5b5061059e60048036038101906105999190613a41565b6117e3565b6040516105ab919061409e565b60405180910390f35b600160048111156105c8576105c7613cea565b5b6015826040516105d891906140f5565b908152602001604051809103902060009054906101000a900460ff16600481111561060657610605613cea565b5b1415610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e9061417e565b60405180910390fd5b61065081611a16565b50565b61065b611a87565b6002600481111561066f5761066e613cea565b5b60158260405161067f91906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156106ad576106ac613cea565b5b14156106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590614210565b60405180910390fd5b6106f9816002611b19565b50565b6017602052806000526040600020600091509050805461071b9061425f565b80601f01602080910402602001604051908101604052809291908181526020018280546107479061425f565b80156107945780601f1061076957610100808354040283529160200191610794565b820191906000526020600020905b81548152906001019060200180831161077757829003601f168201915b505050505081565b6107a582611b9c565b600160048111156107b9576107b8613cea565b5b6015836040516107c991906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156107f7576107f6613cea565b5b14610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90614303565b60405180910390fd5b600e5434101561087c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108739061436f565b60405180910390fd5b3460138360405161088d91906140f5565b908152602001604051809103902060008360028111156108b0576108af613cea565b5b60028111156108c2576108c1613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461091c91906143be565b9250508190555060118260405161093391906140f5565b9081526020016040518091039020600082600281111561095657610955613cea565b5b600281111561096857610967613cea565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016012836040516109e991906140f5565b90815260200160405180910390206000836002811115610a0c57610a0b613cea565b5b6002811115610a1e57610a1d613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1a48cf6315f5f44cf8ac3a5105296caf8a73f64b40f9a6b7cbf8ba65ca930fd4833484604051610aca93929190614414565b60405180910390a25050565b60008111610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b109061449e565b60405180910390fd5b610b2283611b9c565b60016004811115610b3657610b35613cea565b5b601584604051610b4691906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115610b7457610b73613cea565b5b14610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab9061450a565b60405180910390fd5b6000601384604051610bc691906140f5565b90815260200160405180910390206000846002811115610be957610be8613cea565b5b6002811115610bfb57610bfa613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8390614576565b60405180910390fd5b80821115610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc6906145e2565b60405180910390fd5b8181610cdb9190614602565b601385604051610ceb91906140f5565b90815260200160405180910390206000856002811115610d0e57610d0d613cea565b5b6002811115610d2057610d1f613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601385604051610d8191906140f5565b90815260200160405180910390206000856002811115610da457610da3613cea565b5b6002811115610db657610db5613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610eb1576000601285604051610e1991906140f5565b90815260200160405180910390206000856002811115610e3c57610e3b613cea565b5b6002811115610e4e57610e4d613cea565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610ef7573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f3b118062ef97715cdb7fc34e6b3bc6bf1c6ddbbbbc4e8d6f13eff984080d08858486604051610f4293929190614414565b60405180910390a250505050565b600d8160038110610f6057600080fd5b60209182820401919006915054906101000a900460ff1681565b600e5481565b60026004811115610f9457610f93613cea565b5b601582604051610fa491906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115610fd257610fd1613cea565b5b1415611013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100a906146a8565b60405180910390fd5b61101c81611a16565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690614714565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123d90614780565b60405180910390fd5b611251838383611d03565b505050565b61125e61375d565b604051806060016040528060158460405161127991906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156112a7576112a6613cea565b5b815260200160405180606001604052806112c2866000611f84565b81526020016112d2866001611f84565b81526020016112e2866002611f84565b81525081526020016112f484336121dd565b8152509050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611330611a87565b600061133a6123b9565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113929190613f4c565b602060405180830381865afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d391906147b5565b6040518363ffffffff1660e01b81526004016113f09291906147e2565b6020604051808303816000875af115801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190614837565b611472576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611469906148b0565b60405180910390fd5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60138380516020810182018051848252602083016020850120818352809550505050505060205281600052604060002060205280600052604060002060009250925050505481565b600980546114f09061425f565b80601f016020809104026020016040519081016040528092919081815260200182805461151c9061425f565b80156115695780601f1061153e57610100808354040283529160200191611569565b820191906000526020600020905b81548152906001019060200180831161154c57829003601f168201915b505050505081565b60118380516020810182018051848252602083016020850120818352809550505050505060205281600052604060002081815481106115af57600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601283805160208101820180518482526020830160208501208183528095505050505050602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b6016818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b61166a611a87565b6000600481111561167e5761167d613cea565b5b60158260405161168e91906140f5565b908152602001604051809103902060009054906101000a900460ff1660048111156116bc576116bb613cea565b5b14156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f490614942565b60405180910390fd5b611708816000611b19565b50565b611713611a87565b61171c816123e3565b50565b600c805461172c9061425f565b80601f01602080910402602001604051908101604052809291908181526020018280546117589061425f565b80156117a55780601f1061177a576101008083540402835291602001916117a5565b820191906000526020600020905b81548152906001019060200180831161178857829003601f168201915b505050505081565b6015818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6000806117fa600a54306380b71dca60e01b612512565b90506118686040518060400160405280600981526020017f75726c526573756c7400000000000000000000000000000000000000000000008152506009856040516020016118499291906149f6565b604051602081830303815290604052836125439092919063ffffffff16565b6118e76040518060400160405280600a81526020017f70617468526573756c74000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f526573756c740000000000000000000000000000000000000000000000000000815250836125439092919063ffffffff16565b6119666040518060400160405280600b81526020017f706174684b69636b6f66660000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4b69636b6f666600000000000000000000000000000000000000000000000000815250836125439092919063ffffffff16565b61197281600b54612576565b915050919050565b611a128282604051602401611990929190614a1a565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125ad565b5050565b6000611a21826117e3565b905081601760008381526020019081526020016000209080519060200190611a4a92919061379c565b50807fc36e98a50a4fd27efe75de15a0e1c01e0ccba2218c7871d3c836905bfe1bc3e183604051611a7b9190613b75565b60405180910390a25050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0e90614a9d565b60405180910390fd5b565b80601583604051611b2a91906140f5565b908152602001604051809103902060006101000a81548160ff02191690836004811115611b5a57611b59613cea565b5b02179055507fe10ba6722d7a7a91bf343a0f8e5b026910dbc4a2ebca276930dff31703c59a708282604051611b90929190614abd565b60405180910390a15050565b6000601682604051611bae91906140f5565b90815260200160405180910390205490506000811415611bce5750611d00565b60006004811115611be257611be1613cea565b5b601583604051611bf291906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115611c2057611c1f613cea565b5b148015611c3a575060105481611c369190614602565b4211155b8015611c535750600f5481611c4f9190614602565b4210155b8015611c625750600060105414155b15611c7357611c72826001611b19565b5b60016004811115611c8757611c86613cea565b5b601583604051611c9791906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115611cc557611cc4613cea565b5b148015611cde575060105481611cdb9190614602565b42115b8015611ced5750600060105414155b15611cfe57611cfd826002611b19565b5b505b50565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9c90614b5f565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a26000601760008681526020019081526020016000208054611e289061425f565b80601f0160208091040260200160405190810160405280929190818152602001828054611e549061425f565b8015611ea15780601f10611e7657610100808354040283529160200191611ea1565b820191906000526020600020905b815481529060010190602001808311611e8457829003601f168201915b50505050509050847f6125286ff7c688816bd3feb69d5aa9e9720624656a8478a8f351fa81a0d66004828686604051611edc93929190614b7f565b60405180910390a2611eee81846125d6565b611ef781611b9c565b60026004811115611f0b57611f0a613cea565b5b601582604051611f1b91906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115611f4957611f48613cea565b5b148015611f57575060008451115b15611f7d57611f67816003611b19565b611f71818561265c565b611f7c816004611b19565b5b5050505050565b60008060005b601185604051611f9a91906140f5565b90815260200160405180910390206000856002811115611fbd57611fbc613cea565b5b6002811115611fcf57611fce613cea565b5b8152602001908152602001600020805490508110156121d2576000601186604051611ffa91906140f5565b9081526020016040518091039020600086600281111561201d5761201c613cea565b5b600281111561202f5761202e613cea565b5b8152602001908152602001600020828154811061204f5761204e614bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060128660405161208c91906140f5565b908152602001604051809103902060008660028111156120af576120ae613cea565b5b60028111156120c1576120c0613cea565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156121be5760138660405161212f91906140f5565b9081526020016040518091039020600086600281111561215257612151613cea565b5b600281111561216457612163613cea565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836121bb91906143be565b92505b5080806121ca90614bf3565b915050611f8a565b508091505092915050565b6121e5613822565b604051806060016040528060138560405161220091906140f5565b9081526020016040518091039020600080600281111561222357612222613cea565b5b600281111561223557612234613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200160138560405161229691906140f5565b90815260200160405180910390206000600160028111156122ba576122b9613cea565b5b60028111156122cc576122cb613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200160138560405161232d91906140f5565b908152602001604051809103902060006002808111156123505761234f613cea565b5b600281111561236257612361613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815250905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244990614c88565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b61251a613843565b612522613843565b61253985858584612702909392919063ffffffff16565b9150509392505050565b61255a8284608001516127b290919063ffffffff16565b6125718184608001516127b290919063ffffffff16565b505050565b60006125a5600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846127d7565b905092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6016826040516125e691906140f5565b9081526020016040518091039020548114612658578060168360405161260c91906140f5565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a3828260405161264f929190614ca8565b60405180910390a15b5050565b600061266883836128a3565b90506060818160008151811061268157612680614bc4565b5b6020026020010190600281111561269b5761269a613cea565b5b908160028111156126af576126ae613cea565b5b8152505060006126be83612a2e565b905060006126cc8684612b7c565b905060006126da8784612b7c565b9050600081836126ea91906143be565b90506126f888878584612bda565b5050505050505050565b61270a613843565b61271a8560800151610100613108565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6127bf8260038351613172565b6127d281836132f790919063ffffffff16565b505050565b60008060045490506001816127ec91906143be565b6004819055506000634042994660e01b60008087600001513089604001518760018c608001516000015160405160240161282d989796959493929190614d68565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061289886838684613319565b925050509392505050565b60006128e4826040518060400160405280600481526020017f484f4d45000000000000000000000000000000000000000000000000000000008152506134ae565b156128f25760009050612a28565b612931826040518060400160405280600481526020017f44524157000000000000000000000000000000000000000000000000000000008152506134ae565b1561293f5760019050612a28565b61297e826040518060400160405280600481526020017f41574159000000000000000000000000000000000000000000000000000000008152506134ae565b1561298c5760029050612a28565b600083836040516020016129a1929190614e39565b60405160208183030381529060405290507f2a2c16a3ce1dea0db612b14a8fdc9a8d316acc87914b4d66440d119b41e8615f84826040516129e3929190614a1a565b60405180910390a1806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1f9190613b75565b60405180910390fd5b92915050565b60606000600267ffffffffffffffff811115612a4d57612a4c613916565b5b604051908082528060200260200182016040528015612a7b5781602001602082028036833780820191505090505b5090506000805b6003811015612b7157846002811115612a9e57612a9d613cea565b5b600d8260038110612ab257612ab1614bc4565b5b602091828204019190069054906101000a900460ff166002811115612ada57612ad9613cea565b5b14612b5e57600d8160038110612af357612af2614bc4565b5b602091828204019190069054906101000a900460ff16838381518110612b1c57612b1b614bc4565b5b60200260200101906002811115612b3657612b35613cea565b5b90816002811115612b4a57612b49613cea565b5b81525050600182612b5b91906143be565b91505b8080612b6990614bf3565b915050612a82565b508192505050919050565b60008060005b8351811015612bcf57612baf85858381518110612ba257612ba1614bc4565b5b6020026020010151611f84565b82612bba91906143be565b91508080612bc790614bf3565b915050612b82565b508091505092915050565b60036004811115612bee57612bed613cea565b5b601585604051612bfe91906140f5565b908152602001604051809103902060009054906101000a900460ff166004811115612c2c57612c2b613cea565b5b14612c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6390614eed565b60405180910390fd5b60005b601185604051612c7f91906140f5565b90815260200160405180910390206000856002811115612ca257612ca1613cea565b5b6002811115612cb457612cb3613cea565b5b815260200190815260200160002080549050811015613101576000601186604051612cdf91906140f5565b90815260200160405180910390206000866002811115612d0257612d01613cea565b5b6002811115612d1457612d13613cea565b5b81526020019081526020016000208281548110612d3457612d33614bc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601286604051612d7191906140f5565b90815260200160405180910390206000866002811115612d9457612d93613cea565b5b6002811115612da657612da5613cea565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156130ed576000601387604051612e1691906140f5565b90815260200160405180910390206000876002811115612e3957612e38613cea565b5b6002811115612e4b57612e4a613cea565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008585612ea79190614f3c565b82612eb29190614f6d565b905080601489604051612ec591906140f5565b908152602001604051809103902060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601389604051612f2691906140f5565b90815260200160405180910390206000896002811115612f4957612f48613cea565b5b6002811115612f5b57612f5a613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601289604051612fbc91906140f5565b90815260200160405180910390206000896002811115612fdf57612fde613cea565b5b6002811115612ff157612ff0613cea565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613099573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd89836040516130e2929190614ca8565b60405180910390a250505b5080806130f990614bf3565b915050612c6f565b5050505050565b6131106138b0565b600060208361311f9190614fc7565b1461314b576020826131319190614fc7565b602061313d9190614602565b8261314891906143be565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff16116131a9576131a38160058460ff16901b60ff16178461350790919063ffffffff16565b506132f2565b60ff8167ffffffffffffffff16116131ff576131d8601860058460ff16901b178461350790919063ffffffff16565b506131f98167ffffffffffffffff166001856135279092919063ffffffff16565b506132f1565b61ffff8167ffffffffffffffff16116132565761322f601960058460ff16901b178461350790919063ffffffff16565b506132508167ffffffffffffffff166002856135279092919063ffffffff16565b506132f0565b63ffffffff8167ffffffffffffffff16116132af57613288601a60058460ff16901b178461350790919063ffffffff16565b506132a98167ffffffffffffffff166004856135279092919063ffffffff16565b506132ef565b6132cc601b60058460ff16901b178461350790919063ffffffff16565b506132ed8167ffffffffffffffff166008856135279092919063ffffffff16565b505b5b5b5b505050565b6132ff6138b0565b61331183846000015151848551613549565b905092915050565b6000308460405160200161332e9291906150b1565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401613424939291906150dd565b6020604051808303816000875af1158015613443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134679190614837565b6134a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349d9061518d565b60405180910390fd5b949350505050565b6000816040516020016134c191906140f5565b60405160208183030381529060405280519060200120836040516020016134e891906140f5565b6040516020818303038152906040528051906020012014905092915050565b61350f6138b0565b61351f8384600001515184613638565b905092915050565b61352f6138b0565b61354084856000015151858561368f565b90509392505050565b6135516138b0565b825182111561355f57600080fd5b8460200151828561357091906143be565b11156135a5576135a48560026135958860200151888761359091906143be565b61371d565b61359f9190614f6d565b613739565b5b6000808651805187602083010193508088870111156135c45787860182525b60208701925050505b6020841061360b57805182526020826135e691906143be565b91506020816135f591906143be565b90506020846136049190614602565b93506135cd565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6136406138b0565b836020015183106136665761366584600286602001516136609190614f6d565b613739565b5b8351805160208583010184815381861415613682576001820183525b5050508390509392505050565b6136976138b0565b846020015184836136a891906143be565b11156136d0576136cf85600286856136c091906143be565b6136ca9190614f6d565b613739565b5b60006001836101006136e291906152e0565b6136ec9190614602565b9050855183868201018583198251161781528151858801111561370f5784870182525b505085915050949350505050565b60008183111561372f57829050613733565b8190505b92915050565b60008260000151905061374c8383613108565b5061375783826132f7565b50505050565b60405180606001604052806000600481111561377c5761377b613cea565b5b8152602001613789613822565b8152602001613796613822565b81525090565b8280546137a89061425f565b90600052602060002090601f0160209004810192826137ca5760008555613811565b82601f106137e357805160ff1916838001178555613811565b82800160010185558215613811579182015b828111156138105782518255916020019190600101906137f5565b5b50905061381e91906138ca565b5090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081526020016138aa6138b0565b81525090565b604051806040016040528060608152602001600081525090565b5b808211156138e35760008160009055506001016138cb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61394e82613905565b810181811067ffffffffffffffff8211171561396d5761396c613916565b5b80604052505050565b60006139806138e7565b905061398c8282613945565b919050565b600067ffffffffffffffff8211156139ac576139ab613916565b5b6139b582613905565b9050602081019050919050565b82818337600083830152505050565b60006139e46139df84613991565b613976565b905082815260208101848484011115613a00576139ff613900565b5b613a0b8482856139c2565b509392505050565b600082601f830112613a2857613a276138fb565b5b8135613a388482602086016139d1565b91505092915050565b600060208284031215613a5757613a566138f1565b5b600082013567ffffffffffffffff811115613a7557613a746138f6565b5b613a8184828501613a13565b91505092915050565b6000819050919050565b613a9d81613a8a565b8114613aa857600080fd5b50565b600081359050613aba81613a94565b92915050565b600060208284031215613ad657613ad56138f1565b5b6000613ae484828501613aab565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b27578082015181840152602081019050613b0c565b83811115613b36576000848401525b50505050565b6000613b4782613aed565b613b518185613af8565b9350613b61818560208601613b09565b613b6a81613905565b840191505092915050565b60006020820190508181036000830152613b8f8184613b3c565b905092915050565b60038110613ba457600080fd5b50565b600081359050613bb681613b97565b92915050565b60008060408385031215613bd357613bd26138f1565b5b600083013567ffffffffffffffff811115613bf157613bf06138f6565b5b613bfd85828601613a13565b9250506020613c0e85828601613ba7565b9150509250929050565b6000819050919050565b613c2b81613c18565b8114613c3657600080fd5b50565b600081359050613c4881613c22565b92915050565b600080600060608486031215613c6757613c666138f1565b5b600084013567ffffffffffffffff811115613c8557613c846138f6565b5b613c9186828701613a13565b9350506020613ca286828701613ba7565b9250506040613cb386828701613c39565b9150509250925092565b600060208284031215613cd357613cd26138f1565b5b6000613ce184828501613c39565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613d2a57613d29613cea565b5b50565b6000819050613d3b82613d19565b919050565b6000613d4b82613d2d565b9050919050565b613d5b81613d40565b82525050565b6000602082019050613d766000830184613d52565b92915050565b613d8581613c18565b82525050565b6000602082019050613da06000830184613d7c565b92915050565b600080600060608486031215613dbf57613dbe6138f1565b5b6000613dcd86828701613aab565b935050602084013567ffffffffffffffff811115613dee57613ded6138f6565b5b613dfa86828701613a13565b9250506040613e0b86828701613c39565b9150509250925092565b60058110613e2657613e25613cea565b5b50565b6000819050613e3782613e15565b919050565b6000613e4782613e29565b9050919050565b613e5781613e3c565b82525050565b613e6681613c18565b82525050565b606082016000820151613e826000850182613e5d565b506020820151613e956020850182613e5d565b506040820151613ea86040850182613e5d565b50505050565b60e082016000820151613ec46000850182613e4e565b506020820151613ed76020850182613e6c565b506040820151613eea6080850182613e6c565b50505050565b600060e082019050613f056000830184613eae565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f3682613f0b565b9050919050565b613f4681613f2b565b82525050565b6000602082019050613f616000830184613f3d565b92915050565b613f7081613f2b565b8114613f7b57600080fd5b50565b600081359050613f8d81613f67565b92915050565b600080600060608486031215613fac57613fab6138f1565b5b600084013567ffffffffffffffff811115613fca57613fc96138f6565b5b613fd686828701613a13565b9350506020613fe786828701613ba7565b9250506040613ff886828701613f7e565b9150509250925092565b60008115159050919050565b61401781614002565b82525050565b6000602082019050614032600083018461400e565b92915050565b60006020828403121561404e5761404d6138f1565b5b600061405c84828501613f7e565b91505092915050565b61406e81613e3c565b82525050565b60006020820190506140896000830184614065565b92915050565b61409881613a8a565b82525050565b60006020820190506140b3600083018461408f565b92915050565b600081905092915050565b60006140cf82613aed565b6140d981856140b9565b93506140e9818560208601613b09565b80840191505092915050565b600061410182846140c4565b915081905092915050565b7f42657420737461746520697320616c7265616479204f50454e20666f7220746860008201527f697320666978747572652e000000000000000000000000000000000000000000602082015250565b6000614168602b83613af8565b91506141738261410c565b604082019050919050565b600060208201905081810360008301526141978161415b565b9050919050565b7f42657420737461746520697320616c7265616479204157414954494e4720666f60008201527f72207468697320666978747572652e0000000000000000000000000000000000602082015250565b60006141fa602f83613af8565b91506142058261419e565b604082019050919050565b60006020820190508181036000830152614229816141ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061427757607f821691505b6020821081141561428b5761428a614230565b5b50919050565b7f426574206163746976697479206973206e6f74206f70656e20666f722074686960008201527f7320666978747572652e00000000000000000000000000000000000000000000602082015250565b60006142ed602a83613af8565b91506142f882614291565b604082019050919050565b6000602082019050818103600083015261431c816142e0565b9050919050565b7f416d6f756e742069732062656c6f7720656e7472616e6365206665652e000000600082015250565b6000614359601d83613af8565b915061436482614323565b602082019050919050565b600060208201905081810360008301526143888161434c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143c982613c18565b91506143d483613c18565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144095761440861438f565b5b828201905092915050565b6000606082019050818103600083015261442e8186613b3c565b905061443d6020830185613d7c565b61444a6040830184613d52565b949350505050565b7f416d6f756e742073686f756c6420657863656564207a65726f2e000000000000600082015250565b6000614488601a83613af8565b915061449382614452565b602082019050919050565b600060208201905081810360008301526144b78161447b565b9050919050565b7f46697874757265206973206e6f7420696e204f70656e2073746174652e000000600082015250565b60006144f4601d83613af8565b91506144ff826144be565b602082019050919050565b60006020820190508181036000830152614523816144e7565b9050919050565b7f4e6f207374616b65206f6e207468697320616464726573732d726573756c742e600082015250565b6000614560602083613af8565b915061456b8261452a565b602082019050919050565b6000602082019050818103600083015261458f81614553565b9050919050565b7f43757272656e74207374616b6520746f6f206c6f772e00000000000000000000600082015250565b60006145cc601683613af8565b91506145d782614596565b602082019050919050565b600060208201905081810360008301526145fb816145bf565b9050919050565b600061460d82613c18565b915061461883613c18565b92508282101561462b5761462a61438f565b5b828203905092915050565b7f426574207374617465206d757374206265204157414954494e4720746f20726560008201527f71756573742066756c66696c6c6d656e742e0000000000000000000000000000602082015250565b6000614692603283613af8565b915061469d82614636565b604082019050919050565b600060208201905081810360008301526146c181614685565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006146fe601683613af8565b9150614709826146c8565b602082019050919050565b6000602082019050818103600083015261472d816146f1565b9050919050565b7f4f6e6c7920436861696e6c696e6b436c69656e742063616e2066756c66696c6c600082015250565b600061476a602083613af8565b915061477582614734565b602082019050919050565b600060208201905081810360008301526147998161475d565b9050919050565b6000815190506147af81613c22565b92915050565b6000602082840312156147cb576147ca6138f1565b5b60006147d9848285016147a0565b91505092915050565b60006040820190506147f76000830185613f3d565b6148046020830184613d7c565b9392505050565b61481481614002565b811461481f57600080fd5b50565b6000815190506148318161480b565b92915050565b60006020828403121561484d5761484c6138f1565b5b600061485b84828501614822565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b600061489a601283613af8565b91506148a582614864565b602082019050919050565b600060208201905081810360008301526148c98161488d565b9050919050565b7f42657420737461746520697320616c726561647920434c4f53454420666f722060008201527f7468697320666978747572652e00000000000000000000000000000000000000602082015250565b600061492c602d83613af8565b9150614937826148d0565b604082019050919050565b6000602082019050818103600083015261495b8161491f565b9050919050565b60008190508160005260206000209050919050565b600081546149848161425f565b61498e81866140b9565b945060018216600081146149a957600181146149ba576149ed565b60ff198316865281860193506149ed565b6149c385614962565b60005b838110156149e5578154818901526001820191506020810190506149c6565b838801955050505b50505092915050565b6000614a028285614977565b9150614a0e82846140c4565b91508190509392505050565b60006040820190508181036000830152614a348185613b3c565b90508181036020830152614a488184613b3c565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000614a87601683613af8565b9150614a9282614a51565b602082019050919050565b60006020820190508181036000830152614ab681614a7a565b9050919050565b60006040820190508181036000830152614ad78185613b3c565b9050614ae66020830184614065565b9392505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000614b49602883613af8565b9150614b5482614aed565b604082019050919050565b60006020820190508181036000830152614b7881614b3c565b9050919050565b60006060820190508181036000830152614b998186613b3c565b90508181036020830152614bad8185613b3c565b9050614bbc6040830184613d7c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614bfe82613c18565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c3157614c3061438f565b5b600182019050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000614c72601783613af8565b9150614c7d82614c3c565b602082019050919050565b60006020820190508181036000830152614ca181614c65565b9050919050565b60006040820190508181036000830152614cc28185613b3c565b9050614cd16020830184613d7c565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614d0d81614cd8565b82525050565b600081519050919050565b600082825260208201905092915050565b6000614d3a82614d13565b614d448185614d1e565b9350614d54818560208601613b09565b614d5d81613905565b840191505092915050565b600061010082019050614d7e600083018b613f3d565b614d8b602083018a613d7c565b614d98604083018961408f565b614da56060830188613f3d565b614db26080830187614d04565b614dbf60a0830186613d7c565b614dcc60c0830185613d7c565b81810360e0830152614dde8184614d2f565b90509998505050505050505050565b7f4572726f72206f6e206669787475726520000000000000000000000000000000815250565b7f3a20556e6b6e6f776e20726573756c742066726f6d204150493a200000000000815250565b6000614e4482614ded565b601182019150614e5482856140c4565b9150614e5f82614e13565b601b82019150614e6f82846140c4565b91508190509392505050565b7f4669787475726520626574207374617465206973206e6f742046554c46494c4c60008201527f494e472e00000000000000000000000000000000000000000000000000000000602082015250565b6000614ed7602483613af8565b9150614ee282614e7b565b604082019050919050565b60006020820190508181036000830152614f0681614eca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f4782613c18565b9150614f5283613c18565b925082614f6257614f61614f0d565b5b828204905092915050565b6000614f7882613c18565b9150614f8383613c18565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614fbc57614fbb61438f565b5b828202905092915050565b6000614fd282613c18565b9150614fdd83613c18565b925082614fed57614fec614f0d565b5b828206905092915050565b6000819050919050565b600061501d61501861501384613f0b565b614ff8565b613f0b565b9050919050565b600061502f82615002565b9050919050565b600061504182615024565b9050919050565b60008160601b9050919050565b600061506082615048565b9050919050565b600061507282615055565b9050919050565b61508a61508582615036565b615067565b82525050565b6000819050919050565b6150ab6150a682613c18565b615090565b82525050565b60006150bd8285615079565b6014820191506150cd828461509a565b6020820191508190509392505050565b60006060820190506150f26000830186613f3d565b6150ff6020830185613d7c565b81810360408301526151118184614d2f565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000615177602383613af8565b91506151828261511b565b604082019050919050565b600060208201905081810360008301526151a68161516a565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115615204578086048111156151e0576151df61438f565b5b60018516156151ef5780820291505b80810290506151fd856151ad565b94506151c4565b94509492505050565b60008261521d57600190506152d9565b8161522b57600090506152d9565b8160018114615241576002811461524b5761527a565b60019150506152d9565b60ff84111561525d5761525c61438f565b5b8360020a9150848211156152745761527361438f565b5b506152d9565b5060208310610133831016604e8410600b84101617156152af5782820a9050838111156152aa576152a961438f565b5b6152d9565b6152bc84848460016151ba565b925090508184048111156152d3576152d261438f565b5b81810290505b9392505050565b60006152eb82613c18565b91506152f683613c18565b92506153237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461520d565b90509291505056fea26469706673582212200abe2198281c31393548d1e9e4f934df4e24bbe00ebfd7d67a8b855876b58cc464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestMultipleParameters(string)": {
        "notice": "Request mutiple parameters from the oracle in a single transaction"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "withdrawLink()": {
        "notice": "Allow withdraw of Link tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3713,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "chainlink",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3715,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "sportsOracleURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 3717,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "jobId",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 3719,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3721,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureResult",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2596,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betTypes",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_enum(BetType)2519)3_storage"
      },
      {
        "astId": 2601,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "entranceFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2610,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betAdvanceTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2615,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betCutOffTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2623,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "historicalBetters",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 2632,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "activeBetters",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 2641,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "amounts",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2647,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "obligations",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2652,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "bettingState",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_enum(BettingState)2525)"
      },
      {
        "astId": 2656,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureToKickoffTime",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2660,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "requestToFixture",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(BetType)2519)3_storage": {
        "base": "t_enum(BetType)2519",
        "encoding": "inplace",
        "label": "enum SportsBetting.BetType[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BetType)2519": {
        "encoding": "inplace",
        "label": "enum SportsBetting.BetType",
        "numberOfBytes": "1"
      },
      "t_enum(BettingState)2525": {
        "encoding": "inplace",
        "label": "enum SportsBetting.BettingState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(BetType)2519",
        "label": "mapping(enum SportsBetting.BetType => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(BetType)2519",
        "label": "mapping(enum SportsBetting.BetType => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(BetType)2519",
        "label": "mapping(enum SportsBetting.BetType => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_enum(BettingState)2525)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum SportsBetting.BettingState)",
        "numberOfBytes": "32",
        "value": "t_enum(BettingState)2525"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBetting.BetType => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBetting.BetType => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBetting.BetType => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}