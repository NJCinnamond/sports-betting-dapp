{
  "address": "0x36A958633f35e8263ED138B73292a5D8e6ff1Fd8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sportsOracleURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_jobId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetCommissionPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "BetPayoutFulfillmentError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBettingLib.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBettingLib.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BettingState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "BettingStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoffTime",
          "type": "uint256"
        }
      ],
      "name": "KickoffTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoff",
          "type": "uint256"
        }
      ],
      "name": "RequestFixtureKickoffFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "RequestFixtureResultFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "RequestedFixtureKickoff",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "RequestedFixtureResult",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeBetters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "awaitBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betAdvanceTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betCutOffTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betTypes",
      "outputs": [
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "bettingState",
      "outputs": [
        {
          "internalType": "enum SportsBetting.BettingState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "closeBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "commissionMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fixtureResult",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "fixtureToKickoffTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "fulfillBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getEnrichedFixtureData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SportsBetting.BettingState",
              "name": "fixtureState",
              "type": "uint8"
            },
            {
              "internalType": "uint256[3]",
              "name": "total",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256[3]",
              "name": "user",
              "type": "uint256[3]"
            }
          ],
          "internalType": "struct SportsBetting.FixtureEnrichment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "historicalBetters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "historicalBettersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "openBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payouts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_ko",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillFixtureKickoffTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillFixtureResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureKickoffTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureKickoffTimeParameter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestFixtureResultParameter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestKickoffToFixture",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestResultToFixture",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sportsOracleURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBettingLib.BetType",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToLink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x222f99b200e74130edc1e854693ade1850274d7fdc59290b6285d6c816c40127",
  "receipt": {
    "to": null,
    "from": "0x07401CC21ccA4Af0f4a50f7dfcCE4c795F671cD7",
    "contractAddress": "0x36A958633f35e8263ED138B73292a5D8e6ff1Fd8",
    "transactionIndex": 73,
    "gasUsed": "4246788",
    "logsBloom": "0x
    "blockHash": "0x38e65c09c92e1c70a2a3fea38237e3e69b7d0e86d2704c7997503672ecff2091",
    "transactionHash": "0x222f99b200e74130edc1e854693ade1850274d7fdc59290b6285d6c816c40127",
    "logs": [],
    "blockNumber": 8393902,
    "cumulativeGasUsed": "20320741",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://1vyuff64d9.execute-api.us-east-1.amazonaws.com/dev/premier-league/fixtures/",
    "0xcc79157eb46f5624204f47ab42b3906caa40eab7",
    "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "ca98366cc7314957b8c012c72f05aeeb",
    "100000000000000000",
    1
  ],
  "numDeployments": 3,
  "solcInputHash": "990e09722dec59ae9f412fcbdbfd6118",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sportsOracleURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_jobId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetCommissionPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BetPayoutFulfillmentError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BettingStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoffTime\",\"type\":\"uint256\"}],\"name\":\"KickoffTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoff\",\"type\":\"uint256\"}],\"name\":\"RequestFixtureKickoffFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RequestFixtureResultFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"RequestedFixtureKickoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"RequestedFixtureResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeBetters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"awaitBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betAdvanceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betCutOffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betTypes\",\"outputs\":[{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bettingState\",\"outputs\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"closeBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"commissionMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixtureResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"fixtureToKickoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"fulfillBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEnrichedFixtureData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"fixtureState\",\"type\":\"uint8\"},{\"internalType\":\"uint256[3]\",\"name\":\"total\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"user\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct SportsBetting.FixtureEnrichment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalBetters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"historicalBettersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"openBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_ko\",\"type\":\"uint256\"}],\"name\":\"rawFulfillFixtureKickoffTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"rawFulfillFixtureResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureKickoffTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureKickoffTimeParameter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestFixtureResultParameter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestKickoffToFixture\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestResultToFixture\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportsOracleURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBettingLib.BetType\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"requestFixtureKickoffTimeParameter(string)\":{\"notice\":\"Request fixture kickoff time from the oracle in a single transaction\"},\"requestFixtureResultParameter(string)\":{\"notice\":\"Request fixture result from the oracle in a single transaction\"},\"withdrawLink(uint256)\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SportsBetting.sol\":\"SportsBetting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"contracts/SportsBetting.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./mock/IERC20.sol\\\";\\r\\nimport \\\"./SportsOracleConsumer.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"./SportsBettingLib.sol\\\";\\r\\n\\r\\ncontract SportsBetting is SportsOracleConsumer {\\r\\n\\r\\n    enum BettingState {\\r\\n        CLOSED,\\r\\n        OPENING,\\r\\n        OPEN,\\r\\n        AWAITING,\\r\\n        FULFILLING,\\r\\n        FULFILLED\\r\\n    }\\r\\n\\r\\n    struct FixtureEnrichment {\\r\\n        BettingState fixtureState;\\r\\n        uint256[3] total;\\r\\n        uint256[3] user;\\r\\n    }\\r\\n\\r\\n    event BettingStateChanged(string fixtureID, BettingState state);\\r\\n\\r\\n    event BetStaked(\\r\\n        address indexed better,\\r\\n        string fixtureID,\\r\\n        uint256 amount,\\r\\n        SportsBettingLib.BetType betType\\r\\n    );\\r\\n\\r\\n    event BetUnstaked(\\r\\n        address indexed better,\\r\\n        string fixtureID,\\r\\n        uint256 amount,\\r\\n        SportsBettingLib.BetType betType\\r\\n    );\\r\\n\\r\\n    event BetPayoutFulfillmentError(string fixtureID, string reason);\\r\\n\\r\\n    event BetPayout(address indexed better, string fixtureID, uint256 amount);\\r\\n\\r\\n    event BetCommissionPayout(string indexed fixtureID, uint256 amount);\\r\\n\\r\\n    event KickoffTimeUpdated(string fixtureID, uint256 kickoffTime);\\r\\n\\r\\n    SportsBettingLib.BetType[4] public betTypes;\\r\\n\\r\\n    // Contract owner\\r\\n    address public owner;\\r\\n\\r\\n    // Entrance fee of 0.0001 DAI (10^14 Wei)\\r\\n    uint256 public entranceFee = 10**14;\\r\\n\\r\\n    // DAI Stablecoin address\\r\\n    address public daiAddress;\\r\\n\\r\\n    // Commission rate taken by contract owner for each payout as a percentage\\r\\n    uint256 public commissionRate;\\r\\n\\r\\n    // Max time before a fixture kick-off that a bet can be placed in seconds\\r\\n    // A fixture bet state will not move to OPEN before a time to the left of the\\r\\n    // ko time equal to betAdvanceTime\\r\\n    uint256 public betAdvanceTime = 7 * 24 * 60 * 60;\\r\\n\\r\\n    // Cut off time for bets before KO time in seconds\\r\\n    // i.e. all bets must be placed at time t where t < koTime - betCutOffTime\\r\\n    uint256 public betCutOffTime = 90 * 60; // 90 minutes\\r\\n\\r\\n    // Commission total taken by contract owner indexed by fixture\\r\\n    mapping(string => uint256) public commissionMap;\\r\\n\\r\\n    // Map each fixture ID to a map of BetType to an array of all addresses that have ever placed\\r\\n    // bets for that fixture-result pair\\r\\n    mapping(string => mapping(SportsBettingLib.BetType => address[])) public historicalBetters;\\r\\n\\r\\n    // We want to store unique addresses in historicalBetters mapping.\\r\\n    // Solidity has no native set type, so we keep a mapping of address to fixture type to bet type\\r\\n    // to index in historicalBetters\\r\\n    // We only append an address to historicalBetters if it does not have an existing index\\r\\n    mapping(string => mapping(SportsBettingLib.BetType => mapping(address => uint256)))\\r\\n        public historicalBettersIndex;\\r\\n\\r\\n    // activeBetters represents all addresses who currently have an amount staked on a fixture-result\\r\\n    // The mapping(address => bool) pattern allows us to set address to true or false if an address\\r\\n    // stakes/unstakes for that bet, and allows safer 'contains' methods on the betters\\r\\n    mapping(string => mapping(SportsBettingLib.BetType => mapping(address => bool)))\\r\\n        public activeBetters;\\r\\n\\r\\n    // Map each fixture ID to a map of BetType to a map of address to uint representing the amount of wei bet on that result\\r\\n    mapping(string => mapping(SportsBettingLib.BetType => mapping(address => uint256)))\\r\\n        public amounts;\\r\\n\\r\\n    // Map each fixture ID to a map of address to amount the ctx paid the address owner for that fixture\\r\\n    mapping(string => mapping(address => uint256)) public payouts;\\r\\n\\r\\n    // Map each fixture ID to whether betting is open for this fixture\\r\\n    mapping(string => BettingState) public bettingState;\\r\\n\\r\\n    // Map each fixture ID to unix timestamp for its kickoff time\\r\\n    mapping(string => uint256) public fixtureToKickoffTime;\\r\\n\\r\\n    // Map oracle request ID for fixture kickoff time request to corresponding fixture ID\\r\\n    mapping(bytes32 => string) public requestKickoffToFixture;\\r\\n\\r\\n    // Map oracle request ID for fixture result request to corresponding fixture ID\\r\\n    mapping(bytes32 => string) public requestResultToFixture;\\r\\n\\r\\n    constructor(\\r\\n        string memory _sportsOracleURI,\\r\\n        address _oracle,\\r\\n        address _dai,\\r\\n        address _link,\\r\\n        string memory _jobId,\\r\\n        uint256 _fee,\\r\\n        uint256 _commissionRate\\r\\n    ) SportsOracleConsumer(_sportsOracleURI, _oracle, _link, _jobId, _fee) {\\r\\n        betTypes[0] = SportsBettingLib.BetType.DEFAULT;\\r\\n        betTypes[1] = SportsBettingLib.BetType.HOME;\\r\\n        betTypes[2] = SportsBettingLib.BetType.DRAW;\\r\\n        betTypes[3] = SportsBettingLib.BetType.AWAY;\\r\\n\\r\\n        owner = msg.sender;\\r\\n        commissionRate = _commissionRate;\\r\\n        daiAddress = _dai;\\r\\n    }\\r\\n\\r\\n    function initializeHistoricalBetters(string memory fixtureID) internal {\\r\\n        for (uint256 i = 0; i < betTypes.length; i++) {\\r\\n            initializeHistoricalBettersForBetType(fixtureID, betTypes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeHistoricalBettersForBetType(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType\\r\\n    ) internal {\\r\\n        // This code initializes our map for historical betters in fixture\\r\\n        // It ensures we can reliably track only unique betters for fixture\\r\\n        historicalBetters[fixtureID][betType] = [address(0x0)];\\r\\n    }\\r\\n\\r\\n    function isHistoricalBetter(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType,\\r\\n        address staker\\r\\n    ) internal view returns (bool) {\\r\\n        // address 0x0 is not valid if pos is 0 is not in the array\\r\\n        if (\\r\\n            staker != address(0x0) &&\\r\\n            historicalBettersIndex[fixtureID][betType][staker] > 0\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addHistoricalBetter(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType,\\r\\n        address staker\\r\\n    ) internal {\\r\\n        if (!isHistoricalBetter(fixtureID, betType, staker)) {\\r\\n            historicalBettersIndex[fixtureID][betType][\\r\\n                staker\\r\\n            ] = historicalBetters[fixtureID][betType].length;\\r\\n            historicalBetters[fixtureID][betType].push(staker);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getEnrichedFixtureData(string memory fixtureID, address user)\\r\\n        public\\r\\n        view\\r\\n        returns (FixtureEnrichment memory)\\r\\n    {\\r\\n        return\\r\\n            FixtureEnrichment({\\r\\n                fixtureState: bettingState[fixtureID],\\r\\n                user: getStakeSummaryForUser(fixtureID, user),\\r\\n                total: [\\r\\n                    getTotalAmountBetOnFixtureOutcome(fixtureID, SportsBettingLib.BetType.HOME),\\r\\n                    getTotalAmountBetOnFixtureOutcome(fixtureID, SportsBettingLib.BetType.DRAW),\\r\\n                    getTotalAmountBetOnFixtureOutcome(fixtureID, SportsBettingLib.BetType.AWAY)\\r\\n                ]\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function getStakeSummaryForUser(string memory fixtureID, address user)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[3] memory)\\r\\n    {\\r\\n        return [\\r\\n            amounts[fixtureID][SportsBettingLib.BetType.HOME][user],\\r\\n            amounts[fixtureID][SportsBettingLib.BetType.DRAW][user],\\r\\n            amounts[fixtureID][SportsBettingLib.BetType.AWAY][user]\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    // Wrapper for setting fixture betting state and emitting event\\r\\n    function setFixtureBettingState(string memory fixtureID, BettingState state)\\r\\n        internal\\r\\n    {\\r\\n        bettingState[fixtureID] = state;\\r\\n        emit BettingStateChanged(fixtureID, state);\\r\\n\\r\\n        // If we open a fixture, intialize ctx state vars\\r\\n        if (state == BettingState.OPEN) {\\r\\n            initializeHistoricalBetters(fixtureID);\\r\\n        }\\r\\n        // EDGE CASE: We close betting for a fixture that has bets placed, i.e. in the case\\r\\n        // of a postponed fixture or an errant opening\\r\\n        // We need to pay back the betters who placed bets\\r\\n        else if (state == BettingState.CLOSED) {\\r\\n            handleClosingBetsForFixture(fixtureID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // closeBetForFixture calls shouldHaveCorrectBettingState which, if kickoff time\\r\\n    // is in a certain position relative to current timestamp, will close the bet\\r\\n    function closeBetForFixture(string memory fixtureID) public {\\r\\n        require(\\r\\n            bettingState[fixtureID] != BettingState.CLOSED,\\r\\n            \\\"Bet state is already CLOSED.\\\"\\r\\n        );\\r\\n        shouldHaveCorrectBettingState(fixtureID);\\r\\n    }\\r\\n\\r\\n    // openBetForFixture makes an API call to oracle. It is expected that this\\r\\n    // call will return the kickoff_time and the fulfillFixtureKickoffTime func\\r\\n    // will handle the state change to open\\r\\n    // This is to ensure we don't open a bet until we have its KO time and\\r\\n    // know that it advanced enough in the future\\r\\n    function openBetForFixture(string memory fixtureID) public {\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.CLOSED || bettingState[fixtureID] == BettingState.OPENING,\\r\\n            \\\"State must be CLOSED or OPENING.\\\"\\r\\n        );\\r\\n        setFixtureBettingState(fixtureID, BettingState.OPENING);\\r\\n        requestFixtureKickoffTime(fixtureID);\\r\\n    }\\r\\n\\r\\n    // Ideally the betting state will change from OPEN -> AWAITING\\r\\n    // by virtue of a bet being placed too close to KO time, however\\r\\n    // in the event this doesn't happen, this function can be called to\\r\\n    // attempt to change state to AWAITING\\r\\n    // This also helps resolve bugs whereby the bet is marked as fulfilled\\r\\n    // when it is not\\r\\n    function awaitBetForFixture(string memory fixtureID) public {\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.OPEN,\\r\\n            \\\"Bet state must be OPEN.\\\"\\r\\n        );\\r\\n        shouldHaveCorrectBettingState(fixtureID);\\r\\n    }\\r\\n\\r\\n    // This function handles betting state transitions respective to bet kickoff time\\r\\n    // In general, a bet should be\\r\\n    // CLOSED       if time < kickoff - betAdvanceTime\\r\\n    // OPEN         if kickoff - betAdvanceTime <= time <= ko - betCutOffTime\\r\\n    // AWAITING     if time > ko - betCutOffTime\\r\\n    function shouldHaveCorrectBettingState(string memory fixtureID) internal {\\r\\n        uint256 ko = fixtureToKickoffTime[fixtureID];\\r\\n\\r\\n        // CLOSE if no kickoff time present\\r\\n        if (ko == 0) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.CLOSED);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // OPENING -> CLOSED\\r\\n        // If fixture is OPENING, it will become CLOSED if\\r\\n        // current time is to the right of kickoff time - betCutOffTime\\r\\n        // OR\\r\\n        // current time is to the left of kickoff time - betAdvanceTime\\r\\n        if (\\r\\n            bettingState[fixtureID] == BettingState.OPENING &&\\r\\n            (block.timestamp > ko - betCutOffTime ||\\r\\n                block.timestamp < ko - betAdvanceTime)\\r\\n        ) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.CLOSED);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // OPEN/AWAITING -> CLOSED\\r\\n        // If fixture is OPEN or AWAITING, it will become CLOSED if\\r\\n        // current time is more than betAdvanceTime to the left of ko\\r\\n        if (\\r\\n            (bettingState[fixtureID] == BettingState.OPEN ||\\r\\n                bettingState[fixtureID] == BettingState.AWAITING) &&\\r\\n            block.timestamp < ko - betAdvanceTime\\r\\n        ) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.CLOSED);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // OPENING -> OPEN\\r\\n        // If a bet is OPENING, it can be OPENed if\\r\\n        // current time is more than betCutOffTime before kickoff time AND\\r\\n        // current time is less than betAdvanceTime before kickoff time\\r\\n        if (\\r\\n            bettingState[fixtureID] == BettingState.OPENING &&\\r\\n            block.timestamp <= ko - betCutOffTime &&\\r\\n            block.timestamp >= ko - betAdvanceTime\\r\\n        ) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.OPEN);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // OPEN -> AWAITING\\r\\n        // If a bet is OPEN, it becomes AWAITING if\\r\\n        // current time is more than betCutOffTime to the right of kickoff time\\r\\n        if (\\r\\n            bettingState[fixtureID] == BettingState.OPEN &&\\r\\n            block.timestamp > ko - betCutOffTime &&\\r\\n            betCutOffTime != 0\\r\\n        ) {\\r\\n            setFixtureBettingState(fixtureID, BettingState.AWAITING);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fulfillBetForFixture(string memory fixtureID) public {\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.AWAITING \\r\\n            || bettingState[fixtureID] == BettingState.FULFILLING,\\r\\n            \\\"Must be AWAITING or FULFILLING.\\\"\\r\\n        );\\r\\n        setFixtureBettingState(fixtureID, BettingState.FULFILLING);\\r\\n        requestFixtureResult(fixtureID);\\r\\n    }\\r\\n\\r\\n    function stake(string memory fixtureID, SportsBettingLib.BetType betType, uint256 amount) public {\\r\\n        shouldHaveCorrectBettingState(fixtureID);\\r\\n        require(\\r\\n            betType != SportsBettingLib.BetType.DEFAULT,\\r\\n            \\\"This BetType is not permitted.\\\"\\r\\n        );\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.OPEN,\\r\\n            \\\"Bet activity is not open.\\\"\\r\\n        );\\r\\n        require(amount >= entranceFee, \\\"Amount is below entrance fee.\\\");\\r\\n\\r\\n        // Transfer DAI tokens\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n        require(\\r\\n            dai.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n\\r\\n        amounts[fixtureID][betType][msg.sender] += amount;\\r\\n        addHistoricalBetter(fixtureID, betType, msg.sender);\\r\\n        activeBetters[fixtureID][betType][msg.sender] = true;\\r\\n        emit BetStaked(msg.sender, fixtureID, amount, betType);\\r\\n    }\\r\\n\\r\\n    // Removes all stake in fixtureID-BetType combo\\r\\n    function unstake(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType,\\r\\n        uint256 amount\\r\\n    ) public {\\r\\n        require(amount > 0, \\\"Amount should exceed zero.\\\");\\r\\n        shouldHaveCorrectBettingState(fixtureID);\\r\\n        require(\\r\\n            bettingState[fixtureID] == BettingState.OPEN,\\r\\n            \\\"Fixture is not in Open state.\\\"\\r\\n        );\\r\\n        handleUnstake(fixtureID, betType, amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    // Execute business logic to unstake parameter amount to staker\\r\\n    function handleUnstake(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType,\\r\\n        uint256 amount,\\r\\n        address staker\\r\\n    ) internal {\\r\\n        removeStakeState(fixtureID, betType, amount, staker);\\r\\n\\r\\n        // Transfer DAI to msg sender\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n        require(dai.transfer(msg.sender, amount), \\\"Unable to transfer\\\");\\r\\n\\r\\n        emit BetUnstaked(staker, fixtureID, amount, betType);\\r\\n    }\\r\\n\\r\\n    function removeStakeState(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType,\\r\\n        uint256 amount,\\r\\n        address staker\\r\\n    ) internal {\\r\\n        uint256 amountStaked = amounts[fixtureID][betType][staker];\\r\\n        require(amountStaked > 0, \\\"No stake on this address-result.\\\");\\r\\n        require(amount <= amountStaked, \\\"Current stake too low.\\\");\\r\\n\\r\\n        // Update stake amount\\r\\n        amounts[fixtureID][betType][staker] = amountStaked - amount;\\r\\n\\r\\n        // If non-partial unstake, caller is no longer an active staker\\r\\n        if (amounts[fixtureID][betType][staker] <= 0) {\\r\\n            activeBetters[fixtureID][betType][staker] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function requestFixtureKickoffTime(string memory fixtureID) public {\\r\\n        bytes32 requestID = requestFixtureKickoffTimeParameter(fixtureID);\\r\\n        requestKickoffToFixture[requestID] = fixtureID;\\r\\n        emit RequestedFixtureKickoff(requestID, fixtureID);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureKickoffTime(bytes32 _requestId, uint256 _ko)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        string memory fixtureID = requestKickoffToFixture[_requestId];\\r\\n        emit RequestFixtureKickoffFulfilled(_requestId, fixtureID, _ko);\\r\\n\\r\\n        updateKickoffTime(fixtureID, _ko);\\r\\n        shouldHaveCorrectBettingState(fixtureID);\\r\\n    }\\r\\n\\r\\n    function updateKickoffTime(string memory fixtureID, uint256 _ko) internal {\\r\\n        if (_ko != fixtureToKickoffTime[fixtureID]) {\\r\\n            fixtureToKickoffTime[fixtureID] = _ko;\\r\\n            emit KickoffTimeUpdated(fixtureID, _ko);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function requestFixtureResult(string memory fixtureID) public {\\r\\n        bytes32 requestID = requestFixtureResultParameter(fixtureID);\\r\\n        requestResultToFixture[requestID] = fixtureID;\\r\\n        emit RequestedFixtureResult(requestID, fixtureID);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureResult(bytes32 _requestId, uint256 _result)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        string memory fixtureID = requestResultToFixture[_requestId];\\r\\n        emit RequestFixtureResultFulfilled(_requestId, fixtureID, _result);\\r\\n\\r\\n        // Only action on fixture result if we are in FULFILLING\\r\\n        if (bettingState[fixtureID] == BettingState.FULFILLING) {\\r\\n            bool success = updateFixtureResult(fixtureID, _result);\\r\\n            if (success) {\\r\\n                // Set fixture state to FULFILLED to terminate workflow\\r\\n                setFixtureBettingState(fixtureID, BettingState.FULFILLED);\\r\\n            } else {\\r\\n                // Set fixture state to AWAITING so we can retry Payout flow\\r\\n                setFixtureBettingState(fixtureID, BettingState.AWAITING);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateFixtureResult(string memory fixtureID, uint256 _result)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        SportsBettingLib.BetType result = SportsBettingLib.getFixtureResultFromAPIResponse(_result);\\r\\n        if (result == SportsBettingLib.BetType.DEFAULT) {\\r\\n            string memory errorString = string.concat(\\r\\n                \\\"Error on fixture \\\",\\r\\n                fixtureID,\\r\\n                \\\": Unknown fixture result from API\\\"\\r\\n            );\\r\\n            emit BetPayoutFulfillmentError(fixtureID, errorString);\\r\\n        }\\r\\n\\r\\n        SportsBettingLib.BetType[] memory winningOutcomes = new SportsBettingLib.BetType[](1);\\r\\n        winningOutcomes[0] = result;\\r\\n\\r\\n        SportsBettingLib.BetType[] memory losingOutcomes = SportsBettingLib.getLosingFixtureOutcomes(result);\\r\\n\\r\\n        uint256 winningAmount = getTotalAmountBetOnFixtureOutcomes(\\r\\n            fixtureID,\\r\\n            winningOutcomes\\r\\n        );\\r\\n        uint256 losingAmount = getTotalAmountBetOnFixtureOutcomes(\\r\\n            fixtureID,\\r\\n            losingOutcomes\\r\\n        );\\r\\n        uint256 totalAmount = winningAmount + losingAmount;\\r\\n\\r\\n        // If winningAmount > 0, we have winners we can pay out to\\r\\n        if (winningAmount > 0) {\\r\\n            fulfillFixturePayoutObligations(\\r\\n                fixtureID,\\r\\n                result,\\r\\n                winningAmount,\\r\\n                totalAmount\\r\\n            );\\r\\n        } else {\\r\\n            // Else total amount is paid to owner\\r\\n            payouts[fixtureID][owner] += totalAmount;\\r\\n\\r\\n            IERC20 dai = IERC20(daiAddress);\\r\\n            dai.transfer(owner, totalAmount);\\r\\n\\r\\n            emit BetPayout(owner, fixtureID, totalAmount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // fulfillFixturePayoutObligations calculates the obligations (amount we owe to each\\r\\n    // winning staker for this fixture)\\r\\n    function fulfillFixturePayoutObligations(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType result,\\r\\n        uint256 winningAmount,\\r\\n        uint256 totalAmount\\r\\n    ) internal {\\r\\n        if (bettingState[fixtureID] != BettingState.FULFILLING) {\\r\\n            revert(\\\"Bet state not FULFILLING.\\\");\\r\\n        }\\r\\n\\r\\n        IERC20 dai = IERC20(daiAddress);\\r\\n\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < historicalBetters[fixtureID][result].length;\\r\\n            i++\\r\\n        ) {\\r\\n            address better = historicalBetters[fixtureID][result][i];\\r\\n            if (activeBetters[fixtureID][result][better]) {\\r\\n                uint256 betterAmount = amounts[fixtureID][result][better];\\r\\n\\r\\n                // Calculate better's share of winnings\\r\\n                uint256 betterObligation = betterAmount *\\r\\n                    (totalAmount / winningAmount);\\r\\n\\r\\n                // Handle commission\\r\\n                uint256 commission = (betterObligation * commissionRate) / 100;\\r\\n                commissionMap[fixtureID] += commission;\\r\\n                betterObligation -= commission;\\r\\n\\r\\n                // Pay better\\r\\n                payouts[fixtureID][better] = betterObligation;\\r\\n                \\r\\n                dai.transfer(better, betterObligation);\\r\\n                emit BetPayout(better, fixtureID, betterObligation);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Pay commission to owner\\r\\n        dai.transfer(owner, commissionMap[fixtureID]);\\r\\n        emit BetCommissionPayout(fixtureID, commissionMap[fixtureID]);\\r\\n    }\\r\\n\\r\\n    // If betting is closed but we have stakes, we pay betters back\\r\\n    // For each bet type for fixture, refund all stakers who staked on that bet type\\r\\n    function handleClosingBetsForFixture(string memory fixtureID) internal {\\r\\n        for (uint256 i = 0; i < betTypes.length; i++) {\\r\\n            handleClosingBetsForFixtureBetType(fixtureID, betTypes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // For a given fixture and bet type, refund all stakers their full stake amount\\r\\n    function handleClosingBetsForFixtureBetType(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType betType\\r\\n    ) internal {\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < historicalBetters[fixtureID][betType].length;\\r\\n            i++\\r\\n        ) {\\r\\n            address better = historicalBetters[fixtureID][betType][i];\\r\\n            if (activeBetters[fixtureID][betType][better]) {\\r\\n                uint256 betterAmount = amounts[fixtureID][betType][better];\\r\\n                handleUnstake(fixtureID, betType, betterAmount, better);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalAmountBetOnFixtureOutcomes(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType[] memory outcomes\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\r\\n            amount += getTotalAmountBetOnFixtureOutcome(fixtureID, outcomes[i]);\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getTotalAmountBetOnFixtureOutcome(\\r\\n        string memory fixtureID,\\r\\n        SportsBettingLib.BetType outcome\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < historicalBetters[fixtureID][outcome].length;\\r\\n            i++\\r\\n        ) {\\r\\n            address better = historicalBetters[fixtureID][outcome][i];\\r\\n            if (activeBetters[fixtureID][outcome][better]) {\\r\\n                amount += amounts[fixtureID][outcome][better];\\r\\n            }\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x61908581804b364323cdb3c8e032503d18a5bbcf22b823becd5cca7b94f5a7bd\",\"license\":\"Unlicense\"},\"contracts/SportsBettingLib.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary SportsBettingLib {\\r\\n    // Define DEFAULT BetType = 0. \\r\\n    // DEFAULT BetType is actually invalid and acts a placeholder to catch erroneous\\r\\n    // betType entries, as Solidity interprets null values as 0.\\r\\n    enum BetType {\\r\\n        DEFAULT,\\r\\n        HOME,\\r\\n        DRAW,\\r\\n        AWAY\\r\\n    }\\r\\n\\r\\n    function getFixtureResultFromAPIResponse(\\r\\n        uint256 _result\\r\\n    ) external pure returns (BetType) {\\r\\n        if (_result == uint256(BetType.HOME)) {\\r\\n            return BetType.HOME;\\r\\n        } else if (_result == uint256(BetType.DRAW)) {\\r\\n            return BetType.DRAW;\\r\\n        } else if (_result == uint256(BetType.AWAY)) {\\r\\n            return BetType.AWAY;\\r\\n        }\\r\\n        return BetType.DEFAULT;\\r\\n    }\\r\\n\\r\\n    function getLosingFixtureOutcomes(BetType winningOutcome)\\r\\n        external\\r\\n        pure\\r\\n        returns (BetType[] memory)\\r\\n    {\\r\\n        BetType[] memory losingOutcomes = new BetType[](2);\\r\\n\\r\\n        uint256 losingOutcomesIndex = 0;\\r\\n        for (uint256 i = 0; i <= uint256(BetType.AWAY); i++) {\\r\\n            if (BetType(i) != winningOutcome && BetType(i) != BetType.DEFAULT) {\\r\\n                losingOutcomes[losingOutcomesIndex] = BetType(i);\\r\\n                losingOutcomesIndex += 1;\\r\\n            }\\r\\n        }\\r\\n        return losingOutcomes;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcf6ed2d0d2188e3da118ddc38d7c0b656e8458edf7a2aabf60141b3f5e50db7c\",\"license\":\"Unlicense\"},\"contracts/SportsOracleConsumer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\r\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\\r\\n */\\r\\n\\r\\nabstract contract SportsOracleConsumer is ChainlinkClient {\\r\\n    using Chainlink for Chainlink.Request;\\r\\n\\r\\n    address public chainlink;\\r\\n    string public sportsOracleURI;\\r\\n\\r\\n    bytes32 private jobId;\\r\\n    uint256 private fee;\\r\\n\\r\\n    // multiple params returned in a single oracle response\\r\\n    string public fixtureResult;\\r\\n\\r\\n    mapping(address => uint256) public userToLink;\\r\\n\\r\\n    event RequestedFixtureKickoff(bytes32 indexed requestId, string fixtureID);\\r\\n\\r\\n    event RequestedFixtureResult(bytes32 indexed requestId, string fixtureID);\\r\\n\\r\\n    event RequestFixtureKickoffFulfilled(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID,\\r\\n        uint256 kickoff\\r\\n    );\\r\\n\\r\\n    event RequestFixtureResultFulfilled(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID,\\r\\n        uint256 result\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        string memory _sportsOracleURI,\\r\\n        address _oracle,\\r\\n        address _link,\\r\\n        string memory _jobId,\\r\\n        uint256 _fee\\r\\n    ) {\\r\\n        sportsOracleURI = _sportsOracleURI;\\r\\n        setChainlinkToken(_link);\\r\\n        setChainlinkOracle(_oracle);\\r\\n        chainlink = _oracle;\\r\\n        jobId = stringToBytes32(_jobId);\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    modifier hasLinkFee() {\\r\\n        require(userToLink[msg.sender] >= fee, \\\"You haven't sent enough LINK.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source)\\r\\n        private\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // solhint-disable-line no-inline-assembly\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request fixture kickoff time from the oracle in a single transaction\\r\\n     */\\r\\n    function requestFixtureKickoffTimeParameter(string memory fixtureID)\\r\\n        public\\r\\n        hasLinkFee\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // User spends LINK value = fee on this request\\r\\n        userToLink[msg.sender] -= fee;\\r\\n\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.rawFulfillFixtureKickoffTime.selector\\r\\n        );\\r\\n        req.add(\\\"get\\\", string.concat(sportsOracleURI, fixtureID));\\r\\n        req.add(\\\"path\\\", \\\"0,ko\\\");\\r\\n        req.addInt(\\\"times\\\", 1);\\r\\n        return sendChainlinkRequest(req, fee); // MWR API.\\r\\n    }\\r\\n\\r\\n    function rawFulfillFixtureKickoffTime(bytes32 _requestId, uint256 _ko)\\r\\n        public\\r\\n        recordChainlinkFulfillment(_requestId)\\r\\n    {\\r\\n        require(msg.sender == chainlink, \\\"Only ChainlinkClient can fulfill\\\");\\r\\n        fulfillFixtureKickoffTime(_requestId, _ko);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureKickoffTime(bytes32 _requestId, uint256 _ko)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Request fixture result from the oracle in a single transaction\\r\\n     */\\r\\n    function requestFixtureResultParameter(string memory fixtureID)\\r\\n        public\\r\\n        hasLinkFee\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // User spends LINK value = fee on this request\\r\\n        userToLink[msg.sender] -= fee;\\r\\n\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.rawFulfillFixtureResult.selector\\r\\n        );\\r\\n        req.add(\\\"get\\\", string.concat(sportsOracleURI, fixtureID));\\r\\n        req.add(\\\"path\\\", \\\"0,result\\\");\\r\\n        req.addInt(\\\"multiply\\\", 1);\\r\\n        return sendChainlinkRequest(req, fee); // MWR API.\\r\\n    }\\r\\n\\r\\n    function rawFulfillFixtureResult(bytes32 _requestId, uint256 _result)\\r\\n        public\\r\\n        recordChainlinkFulfillment(_requestId)\\r\\n    {\\r\\n        require(msg.sender == chainlink, \\\"Only ChainlinkClient can fulfill\\\");\\r\\n        fulfillFixtureResult(_requestId, _result);\\r\\n    }\\r\\n\\r\\n    function fulfillFixtureResult(bytes32 _requestId, uint256 _result)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    // Anybody can transfer LINK to ctx\\r\\n    function transferLink(uint256 amount) public {\\r\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n        require(\\r\\n            link.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n\\r\\n        userToLink[msg.sender] += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allow withdraw of Link tokens from the contract\\r\\n     */\\r\\n    function withdrawLink(uint256 amount) public {\\r\\n        require(amount <= userToLink[msg.sender], \\\"You don't have enough link\\\");\\r\\n        userToLink[msg.sender] -= amount;\\r\\n\\r\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n        require(link.transfer(msg.sender, amount), \\\"Unable to transfer\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6726616eac42d1be2c724cc52b3790f419fd1ccc05fa4e03c6b62075f777c4cd\",\"license\":\"MIT\"},\"contracts/mock/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\",\"keccak256\":\"0xd49070e01df31c9f39ed67f7cb2844d842b5fc4c07048156f77f1ac06956a223\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600455655af3107a4000600e5562093a806011556115186012553480156200002d57600080fd5b506040516200489a3803806200489a8339810160408190526200005091620002d6565b868685858584600790805190602001906200006d92919062000146565b50600280546001600160a01b0319166001600160a01b038516179055600380546001600160a01b0319166001600160a01b038616179055600680546001600160a01b0319166001600160a01b038616179055620000ca8262000128565b6008556009555050600c805463ffffffff191663030201001790555050600d8054336001600160a01b031991821617909155601091909155600f80549091166001600160a01b03959095169490941790935550620003c89350505050565b805160009082906200013d5750600092915050565b50506020015190565b82805462000154906200038b565b90600052602060002090601f016020900481019282620001785760008555620001c3565b82601f106200019357805160ff1916838001178555620001c3565b82800160010185558215620001c3579182015b82811115620001c3578251825591602001919060010190620001a6565b50620001d1929150620001d5565b5090565b5b80821115620001d15760008155600101620001d6565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021457600080fd5b81516001600160401b0380821115620002315762000231620001ec565b604051601f8301601f19908116603f011681019082821181831017156200025c576200025c620001ec565b816040528381526020925086838588010111156200027957600080fd5b600091505b838210156200029d57858201830151818301840152908201906200027e565b83821115620002af5760008385830101525b9695505050505050565b80516001600160a01b0381168114620002d157600080fd5b919050565b600080600080600080600060e0888a031215620002f257600080fd5b87516001600160401b03808211156200030a57600080fd5b620003188b838c0162000202565b98506200032860208b01620002b9565b97506200033860408b01620002b9565b96506200034860608b01620002b9565b955060808a01519150808211156200035f57600080fd5b506200036e8a828b0162000202565b93505060a0880151915060c0880151905092959891949750929550565b600181811c90821680620003a057607f821691505b60208210811415620003c257634e487b7160e01b600052602260045260246000fd5b50919050565b6144c280620003d86000396000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c80638da5cb5b11610145578063cbef85c2116100bd578063ef40efde1161008c578063f6573b4f11610071578063f6573b4f146105de578063f7c60c0c14610609578063fbe913931461061157600080fd5b8063ef40efde146105b8578063f46dccf0146105cb57600080fd5b8063cbef85c214610513578063d8654c0814610567578063e37685ec1461057a578063edb160701461058d57600080fd5b8063aa06609011610114578063b148cdf1116100f9578063b148cdf1146104d8578063c40bc66b146104ed578063c8fe739c1461050057600080fd5b8063aa06609014610477578063abf949f8146104b857600080fd5b80638da5cb5b1461042b5780638e4821c51461043e5780639959a30f146104515780639c3feeb71461046457600080fd5b80635ec421a7116101d8578063793970e1116101a75780637c5e94051161018c5780637c5e9405146103ca5780637cc2c2f8146104055780638a71bfa81461041857600080fd5b8063793970e1146103a45780637a8042bd146103b757600080fd5b80635ec421a71461032757806362098ff714610368578063649677e1146103885780636e2a3a841461039157600080fd5b80632c3872751161022f5780634bfc91ee116102145780634bfc91ee146103025780635e5243191461030b5780635ea1d6f81461031e57600080fd5b80632c387275146102b757806339ea0791146102e257600080fd5b8062e1a75b1461026057806301ec29c914610275578063106246d8146102885780631d686ae4146102a4575b600080fd5b61027361026e366004613bc7565b61064c565b005b610273610283366004613bc7565b610729565b61029160115481565b6040519081526020015b60405180910390f35b6102916102b2366004613bc7565b6107b5565b600f546102ca906001600160a01b031681565b6040516001600160a01b03909116815260200161029b565b6102916102f0366004613c13565b600b6020526000908152604090205481565b61029160125481565b610273610319366004613c3b565b610979565b61029160105481565b610291610335366004613c95565b82516020818501810180516015825292820195820195909520919094528352600091825260408083209093528152205481565b61037b610376366004613cf5565b610a66565b60405161029b9190613d38565b610291600e5481565b61027361039f366004613bc7565b610a90565b6102736103b2366004613bc7565b610b61565b6102736103c5366004613cf5565b610bcd565b6102916103d8366004613d46565b81516020818401810180516018825292820194820194909420919093529091526000908152604090205481565b610273610413366004613cf5565b610d18565b610273610426366004613d94565b610e0f565b600d546102ca906001600160a01b031681565b61027361044c366004613c3b565b610f2f565b61027361045f366004613bc7565b611276565b6006546102ca906001600160a01b031681565b610291610485366004613c95565b82516020818501810180516017825292820195820195909520919094528352600091825260408083209093528152205481565b6104cb6104c6366004613d46565b6112d6565b60405161029b9190613de9565b6104e0611374565b60405161029b9190613e80565b6104e06104fb366004613cf5565b611402565b6102ca61050e366004613c3b565b61141b565b610557610521366004613c95565b82516020818501810180516016825292820195820195909520919094528352600091825260408083209093528152205460ff1681565b604051901515815260200161029b565b610291610575366004613bc7565b61146a565b610273610588366004613d94565b611601565b61029161059b366004613bc7565b8051602081830181018051601a8252928201919093012091525481565b6102736105c6366004613bc7565b611721565b6104e06105d9366004613cf5565b6117a5565b6102916105ec366004613bc7565b805160208183018101805160138252928201919093012091525481565b6104e06117be565b61063f61061f366004613bc7565b805160208183018101805160198252928201919093012091525460ff1681565b60405161029b9190613e93565b600060198260405161065e9190613ebd565b9081526040519081900360200190205460ff16600581111561068257610682613d0e565b14806106c15750600160198260405161069b9190613ebd565b9081526040519081900360200190205460ff1660058111156106bf576106bf613d0e565b145b6107125760405162461bcd60e51b815260206004820181905260248201527f5374617465206d75737420626520434c4f534544206f72204f50454e494e472e60448201526064015b60405180910390fd5b61071d8160016117cb565b61072681611276565b50565b600260198260405161073b9190613ebd565b9081526040519081900360200190205460ff16600581111561075f5761075f613d0e565b146107ac5760405162461bcd60e51b815260206004820152601760248201527f426574207374617465206d757374206265204f50454e2e0000000000000000006044820152606401610709565b61072681611889565b600954336000908152600b6020526040812054909111156108185760405162461bcd60e51b815260206004820152601d60248201527f596f7520686176656e27742073656e7420656e6f756768204c494e4b2e0000006044820152606401610709565b600954336000908152600b60205260408120805490919061083a908490613eef565b909155505060085460009061087090307fe37685ec00000000000000000000000000000000000000000000000000000000611ab1565b90506108bd6040518060400160405280600381526020016219d95d60ea1b8152506007856040516020016108a5929190613f3b565b60408051601f19818403018152919052839190611b44565b610923604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600481526020017f302c6b6f0000000000000000000000000000000000000000000000000000000081525083611b449092919063ffffffff16565b60408051808201909152600581527f74696d657300000000000000000000000000000000000000000000000000000060208201526109649082906001611b62565b61097081600954611b80565b9150505b919050565b600081116109c95760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e742073686f756c6420657863656564207a65726f2e0000000000006044820152606401610709565b6109d283611889565b60026019846040516109e49190613ebd565b9081526040519081900360200190205460ff166005811115610a0857610a08613d0e565b14610a555760405162461bcd60e51b815260206004820152601d60248201527f46697874757265206973206e6f7420696e204f70656e2073746174652e0000006044820152606401610709565b610a6183838333611b9a565b505050565b600c8160048110610a7657600080fd5b60209182820401919006915054906101000a900460ff1681565b6003601982604051610aa29190613ebd565b9081526040519081900360200190205460ff166005811115610ac657610ac6613d0e565b1480610b0557506004601982604051610adf9190613ebd565b9081526040519081900360200190205460ff166005811115610b0357610b03613d0e565b145b610b515760405162461bcd60e51b815260206004820152601f60248201527f4d757374206265204157414954494e47206f722046554c46494c4c494e472e006044820152606401610709565b610b5c8160046117cb565b610726815b6000610b6c8261146a565b6000818152601c602090815260409091208451929350610b909290918501906139d7565b50807f203eeb39bf08702855bb5830b3ec49ea10fb51bde91904739f7c0c3ab41776d583604051610bc19190613e80565b60405180910390a25050565b336000908152600b6020526040902054811115610c2c5760405162461bcd60e51b815260206004820152601a60248201527f596f7520646f6e2774206861766520656e6f756768206c696e6b0000000000006044820152606401610709565b336000908152600b602052604081208054839290610c4b908490613eef565b90915550506002546000906001600160a01b031660405163a9059cbb60e01b8152336004820152602481018490529091506001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190613fd9565b610d145760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b6044820152606401610709565b5050565b6000610d2c6002546001600160a01b031690565b6040516323b872dd60e01b8152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190613fd9565b610de75760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b6044820152606401610709565b336000908152600b602052604081208054849290610e06908490613ffb565b90915550505050565b60008281526005602052604090205482906001600160a01b03163314610e885760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604482015267081c995c5d595cdd60c21b6064820152608401610709565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26006546001600160a01b03163314610f255760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920436861696e6c696e6b436c69656e742063616e2066756c66696c6c6044820152606401610709565b610a618383611caa565b610f3883611889565b6000826003811115610f4c57610f4c613d0e565b1415610f9a5760405162461bcd60e51b815260206004820152601e60248201527f546869732042657454797065206973206e6f74207065726d69747465642e00006044820152606401610709565b6002601984604051610fac9190613ebd565b9081526040519081900360200190205460ff166005811115610fd057610fd0613d0e565b1461101d5760405162461bcd60e51b815260206004820152601960248201527f426574206163746976697479206973206e6f74206f70656e2e000000000000006044820152606401610709565b600e5481101561106f5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e742069732062656c6f7720656e7472616e6365206665652e0000006044820152606401610709565b600f546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b039091169081906323b872dd906064016020604051808303816000875af11580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190613fd9565b61112d5760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b6044820152606401610709565b8160178560405161113e9190613ebd565b9081526020016040518091039020600085600381111561116057611160613d0e565b600381111561117157611171613d0e565b81526020019081526020016000206000336001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111b19190613ffb565b909155506111c29050848433611dee565b60016016856040516111d49190613ebd565b908152602001604051809103902060008560038111156111f6576111f6613d0e565b600381111561120757611207613d0e565b815260208082019290925260409081016000908120338083529352819020805460ff19169315159390931790925590517f1a48cf6315f5f44cf8ac3a5105296caf8a73f64b40f9a6b7cbf8ba65ca930fd49061126890879086908890614013565b60405180910390a250505050565b6000611281826107b5565b6000818152601b6020908152604090912084519293506112a59290918501906139d7565b50807f45d732f7bcf8bc3eb58d8fd2fe72f5d05aa36dadc20e6c9989abd2a741d81cac83604051610bc19190613e80565b6112de613a5b565b60405180606001604052806019856040516112f99190613ebd565b9081526040519081900360200190205460ff16600581111561131d5761131d613d0e565b81526020016040518060600160405280611338876001611f4f565b8152602001611348876002611f4f565b8152602001611358876003611f4f565b905281526020016113698585612132565b905290505b92915050565b6007805461138190613f06565b80601f01602080910402602001604051908101604052809291908181526020018280546113ad90613f06565b80156113fa5780601f106113cf576101008083540402835291602001916113fa565b820191906000526020600020905b8154815290600101906020018083116113dd57829003601f168201915b505050505081565b601b602052600090815260409020805461138190613f06565b825160208185018101805160148252928201828701209290525260008281526040902080548290811061144d57600080fd5b6000918252602090912001546001600160a01b0316925083915050565b600954336000908152600b6020526040812054909111156114cd5760405162461bcd60e51b815260206004820152601d60248201527f596f7520686176656e27742073656e7420656e6f756768204c494e4b2e0000006044820152606401610709565b600954336000908152600b6020526040812080549091906114ef908490613eef565b909155505060085460009061152590307f8a71bfa800000000000000000000000000000000000000000000000000000000611ab1565b905061155a6040518060400160405280600381526020016219d95d60ea1b8152506007856040516020016108a5929190613f3b565b6115c0604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280600881526020017f302c726573756c7400000000000000000000000000000000000000000000000081525083611b449092919063ffffffff16565b60408051808201909152600881527f6d756c7469706c7900000000000000000000000000000000000000000000000060208201526109649082906001611b62565b60008281526005602052604090205482906001600160a01b0316331461167a5760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604482015267081c995c5d595cdd60c21b6064820152608401610709565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26006546001600160a01b031633146117175760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920436861696e6c696e6b436c69656e742063616e2066756c66696c6c6044820152606401610709565b610a61838361221a565b60006019826040516117339190613ebd565b9081526040519081900360200190205460ff16600581111561175757611757613d0e565b14156107ac5760405162461bcd60e51b815260206004820152601c60248201527f42657420737461746520697320616c726561647920434c4f5345442e000000006044820152606401610709565b601c602052600090815260409020805461138190613f06565b600a805461138190613f06565b806019836040516117dc9190613ebd565b908152604051908190036020019020805460ff1916600183600581111561180557611805613d0e565b02179055507fe10ba6722d7a7a91bf343a0f8e5b026910dbc4a2ebca276930dff31703c59a70828260405161183b92919061403b565b60405180910390a1600281600581111561185757611857613d0e565b141561186657610d1482612300565b600081600581111561187a5761187a613d0e565b1415610d1457610d1482612350565b6000601a8260405161189b9190613ebd565b908152602001604051809103902054905080600014156118c057610d148260006117cb565b60016019836040516118d29190613ebd565b9081526040519081900360200190205460ff1660058111156118f6576118f6613d0e565b148015611923575060125461190b9082613eef565b42118061192357506011546119209082613eef565b42105b1561193357610d148260006117cb565b60026019836040516119459190613ebd565b9081526040519081900360200190205460ff16600581111561196957611969613d0e565b14806119a8575060036019836040516119829190613ebd565b9081526040519081900360200190205460ff1660058111156119a6576119a6613d0e565b145b80156119bf57506011546119bc9082613eef565b42105b156119cf57610d148260006117cb565b60016019836040516119e19190613ebd565b9081526040519081900360200190205460ff166005811115611a0557611a05613d0e565b148015611a1e5750601254611a1a9082613eef565b4211155b8015611a365750601154611a329082613eef565b4210155b15611a4657610d148260026117cb565b6002601983604051611a589190613ebd565b9081526040519081900360200190205460ff166005811115611a7c57611a7c613d0e565b148015611a945750601254611a919082613eef565b42115b8015611aa1575060125415155b15610d1457610d148260036117cb565b611aef6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b611b2d6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b611b39818686866123a0565b9150505b9392505050565b6080830151611b53908361241c565b6080830151610a61908261241c565b6080830151611b71908361241c565b6080830151610a619082612433565b600354600090611b3d906001600160a01b03168484612493565b611ba684848484612554565b600f5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0390911690819063a9059cbb906044016020604051808303816000875af1158015611bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1d9190613fd9565b611c5e5760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b6044820152606401610709565b816001600160a01b03167f0f3b118062ef97715cdb7fc34e6b3bc6bf1c6ddbbbbc4e8d6f13eff984080d08868587604051611c9b93929190614013565b60405180910390a25050505050565b6000828152601c602052604081208054611cc390613f06565b80601f0160208091040260200160405190810160405280929190818152602001828054611cef90613f06565b8015611d3c5780601f10611d1157610100808354040283529160200191611d3c565b820191906000526020600020905b815481529060010190602001808311611d1f57829003601f168201915b50505050509050827f991c3e65c24cac8eb9898540ce857bbd06f702f19ac9ee6562bd97b96b0d898c8284604051611d7592919061405d565b60405180910390a26004601982604051611d8f9190613ebd565b9081526040519081900360200190205460ff166005811115611db357611db3613d0e565b1415610a61576000611dc582846127ed565b90508015611ddd57611dd88260056117cb565b611de8565b611de88260036117cb565b50505050565b611df9838383612b5c565b610a6157601483604051611e0d9190613ebd565b90815260200160405180910390206000836003811115611e2f57611e2f613d0e565b6003811115611e4057611e40613d0e565b815260200190815260200160002080549050601584604051611e629190613ebd565b90815260200160405180910390206000846003811115611e8457611e84613d0e565b6003811115611e9557611e95613d0e565b81526020019081526020016000206000836001600160a01b03166001600160a01b0316815260200190815260200160002081905550601483604051611eda9190613ebd565b90815260200160405180910390206000836003811115611efc57611efc613d0e565b6003811115611f0d57611f0d613d0e565b8152602080820192909252604001600090812080546001810182559082529190200180546001600160a01b0383166001600160a01b0319909116179055505050565b60008060005b601485604051611f659190613ebd565b90815260200160405180910390206000856003811115611f8757611f87613d0e565b6003811115611f9857611f98613d0e565b815260208101919091526040016000205481101561212a576000601486604051611fc29190613ebd565b90815260200160405180910390206000866003811115611fe457611fe4613d0e565b6003811115611ff557611ff5613d0e565b815260200190815260200160002082815481106120145761201461407f565b6000918252602090912001546040516001600160a01b03909116915060169061203e908890613ebd565b9081526020016040518091039020600086600381111561206057612060613d0e565b600381111561207157612071613d0e565b8152602080820192909252604090810160009081206001600160a01b038516825290925290205460ff1615612117576017866040516120b09190613ebd565b908152602001604051809103902060008660038111156120d2576120d2613d0e565b60038111156120e3576120e3613d0e565b8152602080820192909252604090810160009081206001600160a01b03851682529092529020546121149084613ffb565b92505b508061212281614095565b915050611f55565b509392505050565b61213a613a88565b60405180606001604052806017856040516121559190613ebd565b9081526040805160209281900383019020600160009081529083528181206001600160a01b0388168252835281902054835251910190601790612199908790613ebd565b9081526040805160209281900383019020600260009081529083528181206001600160a01b03881682528352819020548352519101906017906121dd908790613ebd565b9081526040805160209281900383019020600360009081529083528181206001600160a01b03979097168152959091529093205490925250919050565b6000828152601b60205260408120805461223390613f06565b80601f016020809104026020016040519081016040528092919081815260200182805461225f90613f06565b80156122ac5780601f10612281576101008083540402835291602001916122ac565b820191906000526020600020905b81548152906001019060200180831161228f57829003601f168201915b50505050509050827f0a19aa077773e15e05c85beefc64244b7b27068fccb13becb7bf450ff41fa89c82846040516122e592919061405d565b60405180910390a26122f78183612c01565b610a6181611889565b60005b6004811015610d145761233e82600c83600481106123235761232361407f565b602081049091015460ff601f9092166101000a900416612c86565b8061234881614095565b915050612303565b60005b6004811015610d145761238e82600c83600481106123735761237361407f565b602081049091015460ff601f9092166101000a900416612cf2565b8061239881614095565b915050612353565b6123de6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b6123ee8560800151610100612eda565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b6124298260038351612f3f565b610a61828261304e565b67ffffffffffffffff1981121561244e57610d148282613075565b67ffffffffffffffff81131561246857610d1482826130b7565b6000811261247c57610d1482600083612f3f565b610d1482600161248e846000196140b0565b612f3f565b6004546000906124a4816001613ffb565b600455835160408086015160808701515191516000937f4042994600000000000000000000000000000000000000000000000000000000936124f59386938493923092918a91600191602401614124565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152905061254a868386846130da565b9695505050505050565b60006017856040516125669190613ebd565b9081526020016040518091039020600085600381111561258857612588613d0e565b600381111561259957612599613d0e565b81526020019081526020016000206000836001600160a01b03166001600160a01b031681526020019081526020016000205490506000811161261d5760405162461bcd60e51b815260206004820181905260248201527f4e6f207374616b65206f6e207468697320616464726573732d726573756c742e6044820152606401610709565b8083111561266d5760405162461bcd60e51b815260206004820152601660248201527f43757272656e74207374616b6520746f6f206c6f772e000000000000000000006044820152606401610709565b6126778382613eef565b6017866040516126879190613ebd565b908152602001604051809103902060008660038111156126a9576126a9613d0e565b60038111156126ba576126ba613d0e565b81526020019081526020016000206000846001600160a01b03166001600160a01b031681526020019081526020016000208190555060006017866040516127019190613ebd565b9081526020016040518091039020600086600381111561272357612723613d0e565b600381111561273457612734613d0e565b81526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002054116127e657600060168660405161277d9190613ebd565b9081526020016040518091039020600086600381111561279f5761279f613d0e565b60038111156127b0576127b0613d0e565b8152602080820192909252604090810160009081206001600160a01b03871682529092529020805460ff19169115159190911790555b5050505050565b6040517f3af625ae0000000000000000000000000000000000000000000000000000000081526004810182905260009081907339341B78a5eEF806eE0Acc28Cca8Bd4f5b09A28690633af625ae90602401602060405180830381865af415801561285b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287f9190614188565b9050600081600381111561289557612895613d0e565b14156128fa576000846040516020016128ae91906141a5565b60405160208183030381529060405290507f2a2c16a3ce1dea0db612b14a8fdc9a8d316acc87914b4d66440d119b41e8615f85826040516128f0929190614237565b60405180910390a1505b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106129305761293061407f565b6020026020010190600381111561294957612949613d0e565b9081600381111561295c5761295c613d0e565b9052506040517f233927df0000000000000000000000000000000000000000000000000000000081526000907339341B78a5eEF806eE0Acc28Cca8Bd4f5b09A2869063233927df906129b2908690600401613d38565b600060405180830381865af41580156129cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f7919081019061425c565b90506000612a05878461326b565b90506000612a13888461326b565b90506000612a218284613ffb565b90508215612a3a57612a35898785846132bb565b612b4d565b8060188a604051612a4b9190613ebd565b9081526040805160209281900383019020600d546001600160a01b03166000908152925281208054909190612a81908490613ffb565b9091555050600f54600d5460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052911690819063a9059cbb906044016020604051808303816000875af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190613fd9565b50600d546040516001600160a01b03909116907fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd90612b43908d90869061405d565b60405180910390a2505b50600198975050505050505050565b60006001600160a01b03821615801590612bea57506000601585604051612b839190613ebd565b90815260200160405180910390206000856003811115612ba557612ba5613d0e565b6003811115612bb657612bb6613d0e565b81526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002054115b15612bf757506001611b3d565b5060009392505050565b601a82604051612c119190613ebd565b9081526020016040518091039020548114610d145780601a83604051612c379190613ebd565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a38282604051612c7a92919061405d565b60405180910390a15050565b60408051602081018252600081529051601490612ca4908590613ebd565b90815260200160405180910390206000836003811115612cc657612cc6613d0e565b6003811115612cd757612cd7613d0e565b81526020810191909152604001600020610a61916001613aa6565b60005b601483604051612d059190613ebd565b90815260200160405180910390206000836003811115612d2757612d27613d0e565b6003811115612d3857612d38613d0e565b8152602081019190915260400160002054811015610a61576000601484604051612d629190613ebd565b90815260200160405180910390206000846003811115612d8457612d84613d0e565b6003811115612d9557612d95613d0e565b81526020019081526020016000208281548110612db457612db461407f565b6000918252602090912001546040516001600160a01b039091169150601690612dde908690613ebd565b90815260200160405180910390206000846003811115612e0057612e00613d0e565b6003811115612e1157612e11613d0e565b8152602080820192909252604090810160009081206001600160a01b038516825290925290205460ff1615612ec7576000601785604051612e529190613ebd565b90815260200160405180910390206000856003811115612e7457612e74613d0e565b6003811115612e8557612e85613d0e565b81526020019081526020016000206000836001600160a01b03166001600160a01b03168152602001908152602001600020549050612ec585858385611b9a565b505b5080612ed281614095565b915050612cf5565b604080518082019091526060815260006020820152612efa602083614324565b15612f2257612f0a602083614324565b612f15906020613eef565b612f1f9083613ffb565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611612f6457611de88360e0600585901b16831761378a565b60ff8167ffffffffffffffff1611612fa257612f8b836018611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660016137af565b61ffff8167ffffffffffffffff1611612fe157612fca836019611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660026137af565b63ffffffff8167ffffffffffffffff16116130225761300b83601a611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660046137af565b61303783601b611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660086137af565b604080518082019091526060815260006020820152611b3d838460000151518485516137d5565b6130808260c361378a565b50610d1482613091836000196140b0565b6040516020016130a391815260200190565b6040516020818303038152906040526138bf565b6130c28260c261378a565b50610d1482826040516020016130a391815260200190565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26002546040517f4000aea00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634000aea0906131b690889087908790600401614338565b6020604051808303816000875af11580156131d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f99190613fd9565b6124145760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c6500000000000000000000000000000000000000000000000000000000006064820152608401610709565b60008060005b835181101561212a5761329d858583815181106132905761329061407f565b6020026020010151611f4f565b6132a79083613ffb565b9150806132b381614095565b915050613271565b60046019856040516132cd9190613ebd565b9081526040519081900360200190205460ff1660058111156132f1576132f1613d0e565b1461333e5760405162461bcd60e51b815260206004820152601960248201527f426574207374617465206e6f742046554c46494c4c494e472e000000000000006044820152606401610709565b600f546001600160a01b031660005b60148660405161335d9190613ebd565b9081526020016040518091039020600086600381111561337f5761337f613d0e565b600381111561339057613390613d0e565b815260208101919091526040016000205481101561367a5760006014876040516133ba9190613ebd565b908152602001604051809103902060008760038111156133dc576133dc613d0e565b60038111156133ed576133ed613d0e565b8152602001908152602001600020828154811061340c5761340c61407f565b6000918252602090912001546040516001600160a01b039091169150601690613436908990613ebd565b9081526020016040518091039020600087600381111561345857613458613d0e565b600381111561346957613469613d0e565b8152602080820192909252604090810160009081206001600160a01b038516825290925290205460ff16156136675760006017886040516134aa9190613ebd565b908152602001604051809103902060008860038111156134cc576134cc613d0e565b60038111156134dd576134dd613d0e565b8152602080820192909252604090810160009081206001600160a01b038616825290925281205491506135108787614369565b61351a908361437d565b9050600060646010548361352e919061437d565b6135389190614369565b90508060138b60405161354b9190613ebd565b908152602001604051809103902060008282546135689190613ffb565b9091555061357890508183613eef565b91508160188b60405161358b9190613ebd565b90815260408051602092819003830181206001600160a01b038981166000818152929095529290209390935563a9059cbb60e01b835260048301919091526024820184905287169063a9059cbb906044016020604051808303816000875af11580156135fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361f9190613fd9565b50836001600160a01b03167fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd8b8460405161365b92919061405d565b60405180910390a25050505b508061367281614095565b91505061334d565b50600d546040516001600160a01b038084169263a9059cbb929116906013906136a4908a90613ebd565b908152604051908190036020018120546001600160e01b031960e085901b1682526136e692916004016001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015613705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137299190613fd9565b50846040516137389190613ebd565b60405180910390207f60b1c59a2aef10b76f58eab3892bfebe9dc131e4f7c750d091592586ae29acc56013876040516137719190613ebd565b9081526040516020918190038201812054815201611c9b565b604080518082019091526060815260006020820152611b3d83846000015151846138cc565b604080518082019091526060815260006020820152612414848560000151518585613928565b60408051808201909152606081526000602082015282518211156137f857600080fd5b60208501516138078386613ffb565b111561383a5761383a8561382a876020015187866138259190613ffb565b6139a9565b61383590600261437d565b6139c0565b6000808651805187602083010193508088870111156138595787860182525b505050602084015b602084106138995780518252613878602083613ffb565b9150613885602082613ffb565b9050613892602085613eef565b9350613861565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6124298260028351612f3f565b60408051808201909152606081526000602082015283602001518310613901576139018485602001516002613835919061437d565b83518051602085830101848153508085141561391e576001810182525b5093949350505050565b604080518082019091526060815260006020820152602085015161394c8584613ffb565b1115613960576139608561382a8685613ffb565b6000600161397084610100614480565b61397a9190613eef565b905085518386820101858319825116178152508051848701111561399e5783860181525b509495945050505050565b6000818311156139ba57508161136e565b50919050565b81516139cc8383612eda565b50611de8838261304e565b8280546139e390613f06565b90600052602060002090601f016020900481019282613a055760008555613a4b565b82601f10613a1e57805160ff1916838001178555613a4b565b82800160010185558215613a4b579182015b82811115613a4b578251825591602001919060010190613a30565b50613a57929150613afb565b5090565b60408051606081019091528060008152602001613a76613a88565b8152602001613a83613a88565b905290565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215613a4b579160200282015b82811115613a4b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613ac6565b5b80821115613a575760008155600101613afc565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b4f57613b4f613b10565b604052919050565b600082601f830112613b6857600080fd5b813567ffffffffffffffff811115613b8257613b82613b10565b613b95601f8201601f1916602001613b26565b818152846020838601011115613baa57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613bd957600080fd5b813567ffffffffffffffff811115613bf057600080fd5b61241484828501613b57565b80356001600160a01b038116811461097457600080fd5b600060208284031215613c2557600080fd5b611b3d82613bfc565b6004811061072657600080fd5b600080600060608486031215613c5057600080fd5b833567ffffffffffffffff811115613c6757600080fd5b613c7386828701613b57565b9350506020840135613c8481613c2e565b929592945050506040919091013590565b600080600060608486031215613caa57600080fd5b833567ffffffffffffffff811115613cc157600080fd5b613ccd86828701613b57565b9350506020840135613cde81613c2e565b9150613cec60408501613bfc565b90509250925092565b600060208284031215613d0757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110613d3457613d34613d0e565b9052565b6020810161136e8284613d24565b60008060408385031215613d5957600080fd5b823567ffffffffffffffff811115613d7057600080fd5b613d7c85828601613b57565b925050613d8b60208401613bfc565b90509250929050565b60008060408385031215613da757600080fd5b50508035926020909101359150565b60068110613d3457613d34613d0e565b8060005b6003811015611de8578151845260209384019390910190600101613dca565b600060e082019050613dfc828451613db6565b6020830151613e0e6020840182613dc6565b506040830151613e216080840182613dc6565b5092915050565b60005b83811015613e43578181015183820152602001613e2b565b83811115611de85750506000910152565b60008151808452613e6c816020860160208601613e28565b601f01601f19169290920160200192915050565b602081526000611b3d6020830184613e54565b6020810161136e8284613db6565b60008151613eb3818560208601613e28565b9290920192915050565b60008251613ecf818460208701613e28565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600082821015613f0157613f01613ed9565b500390565b600181811c90821680613f1a57607f821691505b602082108114156139ba57634e487b7160e01b600052602260045260246000fd5b600080845481600182811c915080831680613f5757607f831692505b6020808410821415613f7757634e487b7160e01b86526022600452602486fd5b818015613f8b5760018114613f9c57613fc9565b60ff19861689528489019650613fc9565b60008b81526020902060005b86811015613fc15781548b820152908501908301613fa8565b505084890196505b505050505050611b398185613ea1565b600060208284031215613feb57600080fd5b81518015158114611b3d57600080fd5b6000821982111561400e5761400e613ed9565b500190565b6060815260006140266060830186613e54565b90508360208301526124146040830184613d24565b60408152600061404e6040830185613e54565b9050611b3d6020830184613db6565b6040815260006140706040830185613e54565b90508260208301529392505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156140a9576140a9613ed9565b5060010190565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156140ea576140ea613ed9565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561411e5761411e613ed9565b50500390565b60006101006001600160a01b03808c1684528a60208501528960408501528089166060850152506001600160e01b0319871660808401528560a08401528460c08401528060e084015261417981840185613e54565b9b9a5050505050505050505050565b60006020828403121561419a57600080fd5b8151611b3d81613c2e565b7f4572726f72206f6e2066697874757265200000000000000000000000000000008152600082516141dd816011850160208701613e28565b7f3a20556e6b6e6f776e206669787475726520726573756c742066726f6d20415060119390910192830152507f49000000000000000000000000000000000000000000000000000000000000006031820152603201919050565b60408152600061424a6040830185613e54565b8281036020840152611b398185613e54565b6000602080838503121561426f57600080fd5b825167ffffffffffffffff8082111561428757600080fd5b818501915085601f83011261429b57600080fd5b8151818111156142ad576142ad613b10565b8060051b91506142be848301613b26565b81815291830184019184810190888411156142d857600080fd5b938501935b8385101561430257845192506142f283613c2e565b82825293850193908501906142dd565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826143335761433361430e565b500690565b6001600160a01b03841681528260208201526060604082015260006143606060830184613e54565b95945050505050565b6000826143785761437861430e565b500490565b600081600019048311821515161561439757614397613ed9565b500290565b600181815b808511156143d75781600019048211156143bd576143bd613ed9565b808516156143ca57918102915b93841c93908002906143a1565b509250929050565b6000826143ee5750600161136e565b816143fb5750600061136e565b8160018114614411576002811461441b57614437565b600191505061136e565b60ff84111561442c5761442c613ed9565b50506001821b61136e565b5060208310610133831016604e8410600b841016171561445a575081810a61136e565b614464838361439c565b806000190482111561447857614478613ed9565b029392505050565b6000611b3d83836143df56fea26469706673582212205d452f0834f1e1ef8597cb6090a671b73ac89fb64af3527323f568aaaa12294564736f6c634300080c0033",
  "deployedBytecode": "$4f22de673e7000c1f1d3934c762f2412ba$__90633af625ae90602401602060405180830381865af415801561285b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287f9190614188565b9050600081600381111561289557612895613d0e565b14156128fa576000846040516020016128ae91906141a5565b60405160208183030381529060405290507f2a2c16a3ce1dea0db612b14a8fdc9a8d316acc87914b4d66440d119b41e8615f85826040516128f0929190614237565b60405180910390a1505b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106129305761293061407f565b6020026020010190600381111561294957612949613d0e565b9081600381111561295c5761295c613d0e565b9052506040517f233927df00000000000000000000000000000000000000000000000000000000815260009073__$4f22de673e7000c1f1d3934c762f2412ba$__9063233927df906129b2908690600401613d38565b600060405180830381865af41580156129cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f7919081019061425c565b90506000612a05878461326b565b90506000612a13888461326b565b90506000612a218284613ffb565b90508215612a3a57612a35898785846132bb565b612b4d565b8060188a604051612a4b9190613ebd565b9081526040805160209281900383019020600d546001600160a01b03166000908152925281208054909190612a81908490613ffb565b9091555050600f54600d5460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052911690819063a9059cbb906044016020604051808303816000875af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190613fd9565b50600d546040516001600160a01b03909116907fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd90612b43908d90869061405d565b60405180910390a2505b50600198975050505050505050565b60006001600160a01b03821615801590612bea57506000601585604051612b839190613ebd565b90815260200160405180910390206000856003811115612ba557612ba5613d0e565b6003811115612bb657612bb6613d0e565b81526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002054115b15612bf757506001611b3d565b5060009392505050565b601a82604051612c119190613ebd565b9081526020016040518091039020548114610d145780601a83604051612c379190613ebd565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a38282604051612c7a92919061405d565b60405180910390a15050565b60408051602081018252600081529051601490612ca4908590613ebd565b90815260200160405180910390206000836003811115612cc657612cc6613d0e565b6003811115612cd757612cd7613d0e565b81526020810191909152604001600020610a61916001613aa6565b60005b601483604051612d059190613ebd565b90815260200160405180910390206000836003811115612d2757612d27613d0e565b6003811115612d3857612d38613d0e565b8152602081019190915260400160002054811015610a61576000601484604051612d629190613ebd565b90815260200160405180910390206000846003811115612d8457612d84613d0e565b6003811115612d9557612d95613d0e565b81526020019081526020016000208281548110612db457612db461407f565b6000918252602090912001546040516001600160a01b039091169150601690612dde908690613ebd565b90815260200160405180910390206000846003811115612e0057612e00613d0e565b6003811115612e1157612e11613d0e565b8152602080820192909252604090810160009081206001600160a01b038516825290925290205460ff1615612ec7576000601785604051612e529190613ebd565b90815260200160405180910390206000856003811115612e7457612e74613d0e565b6003811115612e8557612e85613d0e565b81526020019081526020016000206000836001600160a01b03166001600160a01b03168152602001908152602001600020549050612ec585858385611b9a565b505b5080612ed281614095565b915050612cf5565b604080518082019091526060815260006020820152612efa602083614324565b15612f2257612f0a602083614324565b612f15906020613eef565b612f1f9083613ffb565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611612f6457611de88360e0600585901b16831761378a565b60ff8167ffffffffffffffff1611612fa257612f8b836018611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660016137af565b61ffff8167ffffffffffffffff1611612fe157612fca836019611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660026137af565b63ffffffff8167ffffffffffffffff16116130225761300b83601a611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660046137af565b61303783601b611fe0600586901b161761378a565b50611de88367ffffffffffffffff831660086137af565b604080518082019091526060815260006020820152611b3d838460000151518485516137d5565b6130808260c361378a565b50610d1482613091836000196140b0565b6040516020016130a391815260200190565b6040516020818303038152906040526138bf565b6130c28260c261378a565b50610d1482826040516020016130a391815260200190565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26002546040517f4000aea00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634000aea0906131b690889087908790600401614338565b6020604051808303816000875af11580156131d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f99190613fd9565b6124145760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c6500000000000000000000000000000000000000000000000000000000006064820152608401610709565b60008060005b835181101561212a5761329d858583815181106132905761329061407f565b6020026020010151611f4f565b6132a79083613ffb565b9150806132b381614095565b915050613271565b60046019856040516132cd9190613ebd565b9081526040519081900360200190205460ff1660058111156132f1576132f1613d0e565b1461333e5760405162461bcd60e51b815260206004820152601960248201527f426574207374617465206e6f742046554c46494c4c494e472e000000000000006044820152606401610709565b600f546001600160a01b031660005b60148660405161335d9190613ebd565b9081526020016040518091039020600086600381111561337f5761337f613d0e565b600381111561339057613390613d0e565b815260208101919091526040016000205481101561367a5760006014876040516133ba9190613ebd565b908152602001604051809103902060008760038111156133dc576133dc613d0e565b60038111156133ed576133ed613d0e565b8152602001908152602001600020828154811061340c5761340c61407f565b6000918252602090912001546040516001600160a01b039091169150601690613436908990613ebd565b9081526020016040518091039020600087600381111561345857613458613d0e565b600381111561346957613469613d0e565b8152602080820192909252604090810160009081206001600160a01b038516825290925290205460ff16156136675760006017886040516134aa9190613ebd565b908152602001604051809103902060008860038111156134cc576134cc613d0e565b60038111156134dd576134dd613d0e565b8152602080820192909252604090810160009081206001600160a01b038616825290925281205491506135108787614369565b61351a908361437d565b9050600060646010548361352e919061437d565b6135389190614369565b90508060138b60405161354b9190613ebd565b908152602001604051809103902060008282546135689190613ffb565b9091555061357890508183613eef565b91508160188b60405161358b9190613ebd565b90815260408051602092819003830181206001600160a01b038981166000818152929095529290209390935563a9059cbb60e01b835260048301919091526024820184905287169063a9059cbb906044016020604051808303816000875af11580156135fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361f9190613fd9565b50836001600160a01b03167fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd8b8460405161365b92919061405d565b60405180910390a25050505b508061367281614095565b91505061334d565b50600d546040516001600160a01b038084169263a9059cbb929116906013906136a4908a90613ebd565b908152604051908190036020018120546001600160e01b031960e085901b1682526136e692916004016001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015613705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137299190613fd9565b50846040516137389190613ebd565b60405180910390207f60b1c59a2aef10b76f58eab3892bfebe9dc131e4f7c750d091592586ae29acc56013876040516137719190613ebd565b9081526040516020918190038201812054815201611c9b565b604080518082019091526060815260006020820152611b3d83846000015151846138cc565b604080518082019091526060815260006020820152612414848560000151518585613928565b60408051808201909152606081526000602082015282518211156137f857600080fd5b60208501516138078386613ffb565b111561383a5761383a8561382a876020015187866138259190613ffb565b6139a9565b61383590600261437d565b6139c0565b6000808651805187602083010193508088870111156138595787860182525b505050602084015b602084106138995780518252613878602083613ffb565b9150613885602082613ffb565b9050613892602085613eef565b9350613861565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6124298260028351612f3f565b60408051808201909152606081526000602082015283602001518310613901576139018485602001516002613835919061437d565b83518051602085830101848153508085141561391e576001810182525b5093949350505050565b604080518082019091526060815260006020820152602085015161394c8584613ffb565b1115613960576139608561382a8685613ffb565b6000600161397084610100614480565b61397a9190613eef565b905085518386820101858319825116178152508051848701111561399e5783860181525b509495945050505050565b6000818311156139ba57508161136e565b50919050565b81516139cc8383612eda565b50611de8838261304e565b8280546139e390613f06565b90600052602060002090601f016020900481019282613a055760008555613a4b565b82601f10613a1e57805160ff1916838001178555613a4b565b82800160010185558215613a4b579182015b82811115613a4b578251825591602001919060010190613a30565b50613a57929150613afb565b5090565b60408051606081019091528060008152602001613a76613a88565b8152602001613a83613a88565b905290565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215613a4b579160200282015b82811115613a4b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613ac6565b5b80821115613a575760008155600101613afc565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b4f57613b4f613b10565b604052919050565b600082601f830112613b6857600080fd5b813567ffffffffffffffff811115613b8257613b82613b10565b613b95601f8201601f1916602001613b26565b818152846020838601011115613baa57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613bd957600080fd5b813567ffffffffffffffff811115613bf057600080fd5b61241484828501613b57565b80356001600160a01b038116811461097457600080fd5b600060208284031215613c2557600080fd5b611b3d82613bfc565b6004811061072657600080fd5b600080600060608486031215613c5057600080fd5b833567ffffffffffffffff811115613c6757600080fd5b613c7386828701613b57565b9350506020840135613c8481613c2e565b929592945050506040919091013590565b600080600060608486031215613caa57600080fd5b833567ffffffffffffffff811115613cc157600080fd5b613ccd86828701613b57565b9350506020840135613cde81613c2e565b9150613cec60408501613bfc565b90509250925092565b600060208284031215613d0757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110613d3457613d34613d0e565b9052565b6020810161136e8284613d24565b60008060408385031215613d5957600080fd5b823567ffffffffffffffff811115613d7057600080fd5b613d7c85828601613b57565b925050613d8b60208401613bfc565b90509250929050565b60008060408385031215613da757600080fd5b50508035926020909101359150565b60068110613d3457613d34613d0e565b8060005b6003811015611de8578151845260209384019390910190600101613dca565b600060e082019050613dfc828451613db6565b6020830151613e0e6020840182613dc6565b506040830151613e216080840182613dc6565b5092915050565b60005b83811015613e43578181015183820152602001613e2b565b83811115611de85750506000910152565b60008151808452613e6c816020860160208601613e28565b601f01601f19169290920160200192915050565b602081526000611b3d6020830184613e54565b6020810161136e8284613db6565b60008151613eb3818560208601613e28565b9290920192915050565b60008251613ecf818460208701613e28565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600082821015613f0157613f01613ed9565b500390565b600181811c90821680613f1a57607f821691505b602082108114156139ba57634e487b7160e01b600052602260045260246000fd5b600080845481600182811c915080831680613f5757607f831692505b6020808410821415613f7757634e487b7160e01b86526022600452602486fd5b818015613f8b5760018114613f9c57613fc9565b60ff19861689528489019650613fc9565b60008b81526020902060005b86811015613fc15781548b820152908501908301613fa8565b505084890196505b505050505050611b398185613ea1565b600060208284031215613feb57600080fd5b81518015158114611b3d57600080fd5b6000821982111561400e5761400e613ed9565b500190565b6060815260006140266060830186613e54565b90508360208301526124146040830184613d24565b60408152600061404e6040830185613e54565b9050611b3d6020830184613db6565b6040815260006140706040830185613e54565b90508260208301529392505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156140a9576140a9613ed9565b5060010190565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156140ea576140ea613ed9565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561411e5761411e613ed9565b50500390565b60006101006001600160a01b03808c1684528a60208501528960408501528089166060850152506001600160e01b0319871660808401528560a08401528460c08401528060e084015261417981840185613e54565b9b9a5050505050505050505050565b60006020828403121561419a57600080fd5b8151611b3d81613c2e565b7f4572726f72206f6e2066697874757265200000000000000000000000000000008152600082516141dd816011850160208701613e28565b7f3a20556e6b6e6f776e206669787475726520726573756c742066726f6d20415060119390910192830152507f49000000000000000000000000000000000000000000000000000000000000006031820152603201919050565b60408152600061424a6040830185613e54565b8281036020840152611b398185613e54565b6000602080838503121561426f57600080fd5b825167ffffffffffffffff8082111561428757600080fd5b818501915085601f83011261429b57600080fd5b8151818111156142ad576142ad613b10565b8060051b91506142be848301613b26565b81815291830184019184810190888411156142d857600080fd5b938501935b8385101561430257845192506142f283613c2e565b82825293850193908501906142dd565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826143335761433361430e565b500690565b6001600160a01b03841681528260208201526060604082015260006143606060830184613e54565b95945050505050565b6000826143785761437861430e565b500490565b600081600019048311821515161561439757614397613ed9565b500290565b600181815b808511156143d75781600019048211156143bd576143bd613ed9565b808516156143ca57918102915b93841c93908002906143a1565b509250929050565b6000826143ee5750600161136e565b816143fb5750600061136e565b8160018114614411576002811461441b57614437565b600191505061136e565b60ff84111561442c5761442c613ed9565b50506001821b61136e565b5060208310610133831016604e8410600b841016171561445a575081810a61136e565b614464838361439c565b806000190482111561447857614478613ed9565b029392505050565b6000611b3d83836143df56fea26469706673582212205d452f0834f1e1ef8597cb6090a671b73ac89fb64af3527323f568aaaa12294564736f6c634300080c0033",
  "libraries": {
    "SportsBettingLib": "0x39341B78a5eEF806eE0Acc28Cca8Bd4f5b09A286"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "requestFixtureKickoffTimeParameter(string)": {
        "notice": "Request fixture kickoff time from the oracle in a single transaction"
      },
      "requestFixtureResultParameter(string)": {
        "notice": "Request fixture result from the oracle in a single transaction"
      },
      "withdrawLink(uint256)": {
        "notice": "Allow withdraw of Link tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3925,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "chainlink",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3927,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "sportsOracleURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3929,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "jobId",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 3931,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3933,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureResult",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 3937,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "userToLink",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2262,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betTypes",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_enum(BetType)3792)4_storage"
      },
      {
        "astId": 2264,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2269,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "entranceFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2271,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "daiAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2273,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "commissionRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2282,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betAdvanceTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2287,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betCutOffTime",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2291,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "commissionMap",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2299,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "historicalBetters",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 2308,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "historicalBettersIndex",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2317,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "activeBetters",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 2326,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "amounts",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2332,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "payouts",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2337,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "bettingState",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_string_memory_ptr,t_enum(BettingState)2190)"
      },
      {
        "astId": 2341,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureToKickoffTime",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2345,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "requestKickoffToFixture",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 2349,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "requestResultToFixture",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(BetType)3792)4_storage": {
        "base": "t_enum(BetType)3792",
        "encoding": "inplace",
        "label": "enum SportsBettingLib.BetType[4]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BetType)3792": {
        "encoding": "inplace",
        "label": "enum SportsBettingLib.BetType",
        "numberOfBytes": "1"
      },
      "t_enum(BettingState)2190": {
        "encoding": "inplace",
        "label": "enum SportsBetting.BettingState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_enum(BetType)3792,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(BetType)3792",
        "label": "mapping(enum SportsBettingLib.BetType => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(BetType)3792",
        "label": "mapping(enum SportsBettingLib.BetType => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(BetType)3792",
        "label": "mapping(enum SportsBettingLib.BetType => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_enum(BettingState)2190)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum SportsBetting.BettingState)",
        "numberOfBytes": "32",
        "value": "t_enum(BettingState)2190"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBettingLib.BetType => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)3792,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBettingLib.BetType => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBettingLib.BetType => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)3792,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}