{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sportsOracleURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetPayout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "BetPayoutFulfillmentError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "better",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "BetUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SportsBetting.BettingState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "BettingStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoffTime",
          "type": "uint256"
        }
      ],
      "name": "KickoffTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureResult",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickoff",
          "type": "uint256"
        }
      ],
      "name": "RequestFixtureParametersFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "RequestedFixtureParameters",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeBetters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "awaitBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betAdvanceTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betCutOffTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betTypes",
      "outputs": [
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "bettingState",
      "outputs": [
        {
          "internalType": "enum SportsBetting.BettingState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "closeBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fixtureResult",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "fixtureToKickoffTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "fulfillBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "getEnrichedFixtureData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SportsBetting.BettingState",
              "name": "fixtureState",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "home",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "draw",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "away",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SportsBetting.StakeSummary",
              "name": "total",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "home",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "draw",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "away",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SportsBetting.StakeSummary",
              "name": "user",
              "type": "tuple"
            }
          ],
          "internalType": "struct SportsBetting.FixtureEnrichment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "historicalBetters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "openBetForFixture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_resultResponse",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_kickoffResponse",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillMultipleParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        }
      ],
      "name": "requestMultipleParameters",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToFixture",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sportsOracleURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fixtureID",
          "type": "string"
        },
        {
          "internalType": "enum SportsBetting.BetType",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf42d4e3b241d0160c7f896485e0d0862f1a20b8e7fca5afccc5d555e6d24bdeb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4955717",
    "logsBloom": "0x
    "blockHash": "0x7ca8715e0cebaa32b0bb307c8715cf363d621fdffedb76b6859b24eed1669872",
    "transactionHash": "0xf42d4e3b241d0160c7f896485e0d0862f1a20b8e7fca5afccc5d555e6d24bdeb",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4955717",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "localhost:5000/",
    "0xcc79157eb46f5624204f47ab42b3906caa40eab7",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x3764383061363338366566353433613361626235323831376636373037653362",
    "100000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "b8cfd01738800e864c9d155cc4cff619",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sportsOracleURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BetPayoutFulfillmentError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"BetUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BettingStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoffTime\",\"type\":\"uint256\"}],\"name\":\"KickoffTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureResult\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickoff\",\"type\":\"uint256\"}],\"name\":\"RequestFixtureParametersFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"RequestedFixtureParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeBetters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"awaitBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betAdvanceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betCutOffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betTypes\",\"outputs\":[{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bettingState\",\"outputs\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"closeBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixtureResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"fixtureToKickoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"fulfillBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"getEnrichedFixtureData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SportsBetting.BettingState\",\"name\":\"fixtureState\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"away\",\"type\":\"uint256\"}],\"internalType\":\"struct SportsBetting.StakeSummary\",\"name\":\"total\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"away\",\"type\":\"uint256\"}],\"internalType\":\"struct SportsBetting.StakeSummary\",\"name\":\"user\",\"type\":\"tuple\"}],\"internalType\":\"struct SportsBetting.FixtureEnrichment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalBetters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"openBetForFixture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_resultResponse\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_kickoffResponse\",\"type\":\"uint256\"}],\"name\":\"rawFulfillMultipleParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"}],\"name\":\"requestMultipleParameters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToFixture\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportsOracleURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fixtureID\",\"type\":\"string\"},{\"internalType\":\"enum SportsBetting.BetType\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestMultipleParameters(string)\":{\"notice\":\"Request mutiple parameters from the oracle in a single transaction\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"withdrawLink()\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SportsBetting.sol\":\"SportsBetting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SportsBetting.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./SportsOracleConsumer.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract SportsBetting is SportsOracleConsumer {\\n    enum BetType {\\n        HOME,\\n        DRAW,\\n        AWAY\\n    }\\n\\n    enum BettingState {\\n        CLOSED,\\n        OPEN,\\n        AWAITING,\\n        FULFILLING,\\n        FULFILLED\\n    }\\n\\n    struct StakeSummary {\\n        uint256 home;\\n        uint256 draw;\\n        uint256 away;\\n    }\\n\\n    struct FixtureEnrichment {\\n        BettingState fixtureState;\\n        StakeSummary total;\\n        StakeSummary user;\\n    }\\n\\n    event BettingStateChanged(string fixtureID, BettingState state);\\n\\n    event BetStaked(\\n        address indexed better,\\n        string fixtureID,\\n        uint256 amount,\\n        BetType betType\\n    );\\n\\n    event BetUnstaked(\\n        address indexed better,\\n        string fixtureID,\\n        uint256 amount,\\n        BetType betType\\n    );\\n\\n    event BetPayoutFulfillmentError(string fixtureID, string reason);\\n\\n    event BetPayout(address indexed better, string fixtureID, uint256 amount);\\n\\n    event KickoffTimeUpdated(string fixtureID, uint256 kickoffTime);\\n\\n    BetType[3] public betTypes;\\n\\n    // Entrance fee of 0.0001 Eth (10^14 Wei)\\n    uint256 public entranceFee = 10**14;\\n\\n    // Max time before a fixture kick-off that a bet can be placed in seconds\\n    // A fixture bet state will not move to OPEN before a time to the left of the\\n    // ko time equal to betAdvanceTime\\n    uint256 public betAdvanceTime = 7 * 24 * 60 * 60;\\n\\n    // Cut off time for bets before KO time in seconds\\n    // i.e. all bets must be placed at time t where t < koTime - betCutOffTime\\n    uint256 public betCutOffTime = 90 * 60; // 90 minutes\\n\\n    // Map each fixture ID to a map of BetType to an array of all addresses that have ever placed\\n    // bets for that fixture-result pair\\n    mapping(string => mapping(BetType => address[])) public historicalBetters;\\n\\n    // activeBetters represents all addresses who currently have an amount staked on a fixture-result\\n    // The mapping(address => bool) pattern allows us to set address to true or false if an address\\n    // stakes/unstakes for that bet, and allows safer 'contains' methods on the betters\\n    mapping(string => mapping(BetType => mapping(address => bool)))\\n        public activeBetters;\\n\\n    // Map each fixture ID to a map of BetType to a map of address to uint representing the amount of wei bet on that result\\n    mapping(string => mapping(BetType => mapping(address => uint256)))\\n        public amounts;\\n\\n    // Map each fixture ID to a map of address to amount we owe the address owner\\n    mapping(string => mapping(address => uint256)) obligations;\\n\\n    // Map each fixture ID to whether betting is open for this fixture\\n    mapping(string => BettingState) public bettingState;\\n\\n    // Map each fixture ID to unix timestamp for its kickoff time\\n    mapping(string => uint256) public fixtureToKickoffTime;\\n\\n    // Map oracle request ID to corresponding fixture ID\\n    mapping(bytes32 => string) public requestToFixture;\\n\\n    constructor(\\n        string memory _sportsOracleURI,\\n        address _oracle,\\n        address _link,\\n        bytes32 _jobId,\\n        uint256 _fee\\n    ) SportsOracleConsumer(_sportsOracleURI, _oracle, _link, _jobId, _fee) {\\n        console.log(\\n            \\\"Deploying a SportsBetting with sports oracle URI:\\\",\\n            _sportsOracleURI\\n        );\\n        betTypes[0] = BetType.HOME;\\n        betTypes[1] = BetType.DRAW;\\n        betTypes[2] = BetType.AWAY;\\n    }\\n\\n    function getEnrichedFixtureData(string memory fixtureID)\\n        public\\n        returns (FixtureEnrichment memory)\\n    {\\n        return\\n            FixtureEnrichment({\\n                fixtureState: bettingState[fixtureID],\\n                user: getStakeSummaryForUser(fixtureID, msg.sender),\\n                total: StakeSummary({\\n                    home: getTotalAmountBetOnFixtureOutcome(\\n                        fixtureID,\\n                        BetType.HOME\\n                    ),\\n                    draw: getTotalAmountBetOnFixtureOutcome(\\n                        fixtureID,\\n                        BetType.DRAW\\n                    ),\\n                    away: getTotalAmountBetOnFixtureOutcome(\\n                        fixtureID,\\n                        BetType.AWAY\\n                    )\\n                })\\n            });\\n    }\\n\\n    function getStakeSummaryForUser(string memory fixtureID, address user)\\n        internal\\n        returns (StakeSummary memory)\\n    {\\n        return\\n            StakeSummary({\\n                home: amounts[fixtureID][BetType.HOME][user],\\n                draw: amounts[fixtureID][BetType.DRAW][user],\\n                away: amounts[fixtureID][BetType.AWAY][user]\\n            });\\n    }\\n\\n    // Wrapper for setting fixture betting state and emitting event\\n    function setFixtureBettingState(string memory fixtureID, BettingState state)\\n        internal\\n    {\\n        bettingState[fixtureID] = state;\\n        emit BettingStateChanged(fixtureID, state);\\n    }\\n\\n    // openBetForFixture makes an API call to oracle. It is expected that this\\n    // call will return the kickoff_time and the fulfillMultipleParameters func\\n    // will handle the state change to open\\n    // This is to ensure we don't open a bet until we have its KO time and\\n    // know that it advanced enough in the future\\n    function openBetForFixture(string memory fixtureID) public {\\n        require(\\n            bettingState[fixtureID] != BettingState.OPEN,\\n            \\\"Bet state is already OPEN.\\\"\\n        );\\n        //requestFixtureParameters(fixtureID);\\n    }\\n\\n    function closeBetForFixture(string memory fixtureID) public onlyOwner {\\n        require(\\n            bettingState[fixtureID] != BettingState.CLOSED,\\n            \\\"Bet state is already CLOSED.\\\"\\n        );\\n        setFixtureBettingState(fixtureID, BettingState.CLOSED);\\n    }\\n\\n    // Because the betting state transition OPEN -> AWAITING depends on\\n    // real-world time, we cannot simply rely on ctx state variables to\\n    // deduce if a fixture-bet remains open\\n    // In this function we deduce whether betting is open based on current\\n    // block timestamp, update the state accordingly, and return the result\\n    function shouldHaveCorrectBettingState(string memory fixtureID) internal {\\n        uint256 ko = fixtureToKickoffTime[fixtureID];\\n\\n        if (ko == 0) return;\\n\\n        // If a bet is CLOSED, it can be OPENed if the kickoff time is\\n        // present and current timestamp is more than betCutOffTime before it\\n        // less than the betAdvanceTime after it\\n        if (\\n            bettingState[fixtureID] == BettingState.CLOSED &&\\n            block.timestamp <= ko - betCutOffTime &&\\n            block.timestamp >= ko - betAdvanceTime &&\\n            betCutOffTime != 0\\n        ) {\\n            setFixtureBettingState(fixtureID, BettingState.OPEN);\\n        }\\n\\n        // If a bet is OPEN, it becomes AWAITING if the kickoff time is\\n        // present and current timestamp is more than betCutOffTime to\\n        // the right of it\\n        if (\\n            bettingState[fixtureID] == BettingState.OPEN &&\\n            block.timestamp > ko - betCutOffTime &&\\n            betCutOffTime != 0\\n        ) {\\n            setFixtureBettingState(fixtureID, BettingState.AWAITING);\\n        }\\n    }\\n\\n    // Ideally the betting state will change from OPEN -> AWAITING\\n    // by virtue of a bet being placed too close to KO time, however\\n    // in the event this doesn't happen we allow a method for ctx owner\\n    // to force AWAITING\\n    // This also helps resolve bugs whereby the bet is marked as fulfilled\\n    // when it is not\\n    function awaitBetForFixture(string memory fixtureID) public onlyOwner {\\n        require(\\n            bettingState[fixtureID] != BettingState.AWAITING,\\n            \\\"Bet state is already AWAITING.\\\"\\n        );\\n        setFixtureBettingState(fixtureID, BettingState.AWAITING);\\n    }\\n\\n    function fulfillBetForFixture(string memory fixtureID) public {\\n        require(\\n            bettingState[fixtureID] != BettingState.AWAITING,\\n            \\\"Bet state must be AWAITING.\\\"\\n        );\\n        requestFixtureParameters(fixtureID);\\n    }\\n\\n    function stake(string memory fixtureID, BetType betType) public payable {\\n        shouldHaveCorrectBettingState(fixtureID);\\n        require(\\n            bettingState[fixtureID] == BettingState.OPEN,\\n            \\\"Bet activity is not open.\\\"\\n        );\\n        require(msg.value >= entranceFee, \\\"Amount is below entrance fee.\\\");\\n        amounts[fixtureID][betType][msg.sender] += msg.value;\\n        historicalBetters[fixtureID][betType].push(msg.sender);\\n        activeBetters[fixtureID][betType][msg.sender] = true;\\n        emit BetStaked(msg.sender, fixtureID, msg.value, betType);\\n    }\\n\\n    // Removes all stake in fixtureID-BetType combo\\n    function unstake(\\n        string memory fixtureID,\\n        BetType betType,\\n        uint256 amount\\n    ) public {\\n        require(amount > 0, \\\"Amount should exceed zero.\\\");\\n        shouldHaveCorrectBettingState(fixtureID);\\n        require(\\n            bettingState[fixtureID] == BettingState.OPEN,\\n            \\\"Fixture is not in Open state.\\\"\\n        );\\n        uint256 amountStaked = amounts[fixtureID][betType][msg.sender];\\n        require(amountStaked > 0, \\\"No stake on this address-result.\\\");\\n        require(amount <= amountStaked, \\\"Current stake too low.\\\");\\n\\n        // Update stake amount\\n        amounts[fixtureID][betType][msg.sender] = amountStaked - amount;\\n\\n        // If non-partial unstake, caller is no longer an active staker\\n        if (amounts[fixtureID][betType][msg.sender] <= 0) {\\n            activeBetters[fixtureID][betType][msg.sender] = false;\\n        }\\n\\n        payable(msg.sender).transfer(amount);\\n        emit BetUnstaked(msg.sender, fixtureID, amount, betType);\\n    }\\n\\n    function requestFixtureParameters(string memory fixtureID) internal {\\n        bytes32 requestID = requestMultipleParameters(fixtureID);\\n        requestToFixture[requestID] = fixtureID;\\n        emit RequestedFixtureParameters(requestID, fixtureID);\\n    }\\n\\n    function fulfillMultipleParameters(\\n        bytes32 _requestId,\\n        string memory _resultResponse,\\n        uint256 _kickoffResponse\\n    ) internal override recordChainlinkFulfillment(_requestId) {\\n        string memory fixtureID = requestToFixture[_requestId];\\n\\n        emit RequestFixtureParametersFulfilled(\\n            _requestId,\\n            fixtureID,\\n            _resultResponse,\\n            _kickoffResponse\\n        );\\n\\n        // This oracle result serves two purposes\\n        // 1. Receive fixture KO time to deduce correct betting state\\n        fulfillKickoffTime(fixtureID, _kickoffResponse);\\n        shouldHaveCorrectBettingState(fixtureID);\\n\\n        // 2. Receive fixture result to perform payout logic if state\\n        // is AWAITING\\n        if (\\n            bettingState[fixtureID] == BettingState.AWAITING &&\\n            bytes(_resultResponse).length > 0\\n        ) {\\n            setFixtureBettingState(fixtureID, BettingState.FULFILLING);\\n            fulfillFixtureResult(fixtureID, _resultResponse);\\n            setFixtureBettingState(fixtureID, BettingState.FULFILLED);\\n        }\\n    }\\n\\n    function fulfillKickoffTime(\\n        string memory fixtureID,\\n        uint256 _kickoffResponse\\n    ) internal {\\n        if (_kickoffResponse != fixtureToKickoffTime[fixtureID]) {\\n            fixtureToKickoffTime[fixtureID] = _kickoffResponse;\\n            emit KickoffTimeUpdated(fixtureID, _kickoffResponse);\\n        }\\n    }\\n\\n    function fulfillFixtureResult(\\n        string memory fixtureID,\\n        string memory _resultResponse\\n    ) internal {\\n        BetType result = getFixtureResultFromAPIResponse(\\n            fixtureID,\\n            _resultResponse\\n        );\\n\\n        BetType[] memory winningOutcomes;\\n        winningOutcomes[0] = result;\\n\\n        BetType[] memory losingOutcomes = getLosingFixtureOutcomes(result);\\n\\n        uint256 winningAmount = getTotalAmountBetOnFixtureOutcomes(\\n            fixtureID,\\n            winningOutcomes\\n        );\\n        uint256 losingAmount = getTotalAmountBetOnFixtureOutcomes(\\n            fixtureID,\\n            losingOutcomes\\n        );\\n        uint256 totalAmount = winningAmount + losingAmount;\\n\\n        // Now we set the obligations map entry for this fixture based on above calcs and\\n        // perform the payout\\n        fulfillFixturePayoutObligations(\\n            fixtureID,\\n            result,\\n            winningAmount,\\n            totalAmount\\n        );\\n    }\\n\\n    function getFixtureResultFromAPIResponse(\\n        string memory fixtureID,\\n        string memory _resultResponse\\n    ) internal returns (BetType) {\\n        if (strEqual(_resultResponse, \\\"HOME\\\")) {\\n            return BetType.HOME;\\n        } else if (strEqual(_resultResponse, \\\"DRAW\\\")) {\\n            return BetType.DRAW;\\n        } else if (strEqual(_resultResponse, \\\"AWAY\\\")) {\\n            return BetType.AWAY;\\n        }\\n\\n        string memory errorString = string.concat(\\n            \\\"Error on fixture \\\",\\n            fixtureID,\\n            \\\": Unknown result from API: \\\",\\n            _resultResponse\\n        );\\n        emit BetPayoutFulfillmentError(fixtureID, errorString);\\n        revert(errorString);\\n    }\\n\\n    function strEqual(string memory a, string memory b)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function getLosingFixtureOutcomes(BetType outcome)\\n        internal\\n        view\\n        returns (BetType[] memory)\\n    {\\n        BetType[] memory losingOutcomes = new BetType[](2);\\n\\n        uint256 losingOutcomesIndex = 0;\\n        for (uint256 i = 0; i < betTypes.length; i++) {\\n            if (betTypes[i] != outcome) {\\n                losingOutcomes[losingOutcomesIndex] = betTypes[i];\\n                losingOutcomesIndex += 1;\\n            }\\n        }\\n        return losingOutcomes;\\n    }\\n\\n    function getTotalAmountBetOnFixtureOutcomes(\\n        string memory fixtureID,\\n        BetType[] memory outcomes\\n    ) internal view returns (uint256) {\\n        uint256 amount;\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\n            amount += getTotalAmountBetOnFixtureOutcome(fixtureID, outcomes[i]);\\n        }\\n        return amount;\\n    }\\n\\n    function getTotalAmountBetOnFixtureOutcome(\\n        string memory fixtureID,\\n        BetType outcome\\n    ) internal view returns (uint256) {\\n        uint256 amount;\\n        for (\\n            uint256 i = 0;\\n            i < historicalBetters[fixtureID][outcome].length;\\n            i++\\n        ) {\\n            address better = historicalBetters[fixtureID][outcome][i];\\n            if (activeBetters[fixtureID][outcome][better]) {\\n                amount += amounts[fixtureID][outcome][better];\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    // fulfillFixturePayoutObligations calculates the obligations (amount we owe to each\\n    // winning staker for this fixture)\\n    function fulfillFixturePayoutObligations(\\n        string memory fixtureID,\\n        BetType result,\\n        uint256 winningAmount,\\n        uint256 totalAmount\\n    ) internal {\\n        if (bettingState[fixtureID] != BettingState.FULFILLING) {\\n            revert(\\\"Fixture bet state is not FULFILLING.\\\");\\n        }\\n\\n        for (\\n            uint256 i = 0;\\n            i < historicalBetters[fixtureID][result].length;\\n            i++\\n        ) {\\n            address better = historicalBetters[fixtureID][result][i];\\n            if (activeBetters[fixtureID][result][better]) {\\n                uint256 betterAmount = amounts[fixtureID][result][better];\\n                uint256 betterObligation = betterAmount *\\n                    (totalAmount / winningAmount);\\n                obligations[fixtureID][better] = betterObligation;\\n\\n                amounts[fixtureID][result][better] = 0;\\n                activeBetters[fixtureID][result][better] = false;\\n                payable(better).transfer(betterObligation);\\n                emit BetPayout(better, fixtureID, betterObligation);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd39af837a5faa09c31026654def57fb984c67f42cec220159efde9843e8afa60\",\"license\":\"Unlicense\"},\"contracts/SportsOracleConsumer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\n\\r\\n/**\\r\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\r\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\\r\\n */\\r\\n\\r\\nabstract contract SportsOracleConsumer is ChainlinkClient, ConfirmedOwner {\\r\\n    using Chainlink for Chainlink.Request;\\r\\n\\r\\n    address public chainlink;\\r\\n    string public sportsOracleURI;\\r\\n\\r\\n    bytes32 private jobId;\\r\\n    uint256 private fee;\\r\\n\\r\\n    // multiple params returned in a single oracle response\\r\\n    string public fixtureResult;\\r\\n\\r\\n    event RequestedFixtureParameters(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID\\r\\n    );\\r\\n\\r\\n    event RequestFixtureParametersFulfilled(\\r\\n        bytes32 indexed requestId,\\r\\n        string fixtureID,\\r\\n        string fixtureResult,\\r\\n        uint256 kickoff\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the link token and target oracle\\r\\n     * @dev The oracle address must be an Operator contract for multiword response\\r\\n     *\\r\\n     *\\r\\n     * Kovan Testnet details:\\r\\n     * Link Token: 0xa36085F69e2889c224210F603D836748e7dC0088\\r\\n     * Oracle: 0x74EcC8Bdeb76F2C6760eD2dc8A46ca5e581fA656 (Chainlink DevRel)\\r\\n     * jobId: 53f9755920cd451a8fe46f5087468395\\r\\n     *\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _sportsOracleURI,\\r\\n        address _oracle,\\r\\n        address _link,\\r\\n        bytes32 _jobId,\\r\\n        uint256 _fee\\r\\n    ) ConfirmedOwner(msg.sender) {\\r\\n        sportsOracleURI = _sportsOracleURI;\\r\\n        setChainlinkToken(_link);\\r\\n        setChainlinkOracle(_oracle);\\r\\n        chainlink = _oracle;\\r\\n        jobId = _jobId;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request mutiple parameters from the oracle in a single transaction\\r\\n     */\\r\\n    function requestMultipleParameters(string memory fixtureID)\\r\\n        public\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        Chainlink.Request memory req = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.rawFulfillMultipleParameters.selector\\r\\n        );\\r\\n        req.add(\\\"urlResult\\\", string.concat(sportsOracleURI, fixtureID));\\r\\n        req.add(\\\"pathResult\\\", \\\"Result\\\");\\r\\n        req.add(\\\"pathKickoff\\\", \\\"Kickoff\\\");\\r\\n        return sendChainlinkRequest(req, fee); // MWR API.\\r\\n    }\\r\\n\\r\\n    function rawFulfillMultipleParameters(\\r\\n        bytes32 _requestId,\\r\\n        string memory _resultResponse,\\r\\n        uint256 _kickoffResponse\\r\\n    ) external {\\r\\n        require(msg.sender == chainlink, \\\"Only ChainlinkClient can fulfill\\\");\\r\\n        fulfillMultipleParameters(\\r\\n            _requestId,\\r\\n            _resultResponse,\\r\\n            _kickoffResponse\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillMultipleParameters(\\r\\n        bytes32 _requestId,\\r\\n        string memory _resultResponse,\\r\\n        uint256 _kickoffResponse\\r\\n    ) internal virtual;\\r\\n\\r\\n    /**\\r\\n     * Allow withdraw of Link tokens from the contract\\r\\n     */\\r\\n    function withdrawLink() public onlyOwner {\\r\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\r\\n        require(\\r\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4994bb49b4c140c554ad7d8a1a81c1e81346c795c9a8f82fc3ce29c5461496d1\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600455655af3107a4000600e5562093a80600f556115186010553480156200002d57600080fd5b5060405162005f1138038062005f118339818101604052810190620000539190620008b8565b8484848484338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c590620009c0565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001565762000155816200030760201b60201c565b5b50505084600990805190602001906200017192919062000590565b5062000183836200043960201b60201c565b62000194846200047d60201b60201c565b83600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600a8190555080600b8190555050505050506200021860405180606001604052806031815260200162005ee06031913986620004c160201b62001a091760201c565b6000600d600060038110620002325762000231620009e2565b5b602091828204019190066101000a81548160ff021916908360028111156200025f576200025e62000a11565b5b02179055506001600d6001600381106200027e576200027d620009e2565b5b602091828204019190066101000a81548160ff02191690836002811115620002ab57620002aa62000a11565b5b02179055506002600d600260038110620002ca57620002c9620009e2565b5b602091828204019190066101000a81548160ff02191690836002811115620002f757620002f662000a11565b5b0217905550505050505062000b9e565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000379576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003709062000a90565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620005638282604051602401620004da92919062000afe565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200056760201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546200059e9062000b68565b90600052602060002090601f016020900481019282620005c257600085556200060e565b82601f10620005dd57805160ff19168380011785556200060e565b828001600101855582156200060e579182015b828111156200060d578251825591602001919060010190620005f0565b5b5090506200061d919062000621565b5090565b5b808211156200063c57600081600090555060010162000622565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620006a9826200065e565b810181811067ffffffffffffffff82111715620006cb57620006ca6200066f565b5b80604052505050565b6000620006e062000640565b9050620006ee82826200069e565b919050565b600067ffffffffffffffff8211156200071157620007106200066f565b5b6200071c826200065e565b9050602081019050919050565b60005b83811015620007495780820151818401526020810190506200072c565b8381111562000759576000848401525b50505050565b6000620007766200077084620006f3565b620006d4565b90508281526020810184848401111562000795576200079462000659565b5b620007a284828562000729565b509392505050565b600082601f830112620007c257620007c162000654565b5b8151620007d48482602086016200075f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200080a82620007dd565b9050919050565b6200081c81620007fd565b81146200082857600080fd5b50565b6000815190506200083c8162000811565b92915050565b6000819050919050565b620008578162000842565b81146200086357600080fd5b50565b60008151905062000877816200084c565b92915050565b6000819050919050565b62000892816200087d565b81146200089e57600080fd5b50565b600081519050620008b28162000887565b92915050565b600080600080600060a08688031215620008d757620008d66200064a565b5b600086015167ffffffffffffffff811115620008f857620008f76200064f565b5b6200090688828901620007aa565b955050602062000919888289016200082b565b94505060406200092c888289016200082b565b93505060606200093f8882890162000866565b92505060806200095288828901620008a1565b9150509295509295909350565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620009a86018836200095f565b9150620009b58262000970565b602082019050919050565b60006020820190508181036000830152620009db8162000999565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600062000a786017836200095f565b915062000a858262000a40565b602082019050919050565b6000602082019050818103600083015262000aab8162000a69565b9050919050565b600081519050919050565b600062000aca8262000ab2565b62000ad681856200095f565b935062000ae881856020860162000729565b62000af3816200065e565b840191505092915050565b6000604082019050818103600083015262000b1a818562000abd565b9050818103602083015262000b30818462000abd565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b8157607f821691505b6020821081141562000b985762000b9762000b39565b5b50919050565b6153328062000bae6000396000f3fe6080604052600436106101805760003560e01c80638da5cb5b116100d1578063cbef85c21161008a578063f2fde38b11610064578063f2fde38b14610572578063f7c60c0c1461059b578063fbe91393146105c6578063ffebd1721461060357610180565b8063cbef85c2146104cf578063edb160701461050c578063ef40efde1461054957610180565b80638da5cb5b146103bd5780638dc654a2146103e85780639c3feeb7146103ff578063aa0660901461042a578063b148cdf114610467578063c8fe739c1461049257610180565b80635e5243191161013e5780636e2a3a84116101185780636e2a3a841461031757806379ba50971461034057806380b71dca1461035757806384f4614e1461038057610180565b80635e5243191461028657806362098ff7146102af578063649677e1146102ec57610180565b8062e1a75b1461018557806301ec29c9146101ae578063106246d8146101d7578063401bf0831461020257806340364d111461023f5780634bfc91ee1461025b575b600080fd5b34801561019157600080fd5b506101ac60048036038101906101a79190613ad0565b610640565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190613ad0565b6106d6565b005b3480156101e357600080fd5b506101ec61077f565b6040516101f99190613b32565b60405180910390f35b34801561020e57600080fd5b5061022960048036038101906102249190613b83565b610785565b6040516102369190613c38565b60405180910390f35b61025960048036038101906102549190613c7f565b610825565b005b34801561026757600080fd5b50610270610b5f565b60405161027d9190613b32565b60405180910390f35b34801561029257600080fd5b506102ad60048036038101906102a89190613d07565b610b65565b005b3480156102bb57600080fd5b506102d660048036038101906102d19190613d76565b610fdf565b6040516102e39190613e1a565b60405180910390f35b3480156102f857600080fd5b50610301611009565b60405161030e9190613b32565b60405180910390f35b34801561032357600080fd5b5061033e60048036038101906103399190613ad0565b61100f565b005b34801561034c57600080fd5b506103556110ae565b005b34801561036357600080fd5b5061037e60048036038101906103799190613e35565b611245565b005b34801561038c57600080fd5b506103a760048036038101906103a29190613ad0565b6112e5565b6040516103b49190613f7f565b60405180910390f35b3480156103c957600080fd5b506103d261138d565b6040516103df9190613fdb565b60405180910390f35b3480156103f457600080fd5b506103fd6113b7565b005b34801561040b57600080fd5b50610414611504565b6040516104219190613fdb565b60405180910390f35b34801561043657600080fd5b50610451600480360381019061044c9190614022565b61152a565b60405161045e9190613b32565b60405180910390f35b34801561047357600080fd5b5061047c611572565b6040516104899190613c38565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190613d07565b611600565b6040516104c69190613fdb565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f19190614022565b611671565b60405161050391906140ac565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e9190613ad0565b6116c3565b6040516105409190613b32565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b9190613ad0565b6116f1565b005b34801561057e57600080fd5b50610599600480360381019061059491906140c7565b61179a565b005b3480156105a757600080fd5b506105b06117ae565b6040516105bd9190613c38565b60405180910390f35b3480156105d257600080fd5b506105ed60048036038101906105e89190613ad0565b61183c565b6040516105fa9190614103565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190613ad0565b611872565b604051610637919061412d565b60405180910390f35b6001600481111561065457610653613da3565b5b6015826040516106649190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561069257610691613da3565b5b14156106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca906141e7565b60405180910390fd5b50565b6106de611aa5565b600260048111156106f2576106f1613da3565b5b6015826040516107029190614184565b908152602001604051809103902060009054906101000a900460ff1660048111156107305761072f613da3565b5b1415610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890614253565b60405180910390fd5b61077c816002611b37565b50565b600f5481565b601760205280600052604060002060009150905080546107a4906142a2565b80601f01602080910402602001604051908101604052809291908181526020018280546107d0906142a2565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b505050505081565b61082e82611bba565b6001600481111561084257610841613da3565b5b6015836040516108529190614184565b908152602001604051809103902060009054906101000a900460ff1660048111156108805761087f613da3565b5b146108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790614320565b60405180910390fd5b600e54341015610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc9061438c565b60405180910390fd5b346013836040516109169190614184565b9081526020016040518091039020600083600281111561093957610938613da3565b5b600281111561094b5761094a613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109a591906143db565b925050819055506011826040516109bc9190614184565b908152602001604051809103902060008260028111156109df576109de613da3565b5b60028111156109f1576109f0613da3565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601283604051610a729190614184565b90815260200160405180910390206000836002811115610a9557610a94613da3565b5b6002811115610aa757610aa6613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1a48cf6315f5f44cf8ac3a5105296caf8a73f64b40f9a6b7cbf8ba65ca930fd4833484604051610b5393929190614431565b60405180910390a25050565b60105481565b60008111610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f906144bb565b60405180910390fd5b610bb183611bba565b60016004811115610bc557610bc4613da3565b5b601584604051610bd59190614184565b908152602001604051809103902060009054906101000a900460ff166004811115610c0357610c02613da3565b5b14610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90614527565b60405180910390fd5b6000601384604051610c559190614184565b90815260200160405180910390206000846002811115610c7857610c77613da3565b5b6002811115610c8a57610c89613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610d1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1290614593565b60405180910390fd5b80821115610d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d55906145ff565b60405180910390fd5b8181610d6a919061461f565b601385604051610d7a9190614184565b90815260200160405180910390206000856002811115610d9d57610d9c613da3565b5b6002811115610daf57610dae613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601385604051610e109190614184565b90815260200160405180910390206000856002811115610e3357610e32613da3565b5b6002811115610e4557610e44613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610f40576000601285604051610ea89190614184565b90815260200160405180910390206000856002811115610ecb57610eca613da3565b5b6002811115610edd57610edc613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f86573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f3b118062ef97715cdb7fc34e6b3bc6bf1c6ddbbbbc4e8d6f13eff984080d08858486604051610fd193929190614431565b60405180910390a250505050565b600d8160038110610fef57600080fd5b60209182820401919006915054906101000a900460ff1681565b600e5481565b6002600481111561102357611022613da3565b5b6015826040516110339190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561106157611060613da3565b5b14156110a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110999061469f565b60405180910390fd5b6110ab81611d21565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461113e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111359061470b565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90614777565b60405180910390fd5b6112e0838383611d92565b505050565b6112ed6137ec565b60405180606001604052806015846040516113089190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561133657611335613da3565b5b81526020016040518060600160405280611351866000612013565b8152602001611361866001612013565b8152602001611371866002612013565b8152508152602001611383843361226c565b8152509050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113bf611aa5565b60006113c9612448565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114219190613fdb565b602060405180830381865afa15801561143e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146291906147ac565b6040518363ffffffff1660e01b815260040161147f9291906147d9565b6020604051808303816000875af115801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c2919061482e565b611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f8906148a7565b60405180910390fd5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60138380516020810182018051848252602083016020850120818352809550505050505060205281600052604060002060205280600052604060002060009250925050505481565b6009805461157f906142a2565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab906142a2565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b505050505081565b601183805160208101820180518482526020830160208501208183528095505050505050602052816000526040600020818154811061163e57600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601283805160208101820180518482526020830160208501208183528095505050505050602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b6016818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6116f9611aa5565b6000600481111561170d5761170c613da3565b5b60158260405161171d9190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561174b5761174a613da3565b5b141561178c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178390614913565b60405180910390fd5b611797816000611b37565b50565b6117a2611aa5565b6117ab81612472565b50565b600c80546117bb906142a2565b80601f01602080910402602001604051908101604052809291908181526020018280546117e7906142a2565b80156118345780601f1061180957610100808354040283529160200191611834565b820191906000526020600020905b81548152906001019060200180831161181757829003601f168201915b505050505081565b6015818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600080611889600a54306380b71dca60e01b6125a1565b90506118f76040518060400160405280600981526020017f75726c526573756c7400000000000000000000000000000000000000000000008152506009856040516020016118d89291906149c7565b604051602081830303815290604052836125d29092919063ffffffff16565b6119766040518060400160405280600a81526020017f70617468526573756c74000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f526573756c740000000000000000000000000000000000000000000000000000815250836125d29092919063ffffffff16565b6119f56040518060400160405280600b81526020017f706174684b69636b6f66660000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4b69636b6f666600000000000000000000000000000000000000000000000000815250836125d29092919063ffffffff16565b611a0181600b54612605565b915050919050565b611aa18282604051602401611a1f9291906149eb565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061263c565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90614a6e565b60405180910390fd5b565b80601583604051611b489190614184565b908152602001604051809103902060006101000a81548160ff02191690836004811115611b7857611b77613da3565b5b02179055507fe10ba6722d7a7a91bf343a0f8e5b026910dbc4a2ebca276930dff31703c59a708282604051611bae929190614a8e565b60405180910390a15050565b6000601682604051611bcc9190614184565b90815260200160405180910390205490506000811415611bec5750611d1e565b60006004811115611c0057611bff613da3565b5b601583604051611c109190614184565b908152602001604051809103902060009054906101000a900460ff166004811115611c3e57611c3d613da3565b5b148015611c58575060105481611c54919061461f565b4211155b8015611c715750600f5481611c6d919061461f565b4210155b8015611c805750600060105414155b15611c9157611c90826001611b37565b5b60016004811115611ca557611ca4613da3565b5b601583604051611cb59190614184565b908152602001604051809103902060009054906101000a900460ff166004811115611ce357611ce2613da3565b5b148015611cfc575060105481611cf9919061461f565b42115b8015611d0b5750600060105414155b15611d1c57611d1b826002611b37565b5b505b50565b6000611d2c82611872565b905081601760008381526020019081526020016000209080519060200190611d5592919061382b565b50807fc36e98a50a4fd27efe75de15a0e1c01e0ccba2218c7871d3c836905bfe1bc3e183604051611d869190613c38565b60405180910390a25050565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90614b30565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a26000601760008681526020019081526020016000208054611eb7906142a2565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee3906142a2565b8015611f305780601f10611f0557610100808354040283529160200191611f30565b820191906000526020600020905b815481529060010190602001808311611f1357829003601f168201915b50505050509050847f6125286ff7c688816bd3feb69d5aa9e9720624656a8478a8f351fa81a0d66004828686604051611f6b93929190614b50565b60405180910390a2611f7d8184612665565b611f8681611bba565b60026004811115611f9a57611f99613da3565b5b601582604051611faa9190614184565b908152602001604051809103902060009054906101000a900460ff166004811115611fd857611fd7613da3565b5b148015611fe6575060008451115b1561200c57611ff6816003611b37565b61200081856126eb565b61200b816004611b37565b5b5050505050565b60008060005b6011856040516120299190614184565b9081526020016040518091039020600085600281111561204c5761204b613da3565b5b600281111561205e5761205d613da3565b5b8152602001908152602001600020805490508110156122615760006011866040516120899190614184565b908152602001604051809103902060008660028111156120ac576120ab613da3565b5b60028111156120be576120bd613da3565b5b815260200190815260200160002082815481106120de576120dd614b95565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060128660405161211b9190614184565b9081526020016040518091039020600086600281111561213e5761213d613da3565b5b60028111156121505761214f613da3565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561224d576013866040516121be9190614184565b908152602001604051809103902060008660028111156121e1576121e0613da3565b5b60028111156121f3576121f2613da3565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361224a91906143db565b92505b50808061225990614bc4565b915050612019565b508091505092915050565b6122746138b1565b604051806060016040528060138560405161228f9190614184565b908152602001604051809103902060008060028111156122b2576122b1613da3565b5b60028111156122c4576122c3613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020016013856040516123259190614184565b908152602001604051809103902060006001600281111561234957612348613da3565b5b600281111561235b5761235a613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020016013856040516123bc9190614184565b908152602001604051809103902060006002808111156123df576123de613da3565b5b60028111156123f1576123f0613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815250905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d890614c59565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6125a96138d2565b6125b16138d2565b6125c885858584612791909392919063ffffffff16565b9150509392505050565b6125e982846080015161284190919063ffffffff16565b61260081846080015161284190919063ffffffff16565b505050565b6000612634600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484612866565b905092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6016826040516126759190614184565b90815260200160405180910390205481146126e7578060168360405161269b9190614184565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a382826040516126de929190614c79565b60405180910390a15b5050565b60006126f78383612932565b9050606081816000815181106127105761270f614b95565b5b6020026020010190600281111561272a57612729613da3565b5b9081600281111561273e5761273d613da3565b5b81525050600061274d83612abd565b9050600061275b8684612c0b565b905060006127698784612c0b565b90506000818361277991906143db565b905061278788878584612c69565b5050505050505050565b6127996138d2565b6127a98560800151610100613197565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61284e8260038351613201565b612861818361338690919063ffffffff16565b505050565b600080600454905060018161287b91906143db565b6004819055506000634042994660e01b60008087600001513089604001518760018c60800151600001516040516024016128bc989796959493929190614d39565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612927868386846133a8565b925050509392505050565b6000612973826040518060400160405280600481526020017f484f4d450000000000000000000000000000000000000000000000000000000081525061353d565b156129815760009050612ab7565b6129c0826040518060400160405280600481526020017f445241570000000000000000000000000000000000000000000000000000000081525061353d565b156129ce5760019050612ab7565b612a0d826040518060400160405280600481526020017f415741590000000000000000000000000000000000000000000000000000000081525061353d565b15612a1b5760029050612ab7565b60008383604051602001612a30929190614e0a565b60405160208183030381529060405290507f2a2c16a3ce1dea0db612b14a8fdc9a8d316acc87914b4d66440d119b41e8615f8482604051612a729291906149eb565b60405180910390a1806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aae9190613c38565b60405180910390fd5b92915050565b60606000600267ffffffffffffffff811115612adc57612adb6139a5565b5b604051908082528060200260200182016040528015612b0a5781602001602082028036833780820191505090505b5090506000805b6003811015612c0057846002811115612b2d57612b2c613da3565b5b600d8260038110612b4157612b40614b95565b5b602091828204019190069054906101000a900460ff166002811115612b6957612b68613da3565b5b14612bed57600d8160038110612b8257612b81614b95565b5b602091828204019190069054906101000a900460ff16838381518110612bab57612baa614b95565b5b60200260200101906002811115612bc557612bc4613da3565b5b90816002811115612bd957612bd8613da3565b5b81525050600182612bea91906143db565b91505b8080612bf890614bc4565b915050612b11565b508192505050919050565b60008060005b8351811015612c5e57612c3e85858381518110612c3157612c30614b95565b5b6020026020010151612013565b82612c4991906143db565b91508080612c5690614bc4565b915050612c11565b508091505092915050565b60036004811115612c7d57612c7c613da3565b5b601585604051612c8d9190614184565b908152602001604051809103902060009054906101000a900460ff166004811115612cbb57612cba613da3565b5b14612cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf290614ebe565b60405180910390fd5b60005b601185604051612d0e9190614184565b90815260200160405180910390206000856002811115612d3157612d30613da3565b5b6002811115612d4357612d42613da3565b5b815260200190815260200160002080549050811015613190576000601186604051612d6e9190614184565b90815260200160405180910390206000866002811115612d9157612d90613da3565b5b6002811115612da357612da2613da3565b5b81526020019081526020016000208281548110612dc357612dc2614b95565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601286604051612e009190614184565b90815260200160405180910390206000866002811115612e2357612e22613da3565b5b6002811115612e3557612e34613da3565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561317c576000601387604051612ea59190614184565b90815260200160405180910390206000876002811115612ec857612ec7613da3565b5b6002811115612eda57612ed9613da3565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008585612f369190614f0d565b82612f419190614f3e565b905080601489604051612f549190614184565b908152602001604051809103902060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601389604051612fb59190614184565b90815260200160405180910390206000896002811115612fd857612fd7613da3565b5b6002811115612fea57612fe9613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060128960405161304b9190614184565b9081526020016040518091039020600089600281111561306e5761306d613da3565b5b60028111156130805761307f613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613128573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd8983604051613171929190614c79565b60405180910390a250505b50808061318890614bc4565b915050612cfe565b5050505050565b61319f61393f565b60006020836131ae9190614f98565b146131da576020826131c09190614f98565b60206131cc919061461f565b826131d791906143db565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611613238576132328160058460ff16901b60ff16178461359690919063ffffffff16565b50613381565b60ff8167ffffffffffffffff161161328e57613267601860058460ff16901b178461359690919063ffffffff16565b506132888167ffffffffffffffff166001856135b69092919063ffffffff16565b50613380565b61ffff8167ffffffffffffffff16116132e5576132be601960058460ff16901b178461359690919063ffffffff16565b506132df8167ffffffffffffffff166002856135b69092919063ffffffff16565b5061337f565b63ffffffff8167ffffffffffffffff161161333e57613317601a60058460ff16901b178461359690919063ffffffff16565b506133388167ffffffffffffffff166004856135b69092919063ffffffff16565b5061337e565b61335b601b60058460ff16901b178461359690919063ffffffff16565b5061337c8167ffffffffffffffff166008856135b69092919063ffffffff16565b505b5b5b5b505050565b61338e61393f565b6133a0838460000151518485516135d8565b905092915050565b600030846040516020016133bd929190615082565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016134b3939291906150ae565b6020604051808303816000875af11580156134d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f6919061482e565b613535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352c9061515e565b60405180910390fd5b949350505050565b6000816040516020016135509190614184565b60405160208183030381529060405280519060200120836040516020016135779190614184565b6040516020818303038152906040528051906020012014905092915050565b61359e61393f565b6135ae83846000015151846136c7565b905092915050565b6135be61393f565b6135cf84856000015151858561371e565b90509392505050565b6135e061393f565b82518211156135ee57600080fd5b846020015182856135ff91906143db565b1115613634576136338560026136248860200151888761361f91906143db565b6137ac565b61362e9190614f3e565b6137c8565b5b6000808651805187602083010193508088870111156136535787860182525b60208701925050505b6020841061369a578051825260208261367591906143db565b915060208161368491906143db565b9050602084613693919061461f565b935061365c565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6136cf61393f565b836020015183106136f5576136f484600286602001516136ef9190614f3e565b6137c8565b5b8351805160208583010184815381861415613711576001820183525b5050508390509392505050565b61372661393f565b8460200151848361373791906143db565b111561375f5761375e856002868561374f91906143db565b6137599190614f3e565b6137c8565b5b600060018361010061377191906152b1565b61377b919061461f565b9050855183868201018583198251161781528151858801111561379e5784870182525b505085915050949350505050565b6000818311156137be578290506137c2565b8190505b92915050565b6000826000015190506137db8383613197565b506137e68382613386565b50505050565b60405180606001604052806000600481111561380b5761380a613da3565b5b81526020016138186138b1565b81526020016138256138b1565b81525090565b828054613837906142a2565b90600052602060002090601f01602090048101928261385957600085556138a0565b82601f1061387257805160ff19168380011785556138a0565b828001600101855582156138a0579182015b8281111561389f578251825591602001919060010190613884565b5b5090506138ad9190613959565b5090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161393961393f565b81525090565b604051806040016040528060608152602001600081525090565b5b8082111561397257600081600090555060010161395a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139dd82613994565b810181811067ffffffffffffffff821117156139fc576139fb6139a5565b5b80604052505050565b6000613a0f613976565b9050613a1b82826139d4565b919050565b600067ffffffffffffffff821115613a3b57613a3a6139a5565b5b613a4482613994565b9050602081019050919050565b82818337600083830152505050565b6000613a73613a6e84613a20565b613a05565b905082815260208101848484011115613a8f57613a8e61398f565b5b613a9a848285613a51565b509392505050565b600082601f830112613ab757613ab661398a565b5b8135613ac7848260208601613a60565b91505092915050565b600060208284031215613ae657613ae5613980565b5b600082013567ffffffffffffffff811115613b0457613b03613985565b5b613b1084828501613aa2565b91505092915050565b6000819050919050565b613b2c81613b19565b82525050565b6000602082019050613b476000830184613b23565b92915050565b6000819050919050565b613b6081613b4d565b8114613b6b57600080fd5b50565b600081359050613b7d81613b57565b92915050565b600060208284031215613b9957613b98613980565b5b6000613ba784828501613b6e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613bea578082015181840152602081019050613bcf565b83811115613bf9576000848401525b50505050565b6000613c0a82613bb0565b613c148185613bbb565b9350613c24818560208601613bcc565b613c2d81613994565b840191505092915050565b60006020820190508181036000830152613c528184613bff565b905092915050565b60038110613c6757600080fd5b50565b600081359050613c7981613c5a565b92915050565b60008060408385031215613c9657613c95613980565b5b600083013567ffffffffffffffff811115613cb457613cb3613985565b5b613cc085828601613aa2565b9250506020613cd185828601613c6a565b9150509250929050565b613ce481613b19565b8114613cef57600080fd5b50565b600081359050613d0181613cdb565b92915050565b600080600060608486031215613d2057613d1f613980565b5b600084013567ffffffffffffffff811115613d3e57613d3d613985565b5b613d4a86828701613aa2565b9350506020613d5b86828701613c6a565b9250506040613d6c86828701613cf2565b9150509250925092565b600060208284031215613d8c57613d8b613980565b5b6000613d9a84828501613cf2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613de357613de2613da3565b5b50565b6000819050613df482613dd2565b919050565b6000613e0482613de6565b9050919050565b613e1481613df9565b82525050565b6000602082019050613e2f6000830184613e0b565b92915050565b600080600060608486031215613e4e57613e4d613980565b5b6000613e5c86828701613b6e565b935050602084013567ffffffffffffffff811115613e7d57613e7c613985565b5b613e8986828701613aa2565b9250506040613e9a86828701613cf2565b9150509250925092565b60058110613eb557613eb4613da3565b5b50565b6000819050613ec682613ea4565b919050565b6000613ed682613eb8565b9050919050565b613ee681613ecb565b82525050565b613ef581613b19565b82525050565b606082016000820151613f116000850182613eec565b506020820151613f246020850182613eec565b506040820151613f376040850182613eec565b50505050565b60e082016000820151613f536000850182613edd565b506020820151613f666020850182613efb565b506040820151613f796080850182613efb565b50505050565b600060e082019050613f946000830184613f3d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613fc582613f9a565b9050919050565b613fd581613fba565b82525050565b6000602082019050613ff06000830184613fcc565b92915050565b613fff81613fba565b811461400a57600080fd5b50565b60008135905061401c81613ff6565b92915050565b60008060006060848603121561403b5761403a613980565b5b600084013567ffffffffffffffff81111561405957614058613985565b5b61406586828701613aa2565b935050602061407686828701613c6a565b92505060406140878682870161400d565b9150509250925092565b60008115159050919050565b6140a681614091565b82525050565b60006020820190506140c1600083018461409d565b92915050565b6000602082840312156140dd576140dc613980565b5b60006140eb8482850161400d565b91505092915050565b6140fd81613ecb565b82525050565b600060208201905061411860008301846140f4565b92915050565b61412781613b4d565b82525050565b6000602082019050614142600083018461411e565b92915050565b600081905092915050565b600061415e82613bb0565b6141688185614148565b9350614178818560208601613bcc565b80840191505092915050565b60006141908284614153565b915081905092915050565b7f42657420737461746520697320616c7265616479204f50454e2e000000000000600082015250565b60006141d1601a83613bbb565b91506141dc8261419b565b602082019050919050565b60006020820190508181036000830152614200816141c4565b9050919050565b7f42657420737461746520697320616c7265616479204157414954494e472e0000600082015250565b600061423d601e83613bbb565b915061424882614207565b602082019050919050565b6000602082019050818103600083015261426c81614230565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142ba57607f821691505b602082108114156142ce576142cd614273565b5b50919050565b7f426574206163746976697479206973206e6f74206f70656e2e00000000000000600082015250565b600061430a601983613bbb565b9150614315826142d4565b602082019050919050565b60006020820190508181036000830152614339816142fd565b9050919050565b7f416d6f756e742069732062656c6f7720656e7472616e6365206665652e000000600082015250565b6000614376601d83613bbb565b915061438182614340565b602082019050919050565b600060208201905081810360008301526143a581614369565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143e682613b19565b91506143f183613b19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614426576144256143ac565b5b828201905092915050565b6000606082019050818103600083015261444b8186613bff565b905061445a6020830185613b23565b6144676040830184613e0b565b949350505050565b7f416d6f756e742073686f756c6420657863656564207a65726f2e000000000000600082015250565b60006144a5601a83613bbb565b91506144b08261446f565b602082019050919050565b600060208201905081810360008301526144d481614498565b9050919050565b7f46697874757265206973206e6f7420696e204f70656e2073746174652e000000600082015250565b6000614511601d83613bbb565b915061451c826144db565b602082019050919050565b6000602082019050818103600083015261454081614504565b9050919050565b7f4e6f207374616b65206f6e207468697320616464726573732d726573756c742e600082015250565b600061457d602083613bbb565b915061458882614547565b602082019050919050565b600060208201905081810360008301526145ac81614570565b9050919050565b7f43757272656e74207374616b6520746f6f206c6f772e00000000000000000000600082015250565b60006145e9601683613bbb565b91506145f4826145b3565b602082019050919050565b60006020820190508181036000830152614618816145dc565b9050919050565b600061462a82613b19565b915061463583613b19565b925082821015614648576146476143ac565b5b828203905092915050565b7f426574207374617465206d757374206265204157414954494e472e0000000000600082015250565b6000614689601b83613bbb565b915061469482614653565b602082019050919050565b600060208201905081810360008301526146b88161467c565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006146f5601683613bbb565b9150614700826146bf565b602082019050919050565b60006020820190508181036000830152614724816146e8565b9050919050565b7f4f6e6c7920436861696e6c696e6b436c69656e742063616e2066756c66696c6c600082015250565b6000614761602083613bbb565b915061476c8261472b565b602082019050919050565b6000602082019050818103600083015261479081614754565b9050919050565b6000815190506147a681613cdb565b92915050565b6000602082840312156147c2576147c1613980565b5b60006147d084828501614797565b91505092915050565b60006040820190506147ee6000830185613fcc565b6147fb6020830184613b23565b9392505050565b61480b81614091565b811461481657600080fd5b50565b60008151905061482881614802565b92915050565b60006020828403121561484457614843613980565b5b600061485284828501614819565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000614891601283613bbb565b915061489c8261485b565b602082019050919050565b600060208201905081810360008301526148c081614884565b9050919050565b7f42657420737461746520697320616c726561647920434c4f5345442e00000000600082015250565b60006148fd601c83613bbb565b9150614908826148c7565b602082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b60008190508160005260206000209050919050565b60008154614955816142a2565b61495f8186614148565b9450600182166000811461497a576001811461498b576149be565b60ff198316865281860193506149be565b61499485614933565b60005b838110156149b657815481890152600182019150602081019050614997565b838801955050505b50505092915050565b60006149d38285614948565b91506149df8284614153565b91508190509392505050565b60006040820190508181036000830152614a058185613bff565b90508181036020830152614a198184613bff565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000614a58601683613bbb565b9150614a6382614a22565b602082019050919050565b60006020820190508181036000830152614a8781614a4b565b9050919050565b60006040820190508181036000830152614aa88185613bff565b9050614ab760208301846140f4565b9392505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000614b1a602883613bbb565b9150614b2582614abe565b604082019050919050565b60006020820190508181036000830152614b4981614b0d565b9050919050565b60006060820190508181036000830152614b6a8186613bff565b90508181036020830152614b7e8185613bff565b9050614b8d6040830184613b23565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614bcf82613b19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c0257614c016143ac565b5b600182019050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000614c43601783613bbb565b9150614c4e82614c0d565b602082019050919050565b60006020820190508181036000830152614c7281614c36565b9050919050565b60006040820190508181036000830152614c938185613bff565b9050614ca26020830184613b23565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614cde81614ca9565b82525050565b600081519050919050565b600082825260208201905092915050565b6000614d0b82614ce4565b614d158185614cef565b9350614d25818560208601613bcc565b614d2e81613994565b840191505092915050565b600061010082019050614d4f600083018b613fcc565b614d5c602083018a613b23565b614d69604083018961411e565b614d766060830188613fcc565b614d836080830187614cd5565b614d9060a0830186613b23565b614d9d60c0830185613b23565b81810360e0830152614daf8184614d00565b90509998505050505050505050565b7f4572726f72206f6e206669787475726520000000000000000000000000000000815250565b7f3a20556e6b6e6f776e20726573756c742066726f6d204150493a200000000000815250565b6000614e1582614dbe565b601182019150614e258285614153565b9150614e3082614de4565b601b82019150614e408284614153565b91508190509392505050565b7f4669787475726520626574207374617465206973206e6f742046554c46494c4c60008201527f494e472e00000000000000000000000000000000000000000000000000000000602082015250565b6000614ea8602483613bbb565b9150614eb382614e4c565b604082019050919050565b60006020820190508181036000830152614ed781614e9b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f1882613b19565b9150614f2383613b19565b925082614f3357614f32614ede565b5b828204905092915050565b6000614f4982613b19565b9150614f5483613b19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614f8d57614f8c6143ac565b5b828202905092915050565b6000614fa382613b19565b9150614fae83613b19565b925082614fbe57614fbd614ede565b5b828206905092915050565b6000819050919050565b6000614fee614fe9614fe484613f9a565b614fc9565b613f9a565b9050919050565b600061500082614fd3565b9050919050565b600061501282614ff5565b9050919050565b60008160601b9050919050565b600061503182615019565b9050919050565b600061504382615026565b9050919050565b61505b61505682615007565b615038565b82525050565b6000819050919050565b61507c61507782613b19565b615061565b82525050565b600061508e828561504a565b60148201915061509e828461506b565b6020820191508190509392505050565b60006060820190506150c36000830186613fcc565b6150d06020830185613b23565b81810360408301526150e28184614d00565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000615148602383613bbb565b9150615153826150ec565b604082019050919050565b600060208201905081810360008301526151778161513b565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156151d5578086048111156151b1576151b06143ac565b5b60018516156151c05780820291505b80810290506151ce8561517e565b9450615195565b94509492505050565b6000826151ee57600190506152aa565b816151fc57600090506152aa565b8160018114615212576002811461521c5761524b565b60019150506152aa565b60ff84111561522e5761522d6143ac565b5b8360020a915084821115615245576152446143ac565b5b506152aa565b5060208310610133831016604e8410600b84101617156152805782820a90508381111561527b5761527a6143ac565b5b6152aa565b61528d848484600161518b565b925090508184048111156152a4576152a36143ac565b5b81810290505b9392505050565b60006152bc82613b19565b91506152c783613b19565b92506152f47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846151de565b90509291505056fea26469706673582212206b37d8fac9f3c11755f7b74664279eeed2b360c51af415569a1219a6fd48f2ed64736f6c634300080c00334465706c6f79696e6720612053706f72747342657474696e6720776974682073706f727473206f7261636c65205552493a",
  "deployedBytecode": "0x6080604052600436106101805760003560e01c80638da5cb5b116100d1578063cbef85c21161008a578063f2fde38b11610064578063f2fde38b14610572578063f7c60c0c1461059b578063fbe91393146105c6578063ffebd1721461060357610180565b8063cbef85c2146104cf578063edb160701461050c578063ef40efde1461054957610180565b80638da5cb5b146103bd5780638dc654a2146103e85780639c3feeb7146103ff578063aa0660901461042a578063b148cdf114610467578063c8fe739c1461049257610180565b80635e5243191161013e5780636e2a3a84116101185780636e2a3a841461031757806379ba50971461034057806380b71dca1461035757806384f4614e1461038057610180565b80635e5243191461028657806362098ff7146102af578063649677e1146102ec57610180565b8062e1a75b1461018557806301ec29c9146101ae578063106246d8146101d7578063401bf0831461020257806340364d111461023f5780634bfc91ee1461025b575b600080fd5b34801561019157600080fd5b506101ac60048036038101906101a79190613ad0565b610640565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190613ad0565b6106d6565b005b3480156101e357600080fd5b506101ec61077f565b6040516101f99190613b32565b60405180910390f35b34801561020e57600080fd5b5061022960048036038101906102249190613b83565b610785565b6040516102369190613c38565b60405180910390f35b61025960048036038101906102549190613c7f565b610825565b005b34801561026757600080fd5b50610270610b5f565b60405161027d9190613b32565b60405180910390f35b34801561029257600080fd5b506102ad60048036038101906102a89190613d07565b610b65565b005b3480156102bb57600080fd5b506102d660048036038101906102d19190613d76565b610fdf565b6040516102e39190613e1a565b60405180910390f35b3480156102f857600080fd5b50610301611009565b60405161030e9190613b32565b60405180910390f35b34801561032357600080fd5b5061033e60048036038101906103399190613ad0565b61100f565b005b34801561034c57600080fd5b506103556110ae565b005b34801561036357600080fd5b5061037e60048036038101906103799190613e35565b611245565b005b34801561038c57600080fd5b506103a760048036038101906103a29190613ad0565b6112e5565b6040516103b49190613f7f565b60405180910390f35b3480156103c957600080fd5b506103d261138d565b6040516103df9190613fdb565b60405180910390f35b3480156103f457600080fd5b506103fd6113b7565b005b34801561040b57600080fd5b50610414611504565b6040516104219190613fdb565b60405180910390f35b34801561043657600080fd5b50610451600480360381019061044c9190614022565b61152a565b60405161045e9190613b32565b60405180910390f35b34801561047357600080fd5b5061047c611572565b6040516104899190613c38565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190613d07565b611600565b6040516104c69190613fdb565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f19190614022565b611671565b60405161050391906140ac565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e9190613ad0565b6116c3565b6040516105409190613b32565b60405180910390f35b34801561055557600080fd5b50610570600480360381019061056b9190613ad0565b6116f1565b005b34801561057e57600080fd5b50610599600480360381019061059491906140c7565b61179a565b005b3480156105a757600080fd5b506105b06117ae565b6040516105bd9190613c38565b60405180910390f35b3480156105d257600080fd5b506105ed60048036038101906105e89190613ad0565b61183c565b6040516105fa9190614103565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190613ad0565b611872565b604051610637919061412d565b60405180910390f35b6001600481111561065457610653613da3565b5b6015826040516106649190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561069257610691613da3565b5b14156106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca906141e7565b60405180910390fd5b50565b6106de611aa5565b600260048111156106f2576106f1613da3565b5b6015826040516107029190614184565b908152602001604051809103902060009054906101000a900460ff1660048111156107305761072f613da3565b5b1415610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890614253565b60405180910390fd5b61077c816002611b37565b50565b600f5481565b601760205280600052604060002060009150905080546107a4906142a2565b80601f01602080910402602001604051908101604052809291908181526020018280546107d0906142a2565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b505050505081565b61082e82611bba565b6001600481111561084257610841613da3565b5b6015836040516108529190614184565b908152602001604051809103902060009054906101000a900460ff1660048111156108805761087f613da3565b5b146108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790614320565b60405180910390fd5b600e54341015610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc9061438c565b60405180910390fd5b346013836040516109169190614184565b9081526020016040518091039020600083600281111561093957610938613da3565b5b600281111561094b5761094a613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109a591906143db565b925050819055506011826040516109bc9190614184565b908152602001604051809103902060008260028111156109df576109de613da3565b5b60028111156109f1576109f0613da3565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601283604051610a729190614184565b90815260200160405180910390206000836002811115610a9557610a94613da3565b5b6002811115610aa757610aa6613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1a48cf6315f5f44cf8ac3a5105296caf8a73f64b40f9a6b7cbf8ba65ca930fd4833484604051610b5393929190614431565b60405180910390a25050565b60105481565b60008111610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f906144bb565b60405180910390fd5b610bb183611bba565b60016004811115610bc557610bc4613da3565b5b601584604051610bd59190614184565b908152602001604051809103902060009054906101000a900460ff166004811115610c0357610c02613da3565b5b14610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90614527565b60405180910390fd5b6000601384604051610c559190614184565b90815260200160405180910390206000846002811115610c7857610c77613da3565b5b6002811115610c8a57610c89613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610d1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1290614593565b60405180910390fd5b80821115610d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d55906145ff565b60405180910390fd5b8181610d6a919061461f565b601385604051610d7a9190614184565b90815260200160405180910390206000856002811115610d9d57610d9c613da3565b5b6002811115610daf57610dae613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601385604051610e109190614184565b90815260200160405180910390206000856002811115610e3357610e32613da3565b5b6002811115610e4557610e44613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610f40576000601285604051610ea89190614184565b90815260200160405180910390206000856002811115610ecb57610eca613da3565b5b6002811115610edd57610edc613da3565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f86573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f3b118062ef97715cdb7fc34e6b3bc6bf1c6ddbbbbc4e8d6f13eff984080d08858486604051610fd193929190614431565b60405180910390a250505050565b600d8160038110610fef57600080fd5b60209182820401919006915054906101000a900460ff1681565b600e5481565b6002600481111561102357611022613da3565b5b6015826040516110339190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561106157611060613da3565b5b14156110a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110999061469f565b60405180910390fd5b6110ab81611d21565b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461113e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111359061470b565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90614777565b60405180910390fd5b6112e0838383611d92565b505050565b6112ed6137ec565b60405180606001604052806015846040516113089190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561133657611335613da3565b5b81526020016040518060600160405280611351866000612013565b8152602001611361866001612013565b8152602001611371866002612013565b8152508152602001611383843361226c565b8152509050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113bf611aa5565b60006113c9612448565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114219190613fdb565b602060405180830381865afa15801561143e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146291906147ac565b6040518363ffffffff1660e01b815260040161147f9291906147d9565b6020604051808303816000875af115801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c2919061482e565b611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f8906148a7565b60405180910390fd5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60138380516020810182018051848252602083016020850120818352809550505050505060205281600052604060002060205280600052604060002060009250925050505481565b6009805461157f906142a2565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab906142a2565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b505050505081565b601183805160208101820180518482526020830160208501208183528095505050505050602052816000526040600020818154811061163e57600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601283805160208101820180518482526020830160208501208183528095505050505050602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b6016818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6116f9611aa5565b6000600481111561170d5761170c613da3565b5b60158260405161171d9190614184565b908152602001604051809103902060009054906101000a900460ff16600481111561174b5761174a613da3565b5b141561178c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178390614913565b60405180910390fd5b611797816000611b37565b50565b6117a2611aa5565b6117ab81612472565b50565b600c80546117bb906142a2565b80601f01602080910402602001604051908101604052809291908181526020018280546117e7906142a2565b80156118345780601f1061180957610100808354040283529160200191611834565b820191906000526020600020905b81548152906001019060200180831161181757829003601f168201915b505050505081565b6015818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600080611889600a54306380b71dca60e01b6125a1565b90506118f76040518060400160405280600981526020017f75726c526573756c7400000000000000000000000000000000000000000000008152506009856040516020016118d89291906149c7565b604051602081830303815290604052836125d29092919063ffffffff16565b6119766040518060400160405280600a81526020017f70617468526573756c74000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f526573756c740000000000000000000000000000000000000000000000000000815250836125d29092919063ffffffff16565b6119f56040518060400160405280600b81526020017f706174684b69636b6f66660000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4b69636b6f666600000000000000000000000000000000000000000000000000815250836125d29092919063ffffffff16565b611a0181600b54612605565b915050919050565b611aa18282604051602401611a1f9291906149eb565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061263c565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90614a6e565b60405180910390fd5b565b80601583604051611b489190614184565b908152602001604051809103902060006101000a81548160ff02191690836004811115611b7857611b77613da3565b5b02179055507fe10ba6722d7a7a91bf343a0f8e5b026910dbc4a2ebca276930dff31703c59a708282604051611bae929190614a8e565b60405180910390a15050565b6000601682604051611bcc9190614184565b90815260200160405180910390205490506000811415611bec5750611d1e565b60006004811115611c0057611bff613da3565b5b601583604051611c109190614184565b908152602001604051809103902060009054906101000a900460ff166004811115611c3e57611c3d613da3565b5b148015611c58575060105481611c54919061461f565b4211155b8015611c715750600f5481611c6d919061461f565b4210155b8015611c805750600060105414155b15611c9157611c90826001611b37565b5b60016004811115611ca557611ca4613da3565b5b601583604051611cb59190614184565b908152602001604051809103902060009054906101000a900460ff166004811115611ce357611ce2613da3565b5b148015611cfc575060105481611cf9919061461f565b42115b8015611d0b5750600060105414155b15611d1c57611d1b826002611b37565b5b505b50565b6000611d2c82611872565b905081601760008381526020019081526020016000209080519060200190611d5592919061382b565b50807fc36e98a50a4fd27efe75de15a0e1c01e0ccba2218c7871d3c836905bfe1bc3e183604051611d869190613c38565b60405180910390a25050565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90614b30565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a26000601760008681526020019081526020016000208054611eb7906142a2565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee3906142a2565b8015611f305780601f10611f0557610100808354040283529160200191611f30565b820191906000526020600020905b815481529060010190602001808311611f1357829003601f168201915b50505050509050847f6125286ff7c688816bd3feb69d5aa9e9720624656a8478a8f351fa81a0d66004828686604051611f6b93929190614b50565b60405180910390a2611f7d8184612665565b611f8681611bba565b60026004811115611f9a57611f99613da3565b5b601582604051611faa9190614184565b908152602001604051809103902060009054906101000a900460ff166004811115611fd857611fd7613da3565b5b148015611fe6575060008451115b1561200c57611ff6816003611b37565b61200081856126eb565b61200b816004611b37565b5b5050505050565b60008060005b6011856040516120299190614184565b9081526020016040518091039020600085600281111561204c5761204b613da3565b5b600281111561205e5761205d613da3565b5b8152602001908152602001600020805490508110156122615760006011866040516120899190614184565b908152602001604051809103902060008660028111156120ac576120ab613da3565b5b60028111156120be576120bd613da3565b5b815260200190815260200160002082815481106120de576120dd614b95565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060128660405161211b9190614184565b9081526020016040518091039020600086600281111561213e5761213d613da3565b5b60028111156121505761214f613da3565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561224d576013866040516121be9190614184565b908152602001604051809103902060008660028111156121e1576121e0613da3565b5b60028111156121f3576121f2613da3565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361224a91906143db565b92505b50808061225990614bc4565b915050612019565b508091505092915050565b6122746138b1565b604051806060016040528060138560405161228f9190614184565b908152602001604051809103902060008060028111156122b2576122b1613da3565b5b60028111156122c4576122c3613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020016013856040516123259190614184565b908152602001604051809103902060006001600281111561234957612348613da3565b5b600281111561235b5761235a613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020016013856040516123bc9190614184565b908152602001604051809103902060006002808111156123df576123de613da3565b5b60028111156123f1576123f0613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815250905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d890614c59565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6125a96138d2565b6125b16138d2565b6125c885858584612791909392919063ffffffff16565b9150509392505050565b6125e982846080015161284190919063ffffffff16565b61260081846080015161284190919063ffffffff16565b505050565b6000612634600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484612866565b905092915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6016826040516126759190614184565b90815260200160405180910390205481146126e7578060168360405161269b9190614184565b9081526020016040518091039020819055507f20af5e7c127dd84267ef67d2a1fa455b47bc60840459b4db987929e37daf07a382826040516126de929190614c79565b60405180910390a15b5050565b60006126f78383612932565b9050606081816000815181106127105761270f614b95565b5b6020026020010190600281111561272a57612729613da3565b5b9081600281111561273e5761273d613da3565b5b81525050600061274d83612abd565b9050600061275b8684612c0b565b905060006127698784612c0b565b90506000818361277991906143db565b905061278788878584612c69565b5050505050505050565b6127996138d2565b6127a98560800151610100613197565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61284e8260038351613201565b612861818361338690919063ffffffff16565b505050565b600080600454905060018161287b91906143db565b6004819055506000634042994660e01b60008087600001513089604001518760018c60800151600001516040516024016128bc989796959493929190614d39565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612927868386846133a8565b925050509392505050565b6000612973826040518060400160405280600481526020017f484f4d450000000000000000000000000000000000000000000000000000000081525061353d565b156129815760009050612ab7565b6129c0826040518060400160405280600481526020017f445241570000000000000000000000000000000000000000000000000000000081525061353d565b156129ce5760019050612ab7565b612a0d826040518060400160405280600481526020017f415741590000000000000000000000000000000000000000000000000000000081525061353d565b15612a1b5760029050612ab7565b60008383604051602001612a30929190614e0a565b60405160208183030381529060405290507f2a2c16a3ce1dea0db612b14a8fdc9a8d316acc87914b4d66440d119b41e8615f8482604051612a729291906149eb565b60405180910390a1806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aae9190613c38565b60405180910390fd5b92915050565b60606000600267ffffffffffffffff811115612adc57612adb6139a5565b5b604051908082528060200260200182016040528015612b0a5781602001602082028036833780820191505090505b5090506000805b6003811015612c0057846002811115612b2d57612b2c613da3565b5b600d8260038110612b4157612b40614b95565b5b602091828204019190069054906101000a900460ff166002811115612b6957612b68613da3565b5b14612bed57600d8160038110612b8257612b81614b95565b5b602091828204019190069054906101000a900460ff16838381518110612bab57612baa614b95565b5b60200260200101906002811115612bc557612bc4613da3565b5b90816002811115612bd957612bd8613da3565b5b81525050600182612bea91906143db565b91505b8080612bf890614bc4565b915050612b11565b508192505050919050565b60008060005b8351811015612c5e57612c3e85858381518110612c3157612c30614b95565b5b6020026020010151612013565b82612c4991906143db565b91508080612c5690614bc4565b915050612c11565b508091505092915050565b60036004811115612c7d57612c7c613da3565b5b601585604051612c8d9190614184565b908152602001604051809103902060009054906101000a900460ff166004811115612cbb57612cba613da3565b5b14612cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf290614ebe565b60405180910390fd5b60005b601185604051612d0e9190614184565b90815260200160405180910390206000856002811115612d3157612d30613da3565b5b6002811115612d4357612d42613da3565b5b815260200190815260200160002080549050811015613190576000601186604051612d6e9190614184565b90815260200160405180910390206000866002811115612d9157612d90613da3565b5b6002811115612da357612da2613da3565b5b81526020019081526020016000208281548110612dc357612dc2614b95565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050601286604051612e009190614184565b90815260200160405180910390206000866002811115612e2357612e22613da3565b5b6002811115612e3557612e34613da3565b5b815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561317c576000601387604051612ea59190614184565b90815260200160405180910390206000876002811115612ec857612ec7613da3565b5b6002811115612eda57612ed9613da3565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008585612f369190614f0d565b82612f419190614f3e565b905080601489604051612f549190614184565b908152602001604051809103902060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601389604051612fb59190614184565b90815260200160405180910390206000896002811115612fd857612fd7613da3565b5b6002811115612fea57612fe9613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060128960405161304b9190614184565b9081526020016040518091039020600089600281111561306e5761306d613da3565b5b60028111156130805761307f613da3565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613128573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167fc0acd5bc47ab9bd28274b4de553779f718ae53f42f84fe011e7eed61cda99cbd8983604051613171929190614c79565b60405180910390a250505b50808061318890614bc4565b915050612cfe565b5050505050565b61319f61393f565b60006020836131ae9190614f98565b146131da576020826131c09190614f98565b60206131cc919061461f565b826131d791906143db565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611613238576132328160058460ff16901b60ff16178461359690919063ffffffff16565b50613381565b60ff8167ffffffffffffffff161161328e57613267601860058460ff16901b178461359690919063ffffffff16565b506132888167ffffffffffffffff166001856135b69092919063ffffffff16565b50613380565b61ffff8167ffffffffffffffff16116132e5576132be601960058460ff16901b178461359690919063ffffffff16565b506132df8167ffffffffffffffff166002856135b69092919063ffffffff16565b5061337f565b63ffffffff8167ffffffffffffffff161161333e57613317601a60058460ff16901b178461359690919063ffffffff16565b506133388167ffffffffffffffff166004856135b69092919063ffffffff16565b5061337e565b61335b601b60058460ff16901b178461359690919063ffffffff16565b5061337c8167ffffffffffffffff166008856135b69092919063ffffffff16565b505b5b5b5b505050565b61338e61393f565b6133a0838460000151518485516135d8565b905092915050565b600030846040516020016133bd929190615082565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016134b3939291906150ae565b6020604051808303816000875af11580156134d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f6919061482e565b613535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352c9061515e565b60405180910390fd5b949350505050565b6000816040516020016135509190614184565b60405160208183030381529060405280519060200120836040516020016135779190614184565b6040516020818303038152906040528051906020012014905092915050565b61359e61393f565b6135ae83846000015151846136c7565b905092915050565b6135be61393f565b6135cf84856000015151858561371e565b90509392505050565b6135e061393f565b82518211156135ee57600080fd5b846020015182856135ff91906143db565b1115613634576136338560026136248860200151888761361f91906143db565b6137ac565b61362e9190614f3e565b6137c8565b5b6000808651805187602083010193508088870111156136535787860182525b60208701925050505b6020841061369a578051825260208261367591906143db565b915060208161368491906143db565b9050602084613693919061461f565b935061365c565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6136cf61393f565b836020015183106136f5576136f484600286602001516136ef9190614f3e565b6137c8565b5b8351805160208583010184815381861415613711576001820183525b5050508390509392505050565b61372661393f565b8460200151848361373791906143db565b111561375f5761375e856002868561374f91906143db565b6137599190614f3e565b6137c8565b5b600060018361010061377191906152b1565b61377b919061461f565b9050855183868201018583198251161781528151858801111561379e5784870182525b505085915050949350505050565b6000818311156137be578290506137c2565b8190505b92915050565b6000826000015190506137db8383613197565b506137e68382613386565b50505050565b60405180606001604052806000600481111561380b5761380a613da3565b5b81526020016138186138b1565b81526020016138256138b1565b81525090565b828054613837906142a2565b90600052602060002090601f01602090048101928261385957600085556138a0565b82601f1061387257805160ff19168380011785556138a0565b828001600101855582156138a0579182015b8281111561389f578251825591602001919060010190613884565b5b5090506138ad9190613959565b5090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161393961393f565b81525090565b604051806040016040528060608152602001600081525090565b5b8082111561397257600081600090555060010161395a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139dd82613994565b810181811067ffffffffffffffff821117156139fc576139fb6139a5565b5b80604052505050565b6000613a0f613976565b9050613a1b82826139d4565b919050565b600067ffffffffffffffff821115613a3b57613a3a6139a5565b5b613a4482613994565b9050602081019050919050565b82818337600083830152505050565b6000613a73613a6e84613a20565b613a05565b905082815260208101848484011115613a8f57613a8e61398f565b5b613a9a848285613a51565b509392505050565b600082601f830112613ab757613ab661398a565b5b8135613ac7848260208601613a60565b91505092915050565b600060208284031215613ae657613ae5613980565b5b600082013567ffffffffffffffff811115613b0457613b03613985565b5b613b1084828501613aa2565b91505092915050565b6000819050919050565b613b2c81613b19565b82525050565b6000602082019050613b476000830184613b23565b92915050565b6000819050919050565b613b6081613b4d565b8114613b6b57600080fd5b50565b600081359050613b7d81613b57565b92915050565b600060208284031215613b9957613b98613980565b5b6000613ba784828501613b6e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613bea578082015181840152602081019050613bcf565b83811115613bf9576000848401525b50505050565b6000613c0a82613bb0565b613c148185613bbb565b9350613c24818560208601613bcc565b613c2d81613994565b840191505092915050565b60006020820190508181036000830152613c528184613bff565b905092915050565b60038110613c6757600080fd5b50565b600081359050613c7981613c5a565b92915050565b60008060408385031215613c9657613c95613980565b5b600083013567ffffffffffffffff811115613cb457613cb3613985565b5b613cc085828601613aa2565b9250506020613cd185828601613c6a565b9150509250929050565b613ce481613b19565b8114613cef57600080fd5b50565b600081359050613d0181613cdb565b92915050565b600080600060608486031215613d2057613d1f613980565b5b600084013567ffffffffffffffff811115613d3e57613d3d613985565b5b613d4a86828701613aa2565b9350506020613d5b86828701613c6a565b9250506040613d6c86828701613cf2565b9150509250925092565b600060208284031215613d8c57613d8b613980565b5b6000613d9a84828501613cf2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613de357613de2613da3565b5b50565b6000819050613df482613dd2565b919050565b6000613e0482613de6565b9050919050565b613e1481613df9565b82525050565b6000602082019050613e2f6000830184613e0b565b92915050565b600080600060608486031215613e4e57613e4d613980565b5b6000613e5c86828701613b6e565b935050602084013567ffffffffffffffff811115613e7d57613e7c613985565b5b613e8986828701613aa2565b9250506040613e9a86828701613cf2565b9150509250925092565b60058110613eb557613eb4613da3565b5b50565b6000819050613ec682613ea4565b919050565b6000613ed682613eb8565b9050919050565b613ee681613ecb565b82525050565b613ef581613b19565b82525050565b606082016000820151613f116000850182613eec565b506020820151613f246020850182613eec565b506040820151613f376040850182613eec565b50505050565b60e082016000820151613f536000850182613edd565b506020820151613f666020850182613efb565b506040820151613f796080850182613efb565b50505050565b600060e082019050613f946000830184613f3d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613fc582613f9a565b9050919050565b613fd581613fba565b82525050565b6000602082019050613ff06000830184613fcc565b92915050565b613fff81613fba565b811461400a57600080fd5b50565b60008135905061401c81613ff6565b92915050565b60008060006060848603121561403b5761403a613980565b5b600084013567ffffffffffffffff81111561405957614058613985565b5b61406586828701613aa2565b935050602061407686828701613c6a565b92505060406140878682870161400d565b9150509250925092565b60008115159050919050565b6140a681614091565b82525050565b60006020820190506140c1600083018461409d565b92915050565b6000602082840312156140dd576140dc613980565b5b60006140eb8482850161400d565b91505092915050565b6140fd81613ecb565b82525050565b600060208201905061411860008301846140f4565b92915050565b61412781613b4d565b82525050565b6000602082019050614142600083018461411e565b92915050565b600081905092915050565b600061415e82613bb0565b6141688185614148565b9350614178818560208601613bcc565b80840191505092915050565b60006141908284614153565b915081905092915050565b7f42657420737461746520697320616c7265616479204f50454e2e000000000000600082015250565b60006141d1601a83613bbb565b91506141dc8261419b565b602082019050919050565b60006020820190508181036000830152614200816141c4565b9050919050565b7f42657420737461746520697320616c7265616479204157414954494e472e0000600082015250565b600061423d601e83613bbb565b915061424882614207565b602082019050919050565b6000602082019050818103600083015261426c81614230565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142ba57607f821691505b602082108114156142ce576142cd614273565b5b50919050565b7f426574206163746976697479206973206e6f74206f70656e2e00000000000000600082015250565b600061430a601983613bbb565b9150614315826142d4565b602082019050919050565b60006020820190508181036000830152614339816142fd565b9050919050565b7f416d6f756e742069732062656c6f7720656e7472616e6365206665652e000000600082015250565b6000614376601d83613bbb565b915061438182614340565b602082019050919050565b600060208201905081810360008301526143a581614369565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143e682613b19565b91506143f183613b19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614426576144256143ac565b5b828201905092915050565b6000606082019050818103600083015261444b8186613bff565b905061445a6020830185613b23565b6144676040830184613e0b565b949350505050565b7f416d6f756e742073686f756c6420657863656564207a65726f2e000000000000600082015250565b60006144a5601a83613bbb565b91506144b08261446f565b602082019050919050565b600060208201905081810360008301526144d481614498565b9050919050565b7f46697874757265206973206e6f7420696e204f70656e2073746174652e000000600082015250565b6000614511601d83613bbb565b915061451c826144db565b602082019050919050565b6000602082019050818103600083015261454081614504565b9050919050565b7f4e6f207374616b65206f6e207468697320616464726573732d726573756c742e600082015250565b600061457d602083613bbb565b915061458882614547565b602082019050919050565b600060208201905081810360008301526145ac81614570565b9050919050565b7f43757272656e74207374616b6520746f6f206c6f772e00000000000000000000600082015250565b60006145e9601683613bbb565b91506145f4826145b3565b602082019050919050565b60006020820190508181036000830152614618816145dc565b9050919050565b600061462a82613b19565b915061463583613b19565b925082821015614648576146476143ac565b5b828203905092915050565b7f426574207374617465206d757374206265204157414954494e472e0000000000600082015250565b6000614689601b83613bbb565b915061469482614653565b602082019050919050565b600060208201905081810360008301526146b88161467c565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006146f5601683613bbb565b9150614700826146bf565b602082019050919050565b60006020820190508181036000830152614724816146e8565b9050919050565b7f4f6e6c7920436861696e6c696e6b436c69656e742063616e2066756c66696c6c600082015250565b6000614761602083613bbb565b915061476c8261472b565b602082019050919050565b6000602082019050818103600083015261479081614754565b9050919050565b6000815190506147a681613cdb565b92915050565b6000602082840312156147c2576147c1613980565b5b60006147d084828501614797565b91505092915050565b60006040820190506147ee6000830185613fcc565b6147fb6020830184613b23565b9392505050565b61480b81614091565b811461481657600080fd5b50565b60008151905061482881614802565b92915050565b60006020828403121561484457614843613980565b5b600061485284828501614819565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000614891601283613bbb565b915061489c8261485b565b602082019050919050565b600060208201905081810360008301526148c081614884565b9050919050565b7f42657420737461746520697320616c726561647920434c4f5345442e00000000600082015250565b60006148fd601c83613bbb565b9150614908826148c7565b602082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b60008190508160005260206000209050919050565b60008154614955816142a2565b61495f8186614148565b9450600182166000811461497a576001811461498b576149be565b60ff198316865281860193506149be565b61499485614933565b60005b838110156149b657815481890152600182019150602081019050614997565b838801955050505b50505092915050565b60006149d38285614948565b91506149df8284614153565b91508190509392505050565b60006040820190508181036000830152614a058185613bff565b90508181036020830152614a198184613bff565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000614a58601683613bbb565b9150614a6382614a22565b602082019050919050565b60006020820190508181036000830152614a8781614a4b565b9050919050565b60006040820190508181036000830152614aa88185613bff565b9050614ab760208301846140f4565b9392505050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000614b1a602883613bbb565b9150614b2582614abe565b604082019050919050565b60006020820190508181036000830152614b4981614b0d565b9050919050565b60006060820190508181036000830152614b6a8186613bff565b90508181036020830152614b7e8185613bff565b9050614b8d6040830184613b23565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614bcf82613b19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c0257614c016143ac565b5b600182019050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000614c43601783613bbb565b9150614c4e82614c0d565b602082019050919050565b60006020820190508181036000830152614c7281614c36565b9050919050565b60006040820190508181036000830152614c938185613bff565b9050614ca26020830184613b23565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614cde81614ca9565b82525050565b600081519050919050565b600082825260208201905092915050565b6000614d0b82614ce4565b614d158185614cef565b9350614d25818560208601613bcc565b614d2e81613994565b840191505092915050565b600061010082019050614d4f600083018b613fcc565b614d5c602083018a613b23565b614d69604083018961411e565b614d766060830188613fcc565b614d836080830187614cd5565b614d9060a0830186613b23565b614d9d60c0830185613b23565b81810360e0830152614daf8184614d00565b90509998505050505050505050565b7f4572726f72206f6e206669787475726520000000000000000000000000000000815250565b7f3a20556e6b6e6f776e20726573756c742066726f6d204150493a200000000000815250565b6000614e1582614dbe565b601182019150614e258285614153565b9150614e3082614de4565b601b82019150614e408284614153565b91508190509392505050565b7f4669787475726520626574207374617465206973206e6f742046554c46494c4c60008201527f494e472e00000000000000000000000000000000000000000000000000000000602082015250565b6000614ea8602483613bbb565b9150614eb382614e4c565b604082019050919050565b60006020820190508181036000830152614ed781614e9b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f1882613b19565b9150614f2383613b19565b925082614f3357614f32614ede565b5b828204905092915050565b6000614f4982613b19565b9150614f5483613b19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614f8d57614f8c6143ac565b5b828202905092915050565b6000614fa382613b19565b9150614fae83613b19565b925082614fbe57614fbd614ede565b5b828206905092915050565b6000819050919050565b6000614fee614fe9614fe484613f9a565b614fc9565b613f9a565b9050919050565b600061500082614fd3565b9050919050565b600061501282614ff5565b9050919050565b60008160601b9050919050565b600061503182615019565b9050919050565b600061504382615026565b9050919050565b61505b61505682615007565b615038565b82525050565b6000819050919050565b61507c61507782613b19565b615061565b82525050565b600061508e828561504a565b60148201915061509e828461506b565b6020820191508190509392505050565b60006060820190506150c36000830186613fcc565b6150d06020830185613b23565b81810360408301526150e28184614d00565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000615148602383613bbb565b9150615153826150ec565b604082019050919050565b600060208201905081810360008301526151778161513b565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156151d5578086048111156151b1576151b06143ac565b5b60018516156151c05780820291505b80810290506151ce8561517e565b9450615195565b94509492505050565b6000826151ee57600190506152aa565b816151fc57600090506152aa565b8160018114615212576002811461521c5761524b565b60019150506152aa565b60ff84111561522e5761522d6143ac565b5b8360020a915084821115615245576152446143ac565b5b506152aa565b5060208310610133831016604e8410600b84101617156152805782820a90508381111561527b5761527a6143ac565b5b6152aa565b61528d848484600161518b565b925090508184048111156152a4576152a36143ac565b5b81810290505b9392505050565b60006152bc82613b19565b91506152c783613b19565b92506152f47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846151de565b90509291505056fea26469706673582212206b37d8fac9f3c11755f7b74664279eeed2b360c51af415569a1219a6fd48f2ed64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestMultipleParameters(string)": {
        "notice": "Request mutiple parameters from the oracle in a single transaction"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "withdrawLink()": {
        "notice": "Allow withdraw of Link tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3709,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "chainlink",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3711,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "sportsOracleURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 3713,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "jobId",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 3715,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3717,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureResult",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2596,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betTypes",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_enum(BetType)2519)3_storage"
      },
      {
        "astId": 2601,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "entranceFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2610,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betAdvanceTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2615,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "betCutOffTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2623,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "historicalBetters",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 2632,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "activeBetters",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 2641,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "amounts",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2647,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "obligations",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2652,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "bettingState",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_enum(BettingState)2525)"
      },
      {
        "astId": 2656,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "fixtureToKickoffTime",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2660,
        "contract": "contracts/SportsBetting.sol:SportsBetting",
        "label": "requestToFixture",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(BetType)2519)3_storage": {
        "base": "t_enum(BetType)2519",
        "encoding": "inplace",
        "label": "enum SportsBetting.BetType[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(BetType)2519": {
        "encoding": "inplace",
        "label": "enum SportsBetting.BetType",
        "numberOfBytes": "1"
      },
      "t_enum(BettingState)2525": {
        "encoding": "inplace",
        "label": "enum SportsBetting.BettingState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(BetType)2519",
        "label": "mapping(enum SportsBetting.BetType => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(BetType)2519",
        "label": "mapping(enum SportsBetting.BetType => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(BetType)2519",
        "label": "mapping(enum SportsBetting.BetType => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_enum(BettingState)2525)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum SportsBetting.BettingState)",
        "numberOfBytes": "32",
        "value": "t_enum(BettingState)2525"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBetting.BetType => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)2519,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBetting.BetType => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(enum SportsBetting.BetType => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(BetType)2519,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}